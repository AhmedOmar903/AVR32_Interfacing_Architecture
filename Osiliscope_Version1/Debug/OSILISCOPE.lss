
OSILISCOPE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013c  00800060  00002c8a  00002d1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  0080019c  0080019c  00002e5a  2**0
                  ALLOC
  3 .stab         00002478  00000000  00000000  00002e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001211  00000000  00000000  000052d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000064e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006685  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006877  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00008c82  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a008  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b1e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b3a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000b696  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c004  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <__vector_9>
      28:	0c 94 06 13 	jmp	0x260c	; 0x260c <__vector_10>
      2c:	0c 94 d3 12 	jmp	0x25a6	; 0x25a6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e8       	ldi	r30, 0x8A	; 138
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3b       	cpi	r26, 0xB1	; 177
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 be 13 	call	0x277c	; 0x277c <main>
      8a:	0c 94 43 16 	jmp	0x2c86	; 0x2c86 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 28 16 	jmp	0x2c50	; 0x2c50 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 34 16 	jmp	0x2c68	; 0x2c68 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 34 16 	jmp	0x2c68	; 0x2c68 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 28 16 	jmp	0x2c50	; 0x2c50 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 30 16 	jmp	0x2c60	; 0x2c60 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 34 16 	jmp	0x2c68	; 0x2c68 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 34 16 	jmp	0x2c68	; 0x2c68 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 34 16 	jmp	0x2c68	; 0x2c68 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 38 16 	jmp	0x2c70	; 0x2c70 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 30 16 	jmp	0x2c60	; 0x2c60 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_SetCallBack>:
	#include "BIT_MATH.h"
	#include "ADC_interface.h"
	#include "ADC_register.h"

	static void(*Gptr)(u16 ADC_Adress)=NULL;
	void ADC_SetCallBack(void (*LocPtr)(u16 ADC_Adress)){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <ADC_SetCallBack+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01

		if(LocPtr!=NULL){
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	9a 81       	ldd	r25, Y+2	; 0x02
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	31 f0       	breq	.+12     	; 0xe50 <ADC_SetCallBack+0x22>
			Gptr=LocPtr;
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	9a 81       	ldd	r25, Y+2	; 0x02
     e48:	90 93 9d 01 	sts	0x019D, r25
     e4c:	80 93 9c 01 	sts	0x019C, r24
			}

	}
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	08 95       	ret

00000e5a <ADC_VidInit>:
	void ADC_VidInit(void){
     e5a:	df 93       	push	r29
     e5c:	cf 93       	push	r28
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
	//CHOOSE THE Vref//
	  SET_BIT(ADMUX,PIN6);
     e62:	a7 e2       	ldi	r26, 0x27	; 39
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e7 e2       	ldi	r30, 0x27	; 39
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	80 64       	ori	r24, 0x40	; 64
     e6e:	8c 93       	st	X, r24
	  CLR_BIT(ADMUX,PIN7);
     e70:	a7 e2       	ldi	r26, 0x27	; 39
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e7 e2       	ldi	r30, 0x27	; 39
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	8f 77       	andi	r24, 0x7F	; 127
     e7c:	8c 93       	st	X, r24

	#if DATA_READING==RIGHT  
	   CLR_BIT(ADMUX,PIN5);//choose the right adjest//
     e7e:	a7 e2       	ldi	r26, 0x27	; 39
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e7 e2       	ldi	r30, 0x27	; 39
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	8f 7d       	andi	r24, 0xDF	; 223
     e8a:	8c 93       	st	X, r24
	#endif   

	#if AUTO_TRIG==OFF
	   CLR_BIT(ADCSRA,PIN5);//auto trigger OFF//
	#elif   AUTO_TRIG==ON
	  SET_BIT(ADCSRA,PIN5);//auto trigger on//
     e8c:	a6 e2       	ldi	r26, 0x26	; 38
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e6 e2       	ldi	r30, 0x26	; 38
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	80 62       	ori	r24, 0x20	; 32
     e98:	8c 93       	st	X, r24
	  CLR_BIT(SFIOR,PIN4);// this bit must be zero when SFIOR is written //
     e9a:	a0 e5       	ldi	r26, 0x50	; 80
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e0 e5       	ldi	r30, 0x50	; 80
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	8f 7e       	andi	r24, 0xEF	; 239
     ea6:	8c 93       	st	X, r24
			  #if AUTO_TRIG_SOURCE==RUNNING
				  CLR_BIT(SFIOR,PIN5);
     ea8:	a0 e5       	ldi	r26, 0x50	; 80
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e0 e5       	ldi	r30, 0x50	; 80
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	8f 7d       	andi	r24, 0xDF	; 223
     eb4:	8c 93       	st	X, r24
				  CLR_BIT(SFIOR,PIN6);
     eb6:	a0 e5       	ldi	r26, 0x50	; 80
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e0 e5       	ldi	r30, 0x50	; 80
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	8f 7b       	andi	r24, 0xBF	; 191
     ec2:	8c 93       	st	X, r24
				  CLR_BIT(SFIOR,PIN7);
     ec4:	a0 e5       	ldi	r26, 0x50	; 80
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e0 e5       	ldi	r30, 0x50	; 80
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	8f 77       	andi	r24, 0x7F	; 127
     ed0:	8c 93       	st	X, r24

			  #endif

	#endif   
	   
		CLR_BIT(ADCSRA,PIN0);  //pre scaller 64//
     ed2:	a6 e2       	ldi	r26, 0x26	; 38
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e6 e2       	ldi	r30, 0x26	; 38
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	8e 7f       	andi	r24, 0xFE	; 254
     ede:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,PIN1);
     ee0:	a6 e2       	ldi	r26, 0x26	; 38
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e6 e2       	ldi	r30, 0x26	; 38
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	82 60       	ori	r24, 0x02	; 2
     eec:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,PIN2);
     eee:	a6 e2       	ldi	r26, 0x26	; 38
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e6 e2       	ldi	r30, 0x26	; 38
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	84 60       	ori	r24, 0x04	; 4
     efa:	8c 93       	st	X, r24
		
	  
		SET_BIT(ADCSRA ,PIN7);//ADC ENABLBE//
     efc:	a6 e2       	ldi	r26, 0x26	; 38
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e6 e2       	ldi	r30, 0x26	; 38
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	80 68       	ori	r24, 0x80	; 128
     f08:	8c 93       	st	X, r24

	}
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <ADC_VidGetReadingPooling>:

	u16 ADC_VidGetReadingPooling(u8 LOC_u8AdcNum){
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	0f 92       	push	r0
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	89 83       	std	Y+1, r24	; 0x01
		
		ADMUX &= 0b11100000;
     f1c:	a7 e2       	ldi	r26, 0x27	; 39
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e7 e2       	ldi	r30, 0x27	; 39
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	80 7e       	andi	r24, 0xE0	; 224
     f28:	8c 93       	st	X, r24
		ADMUX |= LOC_u8AdcNum;
     f2a:	a7 e2       	ldi	r26, 0x27	; 39
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e7 e2       	ldi	r30, 0x27	; 39
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	90 81       	ld	r25, Z
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	89 2b       	or	r24, r25
     f38:	8c 93       	st	X, r24
		
		SET_BIT(ADCSRA,PIN6);//start the conversion//
     f3a:	a6 e2       	ldi	r26, 0x26	; 38
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e6 e2       	ldi	r30, 0x26	; 38
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	80 64       	ori	r24, 0x40	; 64
     f46:	8c 93       	st	X, r24
		
		while(0==GET_BIT(ADCSRA,PIN4)){}
     f48:	e6 e2       	ldi	r30, 0x26	; 38
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	82 95       	swap	r24
     f50:	8f 70       	andi	r24, 0x0F	; 15
     f52:	88 2f       	mov	r24, r24
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	81 70       	andi	r24, 0x01	; 1
     f58:	90 70       	andi	r25, 0x00	; 0
     f5a:	00 97       	sbiw	r24, 0x00	; 0
     f5c:	a9 f3       	breq	.-22     	; 0xf48 <ADC_VidGetReadingPooling+0x38>
		SET_BIT(ADCSRA,PIN4);
     f5e:	a6 e2       	ldi	r26, 0x26	; 38
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e6 e2       	ldi	r30, 0x26	; 38
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	80 61       	ori	r24, 0x10	; 16
     f6a:	8c 93       	st	X, r24
		
		return ADC;
     f6c:	e4 e2       	ldi	r30, 0x24	; 36
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	91 81       	ldd	r25, Z+1	; 0x01
	}
     f74:	0f 90       	pop	r0
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <ADC_VidGetReadingInterrupt>:

	void ADC_VidGetReadingInterrupt(u8 LOC_u8AdcNum){
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	0f 92       	push	r0
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	89 83       	std	Y+1, r24	; 0x01
		ADMUX&=0b11100000;
     f88:	a7 e2       	ldi	r26, 0x27	; 39
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e7 e2       	ldi	r30, 0x27	; 39
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	80 7e       	andi	r24, 0xE0	; 224
     f94:	8c 93       	st	X, r24
		ADMUX|=LOC_u8AdcNum;
     f96:	a7 e2       	ldi	r26, 0x27	; 39
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e7 e2       	ldi	r30, 0x27	; 39
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	90 81       	ld	r25, Z
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	89 2b       	or	r24, r25
     fa4:	8c 93       	st	X, r24

	#if	INTERRUPT_ADC==ON
	 SET_BIT(ADCSRA,PIN3);//enable the ADC interrupt on//
	#elif  INTERRUPT_ADC==OFF
	 CLR_BIT(ADCSRA,PIN3);//Disable the ADC interrupt on//
     fa6:	a6 e2       	ldi	r26, 0x26	; 38
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e6 e2       	ldi	r30, 0x26	; 38
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	87 7f       	andi	r24, 0xF7	; 247
     fb2:	8c 93       	st	X, r24
	#endif
	SET_BIT(ADCSRA,PIN6);//start the conversion//
     fb4:	a6 e2       	ldi	r26, 0x26	; 38
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e6 e2       	ldi	r30, 0x26	; 38
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	80 64       	ori	r24, 0x40	; 64
     fc0:	8c 93       	st	X, r24

	}
     fc2:	0f 90       	pop	r0
     fc4:	cf 91       	pop	r28
     fc6:	df 91       	pop	r29
     fc8:	08 95       	ret

00000fca <__vector_16>:

	void __vector_16( void ){
     fca:	1f 92       	push	r1
     fcc:	0f 92       	push	r0
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	0f 92       	push	r0
     fd2:	11 24       	eor	r1, r1
     fd4:	2f 93       	push	r18
     fd6:	3f 93       	push	r19
     fd8:	4f 93       	push	r20
     fda:	5f 93       	push	r21
     fdc:	6f 93       	push	r22
     fde:	7f 93       	push	r23
     fe0:	8f 93       	push	r24
     fe2:	9f 93       	push	r25
     fe4:	af 93       	push	r26
     fe6:	bf 93       	push	r27
     fe8:	ef 93       	push	r30
     fea:	ff 93       	push	r31
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62

	 if(Gptr!=NULL){
     ff4:	80 91 9c 01 	lds	r24, 0x019C
     ff8:	90 91 9d 01 	lds	r25, 0x019D
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	49 f0       	breq	.+18     	; 0x1012 <__vector_16+0x48>
		Gptr(ADC);
    1000:	e0 91 9c 01 	lds	r30, 0x019C
    1004:	f0 91 9d 01 	lds	r31, 0x019D
    1008:	a4 e2       	ldi	r26, 0x24	; 36
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	8d 91       	ld	r24, X+
    100e:	9c 91       	ld	r25, X
    1010:	09 95       	icall
		}

	}
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	ff 91       	pop	r31
    1018:	ef 91       	pop	r30
    101a:	bf 91       	pop	r27
    101c:	af 91       	pop	r26
    101e:	9f 91       	pop	r25
    1020:	8f 91       	pop	r24
    1022:	7f 91       	pop	r23
    1024:	6f 91       	pop	r22
    1026:	5f 91       	pop	r21
    1028:	4f 91       	pop	r20
    102a:	3f 91       	pop	r19
    102c:	2f 91       	pop	r18
    102e:	0f 90       	pop	r0
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	0f 90       	pop	r0
    1034:	1f 90       	pop	r1
    1036:	18 95       	reti

00001038 <DIO_VidSetPinDirection>:
/*
loc_u8port=port name 
loc_u8pin =pin number
loc_u8state=pin direction
*/
void DIO_VidSetPinDirection(u8 loc_u8port,u8 loc_u8pin, u8 loc_u8state){
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	27 97       	sbiw	r28, 0x07	; 7
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	f8 94       	cli
    1046:	de bf       	out	0x3e, r29	; 62
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	cd bf       	out	0x3d, r28	; 61
    104c:	89 83       	std	Y+1, r24	; 0x01
    104e:	6a 83       	std	Y+2, r22	; 0x02
    1050:	4b 83       	std	Y+3, r20	; 0x03
	
	if(1==loc_u8state){
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	09 f0       	breq	.+2      	; 0x105a <DIO_VidSetPinDirection+0x22>
    1058:	6f c0       	rjmp	.+222    	; 0x1138 <DIO_VidSetPinDirection+0x100>
	    switch(loc_u8port){
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	3f 83       	std	Y+7, r19	; 0x07
    1062:	2e 83       	std	Y+6, r18	; 0x06
    1064:	8e 81       	ldd	r24, Y+6	; 0x06
    1066:	9f 81       	ldd	r25, Y+7	; 0x07
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	91 05       	cpc	r25, r1
    106c:	49 f1       	breq	.+82     	; 0x10c0 <DIO_VidSetPinDirection+0x88>
    106e:	2e 81       	ldd	r18, Y+6	; 0x06
    1070:	3f 81       	ldd	r19, Y+7	; 0x07
    1072:	22 30       	cpi	r18, 0x02	; 2
    1074:	31 05       	cpc	r19, r1
    1076:	2c f4       	brge	.+10     	; 0x1082 <DIO_VidSetPinDirection+0x4a>
    1078:	8e 81       	ldd	r24, Y+6	; 0x06
    107a:	9f 81       	ldd	r25, Y+7	; 0x07
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	61 f0       	breq	.+24     	; 0x1098 <DIO_VidSetPinDirection+0x60>
    1080:	d2 c0       	rjmp	.+420    	; 0x1226 <DIO_VidSetPinDirection+0x1ee>
    1082:	2e 81       	ldd	r18, Y+6	; 0x06
    1084:	3f 81       	ldd	r19, Y+7	; 0x07
    1086:	22 30       	cpi	r18, 0x02	; 2
    1088:	31 05       	cpc	r19, r1
    108a:	71 f1       	breq	.+92     	; 0x10e8 <DIO_VidSetPinDirection+0xb0>
    108c:	8e 81       	ldd	r24, Y+6	; 0x06
    108e:	9f 81       	ldd	r25, Y+7	; 0x07
    1090:	83 30       	cpi	r24, 0x03	; 3
    1092:	91 05       	cpc	r25, r1
    1094:	e9 f1       	breq	.+122    	; 0x1110 <DIO_VidSetPinDirection+0xd8>
    1096:	c7 c0       	rjmp	.+398    	; 0x1226 <DIO_VidSetPinDirection+0x1ee>
		case 0:SET_BIT(DDRA,loc_u8pin);break;
    1098:	aa e3       	ldi	r26, 0x3A	; 58
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	ea e3       	ldi	r30, 0x3A	; 58
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	48 2f       	mov	r20, r24
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 2e       	mov	r0, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <DIO_VidSetPinDirection+0x7e>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	0a 94       	dec	r0
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <DIO_VidSetPinDirection+0x7a>
    10ba:	84 2b       	or	r24, r20
    10bc:	8c 93       	st	X, r24
    10be:	b3 c0       	rjmp	.+358    	; 0x1226 <DIO_VidSetPinDirection+0x1ee>
		case 1:SET_BIT(DDRB,loc_u8pin);break;
    10c0:	a7 e3       	ldi	r26, 0x37	; 55
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e7 e3       	ldi	r30, 0x37	; 55
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	48 2f       	mov	r20, r24
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 2e       	mov	r0, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <DIO_VidSetPinDirection+0xa6>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	0a 94       	dec	r0
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <DIO_VidSetPinDirection+0xa2>
    10e2:	84 2b       	or	r24, r20
    10e4:	8c 93       	st	X, r24
    10e6:	9f c0       	rjmp	.+318    	; 0x1226 <DIO_VidSetPinDirection+0x1ee>
		case 2:SET_BIT(DDRC,loc_u8pin);break;
    10e8:	a4 e3       	ldi	r26, 0x34	; 52
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e4 e3       	ldi	r30, 0x34	; 52
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	48 2f       	mov	r20, r24
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <DIO_VidSetPinDirection+0xce>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <DIO_VidSetPinDirection+0xca>
    110a:	84 2b       	or	r24, r20
    110c:	8c 93       	st	X, r24
    110e:	8b c0       	rjmp	.+278    	; 0x1226 <DIO_VidSetPinDirection+0x1ee>
		case 3:SET_BIT(DDRD,loc_u8pin);break;
    1110:	a1 e3       	ldi	r26, 0x31	; 49
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e1 e3       	ldi	r30, 0x31	; 49
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	48 2f       	mov	r20, r24
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	02 2e       	mov	r0, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <DIO_VidSetPinDirection+0xf6>
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	0a 94       	dec	r0
    1130:	e2 f7       	brpl	.-8      	; 0x112a <DIO_VidSetPinDirection+0xf2>
    1132:	84 2b       	or	r24, r20
    1134:	8c 93       	st	X, r24
    1136:	77 c0       	rjmp	.+238    	; 0x1226 <DIO_VidSetPinDirection+0x1ee>
	 }
	}
	else if(0==loc_u8state){
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	88 23       	and	r24, r24
    113c:	09 f0       	breq	.+2      	; 0x1140 <DIO_VidSetPinDirection+0x108>
    113e:	73 c0       	rjmp	.+230    	; 0x1226 <DIO_VidSetPinDirection+0x1ee>
	    switch(loc_u8port){
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	3d 83       	std	Y+5, r19	; 0x05
    1148:	2c 83       	std	Y+4, r18	; 0x04
    114a:	8c 81       	ldd	r24, Y+4	; 0x04
    114c:	9d 81       	ldd	r25, Y+5	; 0x05
    114e:	81 30       	cpi	r24, 0x01	; 1
    1150:	91 05       	cpc	r25, r1
    1152:	59 f1       	breq	.+86     	; 0x11aa <DIO_VidSetPinDirection+0x172>
    1154:	2c 81       	ldd	r18, Y+4	; 0x04
    1156:	3d 81       	ldd	r19, Y+5	; 0x05
    1158:	22 30       	cpi	r18, 0x02	; 2
    115a:	31 05       	cpc	r19, r1
    115c:	2c f4       	brge	.+10     	; 0x1168 <DIO_VidSetPinDirection+0x130>
    115e:	8c 81       	ldd	r24, Y+4	; 0x04
    1160:	9d 81       	ldd	r25, Y+5	; 0x05
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	69 f0       	breq	.+26     	; 0x1180 <DIO_VidSetPinDirection+0x148>
    1166:	5f c0       	rjmp	.+190    	; 0x1226 <DIO_VidSetPinDirection+0x1ee>
    1168:	2c 81       	ldd	r18, Y+4	; 0x04
    116a:	3d 81       	ldd	r19, Y+5	; 0x05
    116c:	22 30       	cpi	r18, 0x02	; 2
    116e:	31 05       	cpc	r19, r1
    1170:	89 f1       	breq	.+98     	; 0x11d4 <DIO_VidSetPinDirection+0x19c>
    1172:	8c 81       	ldd	r24, Y+4	; 0x04
    1174:	9d 81       	ldd	r25, Y+5	; 0x05
    1176:	83 30       	cpi	r24, 0x03	; 3
    1178:	91 05       	cpc	r25, r1
    117a:	09 f4       	brne	.+2      	; 0x117e <DIO_VidSetPinDirection+0x146>
    117c:	40 c0       	rjmp	.+128    	; 0x11fe <DIO_VidSetPinDirection+0x1c6>
    117e:	53 c0       	rjmp	.+166    	; 0x1226 <DIO_VidSetPinDirection+0x1ee>
		case 0:CLR_BIT(DDRA,loc_u8pin);break;
    1180:	aa e3       	ldi	r26, 0x3A	; 58
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	ea e3       	ldi	r30, 0x3A	; 58
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	48 2f       	mov	r20, r24
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	02 2e       	mov	r0, r18
    1198:	02 c0       	rjmp	.+4      	; 0x119e <DIO_VidSetPinDirection+0x166>
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	0a 94       	dec	r0
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <DIO_VidSetPinDirection+0x162>
    11a2:	80 95       	com	r24
    11a4:	84 23       	and	r24, r20
    11a6:	8c 93       	st	X, r24
    11a8:	3e c0       	rjmp	.+124    	; 0x1226 <DIO_VidSetPinDirection+0x1ee>
		case 1:CLR_BIT(DDRB,loc_u8pin);break;
    11aa:	a7 e3       	ldi	r26, 0x37	; 55
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e7 e3       	ldi	r30, 0x37	; 55
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	48 2f       	mov	r20, r24
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	02 2e       	mov	r0, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <DIO_VidSetPinDirection+0x190>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	0a 94       	dec	r0
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <DIO_VidSetPinDirection+0x18c>
    11cc:	80 95       	com	r24
    11ce:	84 23       	and	r24, r20
    11d0:	8c 93       	st	X, r24
    11d2:	29 c0       	rjmp	.+82     	; 0x1226 <DIO_VidSetPinDirection+0x1ee>
		case 2:CLR_BIT(DDRC,loc_u8pin);break;
    11d4:	a4 e3       	ldi	r26, 0x34	; 52
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e4 e3       	ldi	r30, 0x34	; 52
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	48 2f       	mov	r20, r24
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	02 2e       	mov	r0, r18
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <DIO_VidSetPinDirection+0x1ba>
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	0a 94       	dec	r0
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <DIO_VidSetPinDirection+0x1b6>
    11f6:	80 95       	com	r24
    11f8:	84 23       	and	r24, r20
    11fa:	8c 93       	st	X, r24
    11fc:	14 c0       	rjmp	.+40     	; 0x1226 <DIO_VidSetPinDirection+0x1ee>
		case 3:CLR_BIT(DDRD,loc_u8pin);break;
    11fe:	a1 e3       	ldi	r26, 0x31	; 49
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e1 e3       	ldi	r30, 0x31	; 49
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	48 2f       	mov	r20, r24
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	02 2e       	mov	r0, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <DIO_VidSetPinDirection+0x1e4>
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	0a 94       	dec	r0
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <DIO_VidSetPinDirection+0x1e0>
    1220:	80 95       	com	r24
    1222:	84 23       	and	r24, r20
    1224:	8c 93       	st	X, r24
	 }
	}
	
	
}
    1226:	27 96       	adiw	r28, 0x07	; 7
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <DIO_VidSetPinValue>:
void DIO_VidSetPinValue(u8 loc_u8port,u8 loc_u8pin, u8 loc_u8value){
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
    1240:	27 97       	sbiw	r28, 0x07	; 7
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	de bf       	out	0x3e, r29	; 62
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	cd bf       	out	0x3d, r28	; 61
    124c:	89 83       	std	Y+1, r24	; 0x01
    124e:	6a 83       	std	Y+2, r22	; 0x02
    1250:	4b 83       	std	Y+3, r20	; 0x03
	
	if(1==loc_u8value){
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	81 30       	cpi	r24, 0x01	; 1
    1256:	09 f0       	breq	.+2      	; 0x125a <DIO_VidSetPinValue+0x22>
    1258:	6f c0       	rjmp	.+222    	; 0x1338 <DIO_VidSetPinValue+0x100>
	    switch(loc_u8port){
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	3f 83       	std	Y+7, r19	; 0x07
    1262:	2e 83       	std	Y+6, r18	; 0x06
    1264:	8e 81       	ldd	r24, Y+6	; 0x06
    1266:	9f 81       	ldd	r25, Y+7	; 0x07
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	91 05       	cpc	r25, r1
    126c:	49 f1       	breq	.+82     	; 0x12c0 <DIO_VidSetPinValue+0x88>
    126e:	2e 81       	ldd	r18, Y+6	; 0x06
    1270:	3f 81       	ldd	r19, Y+7	; 0x07
    1272:	22 30       	cpi	r18, 0x02	; 2
    1274:	31 05       	cpc	r19, r1
    1276:	2c f4       	brge	.+10     	; 0x1282 <DIO_VidSetPinValue+0x4a>
    1278:	8e 81       	ldd	r24, Y+6	; 0x06
    127a:	9f 81       	ldd	r25, Y+7	; 0x07
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	61 f0       	breq	.+24     	; 0x1298 <DIO_VidSetPinValue+0x60>
    1280:	d2 c0       	rjmp	.+420    	; 0x1426 <DIO_VidSetPinValue+0x1ee>
    1282:	2e 81       	ldd	r18, Y+6	; 0x06
    1284:	3f 81       	ldd	r19, Y+7	; 0x07
    1286:	22 30       	cpi	r18, 0x02	; 2
    1288:	31 05       	cpc	r19, r1
    128a:	71 f1       	breq	.+92     	; 0x12e8 <DIO_VidSetPinValue+0xb0>
    128c:	8e 81       	ldd	r24, Y+6	; 0x06
    128e:	9f 81       	ldd	r25, Y+7	; 0x07
    1290:	83 30       	cpi	r24, 0x03	; 3
    1292:	91 05       	cpc	r25, r1
    1294:	e9 f1       	breq	.+122    	; 0x1310 <DIO_VidSetPinValue+0xd8>
    1296:	c7 c0       	rjmp	.+398    	; 0x1426 <DIO_VidSetPinValue+0x1ee>
		case 0:SET_BIT(PORTA,loc_u8pin);break;
    1298:	ab e3       	ldi	r26, 0x3B	; 59
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	eb e3       	ldi	r30, 0x3B	; 59
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	48 2f       	mov	r20, r24
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	02 2e       	mov	r0, r18
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <DIO_VidSetPinValue+0x7e>
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	0a 94       	dec	r0
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <DIO_VidSetPinValue+0x7a>
    12ba:	84 2b       	or	r24, r20
    12bc:	8c 93       	st	X, r24
    12be:	b3 c0       	rjmp	.+358    	; 0x1426 <DIO_VidSetPinValue+0x1ee>
		case 1:SET_BIT(PORTB,loc_u8pin);break;
    12c0:	a8 e3       	ldi	r26, 0x38	; 56
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e8 e3       	ldi	r30, 0x38	; 56
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	48 2f       	mov	r20, r24
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	02 2e       	mov	r0, r18
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <DIO_VidSetPinValue+0xa6>
    12da:	88 0f       	add	r24, r24
    12dc:	99 1f       	adc	r25, r25
    12de:	0a 94       	dec	r0
    12e0:	e2 f7       	brpl	.-8      	; 0x12da <DIO_VidSetPinValue+0xa2>
    12e2:	84 2b       	or	r24, r20
    12e4:	8c 93       	st	X, r24
    12e6:	9f c0       	rjmp	.+318    	; 0x1426 <DIO_VidSetPinValue+0x1ee>
		case 2:SET_BIT(PORTC,loc_u8pin);break;
    12e8:	a5 e3       	ldi	r26, 0x35	; 53
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	e5 e3       	ldi	r30, 0x35	; 53
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	48 2f       	mov	r20, r24
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	02 2e       	mov	r0, r18
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <DIO_VidSetPinValue+0xce>
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	0a 94       	dec	r0
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <DIO_VidSetPinValue+0xca>
    130a:	84 2b       	or	r24, r20
    130c:	8c 93       	st	X, r24
    130e:	8b c0       	rjmp	.+278    	; 0x1426 <DIO_VidSetPinValue+0x1ee>
		case 3:SET_BIT(PORTD,loc_u8pin);break;
    1310:	a2 e3       	ldi	r26, 0x32	; 50
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e2 e3       	ldi	r30, 0x32	; 50
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <DIO_VidSetPinValue+0xf6>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <DIO_VidSetPinValue+0xf2>
    1332:	84 2b       	or	r24, r20
    1334:	8c 93       	st	X, r24
    1336:	77 c0       	rjmp	.+238    	; 0x1426 <DIO_VidSetPinValue+0x1ee>
	 }
	}
	else if(0==loc_u8value){
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	88 23       	and	r24, r24
    133c:	09 f0       	breq	.+2      	; 0x1340 <DIO_VidSetPinValue+0x108>
    133e:	73 c0       	rjmp	.+230    	; 0x1426 <DIO_VidSetPinValue+0x1ee>
	    switch(loc_u8port){
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	3d 83       	std	Y+5, r19	; 0x05
    1348:	2c 83       	std	Y+4, r18	; 0x04
    134a:	8c 81       	ldd	r24, Y+4	; 0x04
    134c:	9d 81       	ldd	r25, Y+5	; 0x05
    134e:	81 30       	cpi	r24, 0x01	; 1
    1350:	91 05       	cpc	r25, r1
    1352:	59 f1       	breq	.+86     	; 0x13aa <DIO_VidSetPinValue+0x172>
    1354:	2c 81       	ldd	r18, Y+4	; 0x04
    1356:	3d 81       	ldd	r19, Y+5	; 0x05
    1358:	22 30       	cpi	r18, 0x02	; 2
    135a:	31 05       	cpc	r19, r1
    135c:	2c f4       	brge	.+10     	; 0x1368 <DIO_VidSetPinValue+0x130>
    135e:	8c 81       	ldd	r24, Y+4	; 0x04
    1360:	9d 81       	ldd	r25, Y+5	; 0x05
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	69 f0       	breq	.+26     	; 0x1380 <DIO_VidSetPinValue+0x148>
    1366:	5f c0       	rjmp	.+190    	; 0x1426 <DIO_VidSetPinValue+0x1ee>
    1368:	2c 81       	ldd	r18, Y+4	; 0x04
    136a:	3d 81       	ldd	r19, Y+5	; 0x05
    136c:	22 30       	cpi	r18, 0x02	; 2
    136e:	31 05       	cpc	r19, r1
    1370:	89 f1       	breq	.+98     	; 0x13d4 <DIO_VidSetPinValue+0x19c>
    1372:	8c 81       	ldd	r24, Y+4	; 0x04
    1374:	9d 81       	ldd	r25, Y+5	; 0x05
    1376:	83 30       	cpi	r24, 0x03	; 3
    1378:	91 05       	cpc	r25, r1
    137a:	09 f4       	brne	.+2      	; 0x137e <DIO_VidSetPinValue+0x146>
    137c:	40 c0       	rjmp	.+128    	; 0x13fe <DIO_VidSetPinValue+0x1c6>
    137e:	53 c0       	rjmp	.+166    	; 0x1426 <DIO_VidSetPinValue+0x1ee>
		case 0:CLR_BIT(PORTA,loc_u8pin);break;
    1380:	ab e3       	ldi	r26, 0x3B	; 59
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	eb e3       	ldi	r30, 0x3B	; 59
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	48 2f       	mov	r20, r24
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	02 2e       	mov	r0, r18
    1398:	02 c0       	rjmp	.+4      	; 0x139e <DIO_VidSetPinValue+0x166>
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	0a 94       	dec	r0
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <DIO_VidSetPinValue+0x162>
    13a2:	80 95       	com	r24
    13a4:	84 23       	and	r24, r20
    13a6:	8c 93       	st	X, r24
    13a8:	3e c0       	rjmp	.+124    	; 0x1426 <DIO_VidSetPinValue+0x1ee>
		case 1:CLR_BIT(PORTB,loc_u8pin);break;
    13aa:	a8 e3       	ldi	r26, 0x38	; 56
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e8 e3       	ldi	r30, 0x38	; 56
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	48 2f       	mov	r20, r24
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	02 2e       	mov	r0, r18
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <DIO_VidSetPinValue+0x190>
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	0a 94       	dec	r0
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <DIO_VidSetPinValue+0x18c>
    13cc:	80 95       	com	r24
    13ce:	84 23       	and	r24, r20
    13d0:	8c 93       	st	X, r24
    13d2:	29 c0       	rjmp	.+82     	; 0x1426 <DIO_VidSetPinValue+0x1ee>
		case 2:CLR_BIT(PORTC,loc_u8pin);break;
    13d4:	a5 e3       	ldi	r26, 0x35	; 53
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e5 e3       	ldi	r30, 0x35	; 53
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	48 2f       	mov	r20, r24
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	02 2e       	mov	r0, r18
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <DIO_VidSetPinValue+0x1ba>
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	0a 94       	dec	r0
    13f4:	e2 f7       	brpl	.-8      	; 0x13ee <DIO_VidSetPinValue+0x1b6>
    13f6:	80 95       	com	r24
    13f8:	84 23       	and	r24, r20
    13fa:	8c 93       	st	X, r24
    13fc:	14 c0       	rjmp	.+40     	; 0x1426 <DIO_VidSetPinValue+0x1ee>
		case 3:CLR_BIT(PORTD,loc_u8pin);break;
    13fe:	a2 e3       	ldi	r26, 0x32	; 50
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e2 e3       	ldi	r30, 0x32	; 50
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	48 2f       	mov	r20, r24
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	02 2e       	mov	r0, r18
    1416:	02 c0       	rjmp	.+4      	; 0x141c <DIO_VidSetPinValue+0x1e4>
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	0a 94       	dec	r0
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <DIO_VidSetPinValue+0x1e0>
    1420:	80 95       	com	r24
    1422:	84 23       	and	r24, r20
    1424:	8c 93       	st	X, r24
	 }
	}
}
    1426:	27 96       	adiw	r28, 0x07	; 7
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	cd bf       	out	0x3d, r28	; 61
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	08 95       	ret

00001438 <DIO_VidSetPortDirection>:
void DIO_VidSetPortDirection(u8 loc_u8port,u8 loc_u8value){
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	00 d0       	rcall	.+0      	; 0x143e <DIO_VidSetPortDirection+0x6>
    143e:	00 d0       	rcall	.+0      	; 0x1440 <DIO_VidSetPortDirection+0x8>
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	89 83       	std	Y+1, r24	; 0x01
    1446:	6a 83       	std	Y+2, r22	; 0x02
	

			switch(loc_u8port){
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	3c 83       	std	Y+4, r19	; 0x04
    1450:	2b 83       	std	Y+3, r18	; 0x03
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	9c 81       	ldd	r25, Y+4	; 0x04
    1456:	81 30       	cpi	r24, 0x01	; 1
    1458:	91 05       	cpc	r25, r1
    145a:	d1 f0       	breq	.+52     	; 0x1490 <DIO_VidSetPortDirection+0x58>
    145c:	2b 81       	ldd	r18, Y+3	; 0x03
    145e:	3c 81       	ldd	r19, Y+4	; 0x04
    1460:	22 30       	cpi	r18, 0x02	; 2
    1462:	31 05       	cpc	r19, r1
    1464:	2c f4       	brge	.+10     	; 0x1470 <DIO_VidSetPortDirection+0x38>
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	9c 81       	ldd	r25, Y+4	; 0x04
    146a:	00 97       	sbiw	r24, 0x00	; 0
    146c:	61 f0       	breq	.+24     	; 0x1486 <DIO_VidSetPortDirection+0x4e>
    146e:	1e c0       	rjmp	.+60     	; 0x14ac <DIO_VidSetPortDirection+0x74>
    1470:	2b 81       	ldd	r18, Y+3	; 0x03
    1472:	3c 81       	ldd	r19, Y+4	; 0x04
    1474:	22 30       	cpi	r18, 0x02	; 2
    1476:	31 05       	cpc	r19, r1
    1478:	81 f0       	breq	.+32     	; 0x149a <DIO_VidSetPortDirection+0x62>
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	9c 81       	ldd	r25, Y+4	; 0x04
    147e:	83 30       	cpi	r24, 0x03	; 3
    1480:	91 05       	cpc	r25, r1
    1482:	81 f0       	breq	.+32     	; 0x14a4 <DIO_VidSetPortDirection+0x6c>
    1484:	13 c0       	rjmp	.+38     	; 0x14ac <DIO_VidSetPortDirection+0x74>

			case 0:DDRA=loc_u8value;break;
    1486:	ea e3       	ldi	r30, 0x3A	; 58
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	80 83       	st	Z, r24
    148e:	0e c0       	rjmp	.+28     	; 0x14ac <DIO_VidSetPortDirection+0x74>
			case 1:DDRB=loc_u8value;break;
    1490:	e7 e3       	ldi	r30, 0x37	; 55
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	80 83       	st	Z, r24
    1498:	09 c0       	rjmp	.+18     	; 0x14ac <DIO_VidSetPortDirection+0x74>
			case 2:DDRC=loc_u8value;break;
    149a:	e4 e3       	ldi	r30, 0x34	; 52
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	80 83       	st	Z, r24
    14a2:	04 c0       	rjmp	.+8      	; 0x14ac <DIO_VidSetPortDirection+0x74>
			case 3:DDRD=loc_u8value;break;
    14a4:	e1 e3       	ldi	r30, 0x31	; 49
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	80 83       	st	Z, r24

			}
		
}
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <DIO_VidSetPortValue>:
void DIO_VidSetPortValue(u8 loc_u8port,u8 loc_u8value){
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <DIO_VidSetPortValue+0x6>
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <DIO_VidSetPortValue+0x8>
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	89 83       	std	Y+1, r24	; 0x01
    14c8:	6a 83       	std	Y+2, r22	; 0x02
	
			switch(loc_u8port){
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	3c 83       	std	Y+4, r19	; 0x04
    14d2:	2b 83       	std	Y+3, r18	; 0x03
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	9c 81       	ldd	r25, Y+4	; 0x04
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	91 05       	cpc	r25, r1
    14dc:	d1 f0       	breq	.+52     	; 0x1512 <DIO_VidSetPortValue+0x58>
    14de:	2b 81       	ldd	r18, Y+3	; 0x03
    14e0:	3c 81       	ldd	r19, Y+4	; 0x04
    14e2:	22 30       	cpi	r18, 0x02	; 2
    14e4:	31 05       	cpc	r19, r1
    14e6:	2c f4       	brge	.+10     	; 0x14f2 <DIO_VidSetPortValue+0x38>
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	9c 81       	ldd	r25, Y+4	; 0x04
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	61 f0       	breq	.+24     	; 0x1508 <DIO_VidSetPortValue+0x4e>
    14f0:	1e c0       	rjmp	.+60     	; 0x152e <DIO_VidSetPortValue+0x74>
    14f2:	2b 81       	ldd	r18, Y+3	; 0x03
    14f4:	3c 81       	ldd	r19, Y+4	; 0x04
    14f6:	22 30       	cpi	r18, 0x02	; 2
    14f8:	31 05       	cpc	r19, r1
    14fa:	81 f0       	breq	.+32     	; 0x151c <DIO_VidSetPortValue+0x62>
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1500:	83 30       	cpi	r24, 0x03	; 3
    1502:	91 05       	cpc	r25, r1
    1504:	81 f0       	breq	.+32     	; 0x1526 <DIO_VidSetPortValue+0x6c>
    1506:	13 c0       	rjmp	.+38     	; 0x152e <DIO_VidSetPortValue+0x74>

			case 0:PORTA=loc_u8value;break;
    1508:	eb e3       	ldi	r30, 0x3B	; 59
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	80 83       	st	Z, r24
    1510:	0e c0       	rjmp	.+28     	; 0x152e <DIO_VidSetPortValue+0x74>
			case 1:PORTB=loc_u8value;break;
    1512:	e8 e3       	ldi	r30, 0x38	; 56
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	80 83       	st	Z, r24
    151a:	09 c0       	rjmp	.+18     	; 0x152e <DIO_VidSetPortValue+0x74>
			case 2:PORTC=loc_u8value;break;
    151c:	e5 e3       	ldi	r30, 0x35	; 53
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	80 83       	st	Z, r24
    1524:	04 c0       	rjmp	.+8      	; 0x152e <DIO_VidSetPortValue+0x74>
			case 3:PORTD=loc_u8value;break;
    1526:	e2 e3       	ldi	r30, 0x32	; 50
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	80 83       	st	Z, r24

			}
	
}
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	cf 91       	pop	r28
    1538:	df 91       	pop	r29
    153a:	08 95       	ret

0000153c <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 loc_u8port,u8 loc_u8pin){
    153c:	df 93       	push	r29
    153e:	cf 93       	push	r28
    1540:	00 d0       	rcall	.+0      	; 0x1542 <DIO_u8GetPinValue+0x6>
    1542:	00 d0       	rcall	.+0      	; 0x1544 <DIO_u8GetPinValue+0x8>
    1544:	0f 92       	push	r0
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	8a 83       	std	Y+2, r24	; 0x02
    154c:	6b 83       	std	Y+3, r22	; 0x03
	u8 VALUE;
	switch(loc_u8port){
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	3d 83       	std	Y+5, r19	; 0x05
    1556:	2c 83       	std	Y+4, r18	; 0x04
    1558:	4c 81       	ldd	r20, Y+4	; 0x04
    155a:	5d 81       	ldd	r21, Y+5	; 0x05
    155c:	41 30       	cpi	r20, 0x01	; 1
    155e:	51 05       	cpc	r21, r1
    1560:	41 f1       	breq	.+80     	; 0x15b2 <DIO_u8GetPinValue+0x76>
    1562:	8c 81       	ldd	r24, Y+4	; 0x04
    1564:	9d 81       	ldd	r25, Y+5	; 0x05
    1566:	82 30       	cpi	r24, 0x02	; 2
    1568:	91 05       	cpc	r25, r1
    156a:	34 f4       	brge	.+12     	; 0x1578 <DIO_u8GetPinValue+0x3c>
    156c:	2c 81       	ldd	r18, Y+4	; 0x04
    156e:	3d 81       	ldd	r19, Y+5	; 0x05
    1570:	21 15       	cp	r18, r1
    1572:	31 05       	cpc	r19, r1
    1574:	61 f0       	breq	.+24     	; 0x158e <DIO_u8GetPinValue+0x52>
    1576:	52 c0       	rjmp	.+164    	; 0x161c <DIO_u8GetPinValue+0xe0>
    1578:	4c 81       	ldd	r20, Y+4	; 0x04
    157a:	5d 81       	ldd	r21, Y+5	; 0x05
    157c:	42 30       	cpi	r20, 0x02	; 2
    157e:	51 05       	cpc	r21, r1
    1580:	51 f1       	breq	.+84     	; 0x15d6 <DIO_u8GetPinValue+0x9a>
    1582:	8c 81       	ldd	r24, Y+4	; 0x04
    1584:	9d 81       	ldd	r25, Y+5	; 0x05
    1586:	83 30       	cpi	r24, 0x03	; 3
    1588:	91 05       	cpc	r25, r1
    158a:	b9 f1       	breq	.+110    	; 0x15fa <DIO_u8GetPinValue+0xbe>
    158c:	47 c0       	rjmp	.+142    	; 0x161c <DIO_u8GetPinValue+0xe0>
		case 0:VALUE=GET_BIT(PINA,loc_u8pin); break;
    158e:	e9 e3       	ldi	r30, 0x39	; 57
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	88 2f       	mov	r24, r24
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	a9 01       	movw	r20, r18
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <DIO_u8GetPinValue+0x6a>
    15a2:	55 95       	asr	r21
    15a4:	47 95       	ror	r20
    15a6:	8a 95       	dec	r24
    15a8:	e2 f7       	brpl	.-8      	; 0x15a2 <DIO_u8GetPinValue+0x66>
    15aa:	ca 01       	movw	r24, r20
    15ac:	81 70       	andi	r24, 0x01	; 1
    15ae:	89 83       	std	Y+1, r24	; 0x01
    15b0:	35 c0       	rjmp	.+106    	; 0x161c <DIO_u8GetPinValue+0xe0>
		case 1:VALUE=GET_BIT(PINB,loc_u8pin); break;
    15b2:	e6 e3       	ldi	r30, 0x36	; 54
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	88 2f       	mov	r24, r24
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	a9 01       	movw	r20, r18
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <DIO_u8GetPinValue+0x8e>
    15c6:	55 95       	asr	r21
    15c8:	47 95       	ror	r20
    15ca:	8a 95       	dec	r24
    15cc:	e2 f7       	brpl	.-8      	; 0x15c6 <DIO_u8GetPinValue+0x8a>
    15ce:	ca 01       	movw	r24, r20
    15d0:	81 70       	andi	r24, 0x01	; 1
    15d2:	89 83       	std	Y+1, r24	; 0x01
    15d4:	23 c0       	rjmp	.+70     	; 0x161c <DIO_u8GetPinValue+0xe0>
		case 2:VALUE=GET_BIT(PINC,loc_u8pin); break;
    15d6:	e3 e3       	ldi	r30, 0x33	; 51
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	88 2f       	mov	r24, r24
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	a9 01       	movw	r20, r18
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <DIO_u8GetPinValue+0xb2>
    15ea:	55 95       	asr	r21
    15ec:	47 95       	ror	r20
    15ee:	8a 95       	dec	r24
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <DIO_u8GetPinValue+0xae>
    15f2:	ca 01       	movw	r24, r20
    15f4:	81 70       	andi	r24, 0x01	; 1
    15f6:	89 83       	std	Y+1, r24	; 0x01
    15f8:	11 c0       	rjmp	.+34     	; 0x161c <DIO_u8GetPinValue+0xe0>
		case 3:VALUE=GET_BIT(PIND,loc_u8pin); break;
    15fa:	e0 e3       	ldi	r30, 0x30	; 48
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	88 2f       	mov	r24, r24
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	a9 01       	movw	r20, r18
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <DIO_u8GetPinValue+0xd6>
    160e:	55 95       	asr	r21
    1610:	47 95       	ror	r20
    1612:	8a 95       	dec	r24
    1614:	e2 f7       	brpl	.-8      	; 0x160e <DIO_u8GetPinValue+0xd2>
    1616:	ca 01       	movw	r24, r20
    1618:	81 70       	andi	r24, 0x01	; 1
    161a:	89 83       	std	Y+1, r24	; 0x01
	 }
	 return VALUE;
    161c:	89 81       	ldd	r24, Y+1	; 0x01
}
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	08 95       	ret

0000162e <DIO_VidTogBit>:

void DIO_VidTogBit(u8 loc_u8port,u8 LOC_u8BitNum){
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	00 d0       	rcall	.+0      	; 0x1634 <DIO_VidTogBit+0x6>
    1634:	00 d0       	rcall	.+0      	; 0x1636 <DIO_VidTogBit+0x8>
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	89 83       	std	Y+1, r24	; 0x01
    163c:	6a 83       	std	Y+2, r22	; 0x02
	switch(loc_u8port){
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	3c 83       	std	Y+4, r19	; 0x04
    1646:	2b 83       	std	Y+3, r18	; 0x03
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	9c 81       	ldd	r25, Y+4	; 0x04
    164c:	81 30       	cpi	r24, 0x01	; 1
    164e:	91 05       	cpc	r25, r1
    1650:	49 f1       	breq	.+82     	; 0x16a4 <DIO_VidTogBit+0x76>
    1652:	2b 81       	ldd	r18, Y+3	; 0x03
    1654:	3c 81       	ldd	r19, Y+4	; 0x04
    1656:	22 30       	cpi	r18, 0x02	; 2
    1658:	31 05       	cpc	r19, r1
    165a:	2c f4       	brge	.+10     	; 0x1666 <DIO_VidTogBit+0x38>
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	9c 81       	ldd	r25, Y+4	; 0x04
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	61 f0       	breq	.+24     	; 0x167c <DIO_VidTogBit+0x4e>
    1664:	5a c0       	rjmp	.+180    	; 0x171a <DIO_VidTogBit+0xec>
    1666:	2b 81       	ldd	r18, Y+3	; 0x03
    1668:	3c 81       	ldd	r19, Y+4	; 0x04
    166a:	22 30       	cpi	r18, 0x02	; 2
    166c:	31 05       	cpc	r19, r1
    166e:	71 f1       	breq	.+92     	; 0x16cc <DIO_VidTogBit+0x9e>
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	9c 81       	ldd	r25, Y+4	; 0x04
    1674:	83 30       	cpi	r24, 0x03	; 3
    1676:	91 05       	cpc	r25, r1
    1678:	e9 f1       	breq	.+122    	; 0x16f4 <DIO_VidTogBit+0xc6>
    167a:	4f c0       	rjmp	.+158    	; 0x171a <DIO_VidTogBit+0xec>
		case 0: TOG_BIT(PORTA,LOC_u8BitNum); break;
    167c:	ab e3       	ldi	r26, 0x3B	; 59
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	eb e3       	ldi	r30, 0x3B	; 59
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	48 2f       	mov	r20, r24
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	02 2e       	mov	r0, r18
    1694:	02 c0       	rjmp	.+4      	; 0x169a <DIO_VidTogBit+0x6c>
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	0a 94       	dec	r0
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <DIO_VidTogBit+0x68>
    169e:	84 27       	eor	r24, r20
    16a0:	8c 93       	st	X, r24
    16a2:	3b c0       	rjmp	.+118    	; 0x171a <DIO_VidTogBit+0xec>
		case 1: TOG_BIT(PORTB,LOC_u8BitNum); break;
    16a4:	a8 e3       	ldi	r26, 0x38	; 56
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e8 e3       	ldi	r30, 0x38	; 56
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	48 2f       	mov	r20, r24
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	02 2e       	mov	r0, r18
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <DIO_VidTogBit+0x94>
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	0a 94       	dec	r0
    16c4:	e2 f7       	brpl	.-8      	; 0x16be <DIO_VidTogBit+0x90>
    16c6:	84 27       	eor	r24, r20
    16c8:	8c 93       	st	X, r24
    16ca:	27 c0       	rjmp	.+78     	; 0x171a <DIO_VidTogBit+0xec>
		case 2: TOG_BIT(PORTC,LOC_u8BitNum); break;
    16cc:	a5 e3       	ldi	r26, 0x35	; 53
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	e5 e3       	ldi	r30, 0x35	; 53
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	48 2f       	mov	r20, r24
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	02 2e       	mov	r0, r18
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <DIO_VidTogBit+0xbc>
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	0a 94       	dec	r0
    16ec:	e2 f7       	brpl	.-8      	; 0x16e6 <DIO_VidTogBit+0xb8>
    16ee:	84 27       	eor	r24, r20
    16f0:	8c 93       	st	X, r24
    16f2:	13 c0       	rjmp	.+38     	; 0x171a <DIO_VidTogBit+0xec>
		case 3: TOG_BIT(PORTD,LOC_u8BitNum); break;
    16f4:	a2 e3       	ldi	r26, 0x32	; 50
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e2 e3       	ldi	r30, 0x32	; 50
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	48 2f       	mov	r20, r24
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	28 2f       	mov	r18, r24
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	02 2e       	mov	r0, r18
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <DIO_VidTogBit+0xe4>
    170e:	88 0f       	add	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	0a 94       	dec	r0
    1714:	e2 f7       	brpl	.-8      	; 0x170e <DIO_VidTogBit+0xe0>
    1716:	84 27       	eor	r24, r20
    1718:	8c 93       	st	X, r24
	}	
}
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	08 95       	ret

00001728 <GIE_VidEnable>:
#include "GIE_interface.h"




void GIE_VidEnable(void){
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
		
	  SET_BIT(SREG,PIN7);
    1730:	af e5       	ldi	r26, 0x5F	; 95
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	ef e5       	ldi	r30, 0x5F	; 95
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	80 68       	ori	r24, 0x80	; 128
    173c:	8c 93       	st	X, r24
	}
    173e:	cf 91       	pop	r28
    1740:	df 91       	pop	r29
    1742:	08 95       	ret

00001744 <GIE_VidDisable>:
void GIE_VidDisable(void){
    1744:	df 93       	push	r29
    1746:	cf 93       	push	r28
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
		CLR_BIT(SREG,PIN7);
    174c:	af e5       	ldi	r26, 0x5F	; 95
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	ef e5       	ldi	r30, 0x5F	; 95
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	8f 77       	andi	r24, 0x7F	; 127
    1758:	8c 93       	st	X, r24
	}
    175a:	cf 91       	pop	r28
    175c:	df 91       	pop	r29
    175e:	08 95       	ret

00001760 <LCD_VidEnable>:
	#include "BIT_MATH.h"
	#include "DIO_interface.h"
	#include "LCD_interface.h"
	#include "avr/delay.h"

	void LCD_VidEnable(void){
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
    1768:	6c 97       	sbiw	r28, 0x1c	; 28
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	f8 94       	cli
    176e:	de bf       	out	0x3e, r29	; 62
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	cd bf       	out	0x3d, r28	; 61
		DIO_VidSetPinValue(CTRL_PORT,ES_PIN,HIGH); // EN raising edge//
    1774:	83 e0       	ldi	r24, 0x03	; 3
    1776:	62 e0       	ldi	r22, 0x02	; 2
    1778:	41 e0       	ldi	r20, 0x01	; 1
    177a:	0e 94 1c 09 	call	0x1238	; 0x1238 <DIO_VidSetPinValue>
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	a0 e8       	ldi	r26, 0x80	; 128
    1784:	bf e3       	ldi	r27, 0x3F	; 63
    1786:	89 8f       	std	Y+25, r24	; 0x19
    1788:	9a 8f       	std	Y+26, r25	; 0x1a
    178a:	ab 8f       	std	Y+27, r26	; 0x1b
    178c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    178e:	69 8d       	ldd	r22, Y+25	; 0x19
    1790:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1792:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1794:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	4a ef       	ldi	r20, 0xFA	; 250
    179c:	54 e4       	ldi	r21, 0x44	; 68
    179e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	8d 8b       	std	Y+21, r24	; 0x15
    17a8:	9e 8b       	std	Y+22, r25	; 0x16
    17aa:	af 8b       	std	Y+23, r26	; 0x17
    17ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17ae:	6d 89       	ldd	r22, Y+21	; 0x15
    17b0:	7e 89       	ldd	r23, Y+22	; 0x16
    17b2:	8f 89       	ldd	r24, Y+23	; 0x17
    17b4:	98 8d       	ldd	r25, Y+24	; 0x18
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	40 e8       	ldi	r20, 0x80	; 128
    17bc:	5f e3       	ldi	r21, 0x3F	; 63
    17be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17c2:	88 23       	and	r24, r24
    17c4:	2c f4       	brge	.+10     	; 0x17d0 <LCD_VidEnable+0x70>
		__ticks = 1;
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	9c 8b       	std	Y+20, r25	; 0x14
    17cc:	8b 8b       	std	Y+19, r24	; 0x13
    17ce:	3f c0       	rjmp	.+126    	; 0x184e <LCD_VidEnable+0xee>
	else if (__tmp > 65535)
    17d0:	6d 89       	ldd	r22, Y+21	; 0x15
    17d2:	7e 89       	ldd	r23, Y+22	; 0x16
    17d4:	8f 89       	ldd	r24, Y+23	; 0x17
    17d6:	98 8d       	ldd	r25, Y+24	; 0x18
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	3f ef       	ldi	r19, 0xFF	; 255
    17dc:	4f e7       	ldi	r20, 0x7F	; 127
    17de:	57 e4       	ldi	r21, 0x47	; 71
    17e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17e4:	18 16       	cp	r1, r24
    17e6:	4c f5       	brge	.+82     	; 0x183a <LCD_VidEnable+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e8:	69 8d       	ldd	r22, Y+25	; 0x19
    17ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	40 e2       	ldi	r20, 0x20	; 32
    17f6:	51 e4       	ldi	r21, 0x41	; 65
    17f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	bc 01       	movw	r22, r24
    1802:	cd 01       	movw	r24, r26
    1804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	9c 8b       	std	Y+20, r25	; 0x14
    180e:	8b 8b       	std	Y+19, r24	; 0x13
    1810:	0f c0       	rjmp	.+30     	; 0x1830 <LCD_VidEnable+0xd0>
    1812:	88 ec       	ldi	r24, 0xC8	; 200
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	9a 8b       	std	Y+18, r25	; 0x12
    1818:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    181a:	89 89       	ldd	r24, Y+17	; 0x11
    181c:	9a 89       	ldd	r25, Y+18	; 0x12
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	f1 f7       	brne	.-4      	; 0x181e <LCD_VidEnable+0xbe>
    1822:	9a 8b       	std	Y+18, r25	; 0x12
    1824:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1826:	8b 89       	ldd	r24, Y+19	; 0x13
    1828:	9c 89       	ldd	r25, Y+20	; 0x14
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	9c 8b       	std	Y+20, r25	; 0x14
    182e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1830:	8b 89       	ldd	r24, Y+19	; 0x13
    1832:	9c 89       	ldd	r25, Y+20	; 0x14
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	69 f7       	brne	.-38     	; 0x1812 <LCD_VidEnable+0xb2>
    1838:	14 c0       	rjmp	.+40     	; 0x1862 <LCD_VidEnable+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    183a:	6d 89       	ldd	r22, Y+21	; 0x15
    183c:	7e 89       	ldd	r23, Y+22	; 0x16
    183e:	8f 89       	ldd	r24, Y+23	; 0x17
    1840:	98 8d       	ldd	r25, Y+24	; 0x18
    1842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1846:	dc 01       	movw	r26, r24
    1848:	cb 01       	movw	r24, r22
    184a:	9c 8b       	std	Y+20, r25	; 0x14
    184c:	8b 8b       	std	Y+19, r24	; 0x13
    184e:	8b 89       	ldd	r24, Y+19	; 0x13
    1850:	9c 89       	ldd	r25, Y+20	; 0x14
    1852:	98 8b       	std	Y+16, r25	; 0x10
    1854:	8f 87       	std	Y+15, r24	; 0x0f
    1856:	8f 85       	ldd	r24, Y+15	; 0x0f
    1858:	98 89       	ldd	r25, Y+16	; 0x10
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	f1 f7       	brne	.-4      	; 0x185a <LCD_VidEnable+0xfa>
    185e:	98 8b       	std	Y+16, r25	; 0x10
    1860:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		DIO_VidSetPinValue(CTRL_PORT,ES_PIN,LOW);// EN falling edge//
    1862:	83 e0       	ldi	r24, 0x03	; 3
    1864:	62 e0       	ldi	r22, 0x02	; 2
    1866:	40 e0       	ldi	r20, 0x00	; 0
    1868:	0e 94 1c 09 	call	0x1238	; 0x1238 <DIO_VidSetPinValue>
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	a0 e8       	ldi	r26, 0x80	; 128
    1872:	bf e3       	ldi	r27, 0x3F	; 63
    1874:	8b 87       	std	Y+11, r24	; 0x0b
    1876:	9c 87       	std	Y+12, r25	; 0x0c
    1878:	ad 87       	std	Y+13, r26	; 0x0d
    187a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    187c:	6b 85       	ldd	r22, Y+11	; 0x0b
    187e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1880:	8d 85       	ldd	r24, Y+13	; 0x0d
    1882:	9e 85       	ldd	r25, Y+14	; 0x0e
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	4a ef       	ldi	r20, 0xFA	; 250
    188a:	54 e4       	ldi	r21, 0x44	; 68
    188c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1890:	dc 01       	movw	r26, r24
    1892:	cb 01       	movw	r24, r22
    1894:	8f 83       	std	Y+7, r24	; 0x07
    1896:	98 87       	std	Y+8, r25	; 0x08
    1898:	a9 87       	std	Y+9, r26	; 0x09
    189a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    189c:	6f 81       	ldd	r22, Y+7	; 0x07
    189e:	78 85       	ldd	r23, Y+8	; 0x08
    18a0:	89 85       	ldd	r24, Y+9	; 0x09
    18a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	40 e8       	ldi	r20, 0x80	; 128
    18aa:	5f e3       	ldi	r21, 0x3F	; 63
    18ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18b0:	88 23       	and	r24, r24
    18b2:	2c f4       	brge	.+10     	; 0x18be <LCD_VidEnable+0x15e>
		__ticks = 1;
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	9e 83       	std	Y+6, r25	; 0x06
    18ba:	8d 83       	std	Y+5, r24	; 0x05
    18bc:	3f c0       	rjmp	.+126    	; 0x193c <LCD_VidEnable+0x1dc>
	else if (__tmp > 65535)
    18be:	6f 81       	ldd	r22, Y+7	; 0x07
    18c0:	78 85       	ldd	r23, Y+8	; 0x08
    18c2:	89 85       	ldd	r24, Y+9	; 0x09
    18c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	3f ef       	ldi	r19, 0xFF	; 255
    18ca:	4f e7       	ldi	r20, 0x7F	; 127
    18cc:	57 e4       	ldi	r21, 0x47	; 71
    18ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18d2:	18 16       	cp	r1, r24
    18d4:	4c f5       	brge	.+82     	; 0x1928 <LCD_VidEnable+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    18d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    18da:	8d 85       	ldd	r24, Y+13	; 0x0d
    18dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	40 e2       	ldi	r20, 0x20	; 32
    18e4:	51 e4       	ldi	r21, 0x41	; 65
    18e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	bc 01       	movw	r22, r24
    18f0:	cd 01       	movw	r24, r26
    18f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f6:	dc 01       	movw	r26, r24
    18f8:	cb 01       	movw	r24, r22
    18fa:	9e 83       	std	Y+6, r25	; 0x06
    18fc:	8d 83       	std	Y+5, r24	; 0x05
    18fe:	0f c0       	rjmp	.+30     	; 0x191e <LCD_VidEnable+0x1be>
    1900:	88 ec       	ldi	r24, 0xC8	; 200
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	9c 83       	std	Y+4, r25	; 0x04
    1906:	8b 83       	std	Y+3, r24	; 0x03
    1908:	8b 81       	ldd	r24, Y+3	; 0x03
    190a:	9c 81       	ldd	r25, Y+4	; 0x04
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	f1 f7       	brne	.-4      	; 0x190c <LCD_VidEnable+0x1ac>
    1910:	9c 83       	std	Y+4, r25	; 0x04
    1912:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1914:	8d 81       	ldd	r24, Y+5	; 0x05
    1916:	9e 81       	ldd	r25, Y+6	; 0x06
    1918:	01 97       	sbiw	r24, 0x01	; 1
    191a:	9e 83       	std	Y+6, r25	; 0x06
    191c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    191e:	8d 81       	ldd	r24, Y+5	; 0x05
    1920:	9e 81       	ldd	r25, Y+6	; 0x06
    1922:	00 97       	sbiw	r24, 0x00	; 0
    1924:	69 f7       	brne	.-38     	; 0x1900 <LCD_VidEnable+0x1a0>
    1926:	14 c0       	rjmp	.+40     	; 0x1950 <LCD_VidEnable+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1928:	6f 81       	ldd	r22, Y+7	; 0x07
    192a:	78 85       	ldd	r23, Y+8	; 0x08
    192c:	89 85       	ldd	r24, Y+9	; 0x09
    192e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1930:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	9e 83       	std	Y+6, r25	; 0x06
    193a:	8d 83       	std	Y+5, r24	; 0x05
    193c:	8d 81       	ldd	r24, Y+5	; 0x05
    193e:	9e 81       	ldd	r25, Y+6	; 0x06
    1940:	9a 83       	std	Y+2, r25	; 0x02
    1942:	89 83       	std	Y+1, r24	; 0x01
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	9a 81       	ldd	r25, Y+2	; 0x02
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	f1 f7       	brne	.-4      	; 0x1948 <LCD_VidEnable+0x1e8>
    194c:	9a 83       	std	Y+2, r25	; 0x02
    194e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		
	}
    1950:	6c 96       	adiw	r28, 0x1c	; 28
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
    195c:	cf 91       	pop	r28
    195e:	df 91       	pop	r29
    1960:	08 95       	ret

00001962 <LCD_VidInit>:


	/*u8 loc_u8DataPort=the port that connected from D0 to D7
	u8   loc_u8ControlPort=the port that connected to RS&RW&EN
	*/
	void LCD_VidInit(void){
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	c1 54       	subi	r28, 0x41	; 65
    196c:	d0 40       	sbci	r29, 0x00	; 0
    196e:	0f b6       	in	r0, 0x3f	; 63
    1970:	f8 94       	cli
    1972:	de bf       	out	0x3e, r29	; 62
    1974:	0f be       	out	0x3f, r0	; 63
    1976:	cd bf       	out	0x3d, r28	; 61
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	a8 e4       	ldi	r26, 0x48	; 72
    197e:	b2 e4       	ldi	r27, 0x42	; 66
    1980:	8d ab       	std	Y+53, r24	; 0x35
    1982:	9e ab       	std	Y+54, r25	; 0x36
    1984:	af ab       	std	Y+55, r26	; 0x37
    1986:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1988:	6d a9       	ldd	r22, Y+53	; 0x35
    198a:	7e a9       	ldd	r23, Y+54	; 0x36
    198c:	8f a9       	ldd	r24, Y+55	; 0x37
    198e:	98 ad       	ldd	r25, Y+56	; 0x38
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	4a ef       	ldi	r20, 0xFA	; 250
    1996:	54 e4       	ldi	r21, 0x44	; 68
    1998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	89 ab       	std	Y+49, r24	; 0x31
    19a2:	9a ab       	std	Y+50, r25	; 0x32
    19a4:	ab ab       	std	Y+51, r26	; 0x33
    19a6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19a8:	69 a9       	ldd	r22, Y+49	; 0x31
    19aa:	7a a9       	ldd	r23, Y+50	; 0x32
    19ac:	8b a9       	ldd	r24, Y+51	; 0x33
    19ae:	9c a9       	ldd	r25, Y+52	; 0x34
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	40 e8       	ldi	r20, 0x80	; 128
    19b6:	5f e3       	ldi	r21, 0x3F	; 63
    19b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19bc:	88 23       	and	r24, r24
    19be:	2c f4       	brge	.+10     	; 0x19ca <LCD_VidInit+0x68>
		__ticks = 1;
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	98 ab       	std	Y+48, r25	; 0x30
    19c6:	8f a7       	std	Y+47, r24	; 0x2f
    19c8:	3f c0       	rjmp	.+126    	; 0x1a48 <LCD_VidInit+0xe6>
	else if (__tmp > 65535)
    19ca:	69 a9       	ldd	r22, Y+49	; 0x31
    19cc:	7a a9       	ldd	r23, Y+50	; 0x32
    19ce:	8b a9       	ldd	r24, Y+51	; 0x33
    19d0:	9c a9       	ldd	r25, Y+52	; 0x34
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	3f ef       	ldi	r19, 0xFF	; 255
    19d6:	4f e7       	ldi	r20, 0x7F	; 127
    19d8:	57 e4       	ldi	r21, 0x47	; 71
    19da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19de:	18 16       	cp	r1, r24
    19e0:	4c f5       	brge	.+82     	; 0x1a34 <LCD_VidInit+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e2:	6d a9       	ldd	r22, Y+53	; 0x35
    19e4:	7e a9       	ldd	r23, Y+54	; 0x36
    19e6:	8f a9       	ldd	r24, Y+55	; 0x37
    19e8:	98 ad       	ldd	r25, Y+56	; 0x38
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	40 e2       	ldi	r20, 0x20	; 32
    19f0:	51 e4       	ldi	r21, 0x41	; 65
    19f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	bc 01       	movw	r22, r24
    19fc:	cd 01       	movw	r24, r26
    19fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	98 ab       	std	Y+48, r25	; 0x30
    1a08:	8f a7       	std	Y+47, r24	; 0x2f
    1a0a:	0f c0       	rjmp	.+30     	; 0x1a2a <LCD_VidInit+0xc8>
    1a0c:	88 ec       	ldi	r24, 0xC8	; 200
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	9e a7       	std	Y+46, r25	; 0x2e
    1a12:	8d a7       	std	Y+45, r24	; 0x2d
    1a14:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a16:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	f1 f7       	brne	.-4      	; 0x1a18 <LCD_VidInit+0xb6>
    1a1c:	9e a7       	std	Y+46, r25	; 0x2e
    1a1e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a20:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a22:	98 a9       	ldd	r25, Y+48	; 0x30
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	98 ab       	std	Y+48, r25	; 0x30
    1a28:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a2c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	69 f7       	brne	.-38     	; 0x1a0c <LCD_VidInit+0xaa>
    1a32:	14 c0       	rjmp	.+40     	; 0x1a5c <LCD_VidInit+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a34:	69 a9       	ldd	r22, Y+49	; 0x31
    1a36:	7a a9       	ldd	r23, Y+50	; 0x32
    1a38:	8b a9       	ldd	r24, Y+51	; 0x33
    1a3a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	98 ab       	std	Y+48, r25	; 0x30
    1a46:	8f a7       	std	Y+47, r24	; 0x2f
    1a48:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a4a:	98 a9       	ldd	r25, Y+48	; 0x30
    1a4c:	9c a7       	std	Y+44, r25	; 0x2c
    1a4e:	8b a7       	std	Y+43, r24	; 0x2b
    1a50:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a52:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	f1 f7       	brne	.-4      	; 0x1a54 <LCD_VidInit+0xf2>
    1a58:	9c a7       	std	Y+44, r25	; 0x2c
    1a5a:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
	u8 i=0;	
    1a5c:	19 ae       	std	Y+57, r1	; 0x39
	u8 array[]={RS_PIN,RW_PIN,ES_PIN};	
    1a5e:	ce 01       	movw	r24, r28
    1a60:	ca 96       	adiw	r24, 0x3a	; 58
    1a62:	9e af       	std	Y+62, r25	; 0x3e
    1a64:	8d af       	std	Y+61, r24	; 0x3d
    1a66:	e8 e6       	ldi	r30, 0x68	; 104
    1a68:	f1 e0       	ldi	r31, 0x01	; 1
    1a6a:	21 96       	adiw	r28, 0x01	; 1
    1a6c:	ff af       	std	Y+63, r31	; 0x3f
    1a6e:	ee af       	std	Y+62, r30	; 0x3e
    1a70:	21 97       	sbiw	r28, 0x01	; 1
    1a72:	f3 e0       	ldi	r31, 0x03	; 3
    1a74:	22 96       	adiw	r28, 0x02	; 2
    1a76:	ff af       	std	Y+63, r31	; 0x3f
    1a78:	22 97       	sbiw	r28, 0x02	; 2
    1a7a:	21 96       	adiw	r28, 0x01	; 1
    1a7c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a7e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a80:	21 97       	sbiw	r28, 0x01	; 1
    1a82:	00 80       	ld	r0, Z
    1a84:	21 96       	adiw	r28, 0x01	; 1
    1a86:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a88:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a8a:	21 97       	sbiw	r28, 0x01	; 1
    1a8c:	01 96       	adiw	r24, 0x01	; 1
    1a8e:	21 96       	adiw	r28, 0x01	; 1
    1a90:	9f af       	std	Y+63, r25	; 0x3f
    1a92:	8e af       	std	Y+62, r24	; 0x3e
    1a94:	21 97       	sbiw	r28, 0x01	; 1
    1a96:	ed ad       	ldd	r30, Y+61	; 0x3d
    1a98:	fe ad       	ldd	r31, Y+62	; 0x3e
    1a9a:	00 82       	st	Z, r0
    1a9c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a9e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1aa0:	01 96       	adiw	r24, 0x01	; 1
    1aa2:	9e af       	std	Y+62, r25	; 0x3e
    1aa4:	8d af       	std	Y+61, r24	; 0x3d
    1aa6:	22 96       	adiw	r28, 0x02	; 2
    1aa8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1aaa:	22 97       	sbiw	r28, 0x02	; 2
    1aac:	91 50       	subi	r25, 0x01	; 1
    1aae:	22 96       	adiw	r28, 0x02	; 2
    1ab0:	9f af       	std	Y+63, r25	; 0x3f
    1ab2:	22 97       	sbiw	r28, 0x02	; 2
    1ab4:	22 96       	adiw	r28, 0x02	; 2
    1ab6:	ef ad       	ldd	r30, Y+63	; 0x3f
    1ab8:	22 97       	sbiw	r28, 0x02	; 2
    1aba:	ee 23       	and	r30, r30
    1abc:	f1 f6       	brne	.-68     	; 0x1a7a <LCD_VidInit+0x118>
    1abe:	11 c0       	rjmp	.+34     	; 0x1ae2 <LCD_VidInit+0x180>
	while(i<3){
		DIO_VidSetPinDirection(CTRL_PORT,array[i],HIGH);
    1ac0:	89 ad       	ldd	r24, Y+57	; 0x39
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	ce 01       	movw	r24, r28
    1ac8:	ca 96       	adiw	r24, 0x3a	; 58
    1aca:	fc 01       	movw	r30, r24
    1acc:	e2 0f       	add	r30, r18
    1ace:	f3 1f       	adc	r31, r19
    1ad0:	90 81       	ld	r25, Z
    1ad2:	83 e0       	ldi	r24, 0x03	; 3
    1ad4:	69 2f       	mov	r22, r25
    1ad6:	41 e0       	ldi	r20, 0x01	; 1
    1ad8:	0e 94 1c 08 	call	0x1038	; 0x1038 <DIO_VidSetPinDirection>
	i++;	
    1adc:	89 ad       	ldd	r24, Y+57	; 0x39
    1ade:	8f 5f       	subi	r24, 0xFF	; 255
    1ae0:	89 af       	std	Y+57, r24	; 0x39
	*/
	void LCD_VidInit(void){
		_delay_ms(50);
	u8 i=0;	
	u8 array[]={RS_PIN,RW_PIN,ES_PIN};	
	while(i<3){
    1ae2:	89 ad       	ldd	r24, Y+57	; 0x39
    1ae4:	83 30       	cpi	r24, 0x03	; 3
    1ae6:	60 f3       	brcs	.-40     	; 0x1ac0 <LCD_VidInit+0x15e>
		DIO_VidSetPinDirection(CTRL_PORT,array[i],HIGH);
	i++;	
	}
	#if LCD_MODE==FULL	
		 DIO_VidSetPortDirection(DATA_PORT,255);
    1ae8:	82 e0       	ldi	r24, 0x02	; 2
    1aea:	6f ef       	ldi	r22, 0xFF	; 255
    1aec:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_VidSetPortDirection>
		 LCD_VidWriteCommand(FUNCTION_SET);    //function set  //
    1af0:	88 e3       	ldi	r24, 0x38	; 56
    1af2:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_VidWriteCommand>
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	a0 e8       	ldi	r26, 0x80	; 128
    1afc:	bf e3       	ldi	r27, 0x3F	; 63
    1afe:	8f a3       	std	Y+39, r24	; 0x27
    1b00:	98 a7       	std	Y+40, r25	; 0x28
    1b02:	a9 a7       	std	Y+41, r26	; 0x29
    1b04:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b06:	6f a1       	ldd	r22, Y+39	; 0x27
    1b08:	78 a5       	ldd	r23, Y+40	; 0x28
    1b0a:	89 a5       	ldd	r24, Y+41	; 0x29
    1b0c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	4a ef       	ldi	r20, 0xFA	; 250
    1b14:	54 e4       	ldi	r21, 0x44	; 68
    1b16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	8b a3       	std	Y+35, r24	; 0x23
    1b20:	9c a3       	std	Y+36, r25	; 0x24
    1b22:	ad a3       	std	Y+37, r26	; 0x25
    1b24:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b26:	6b a1       	ldd	r22, Y+35	; 0x23
    1b28:	7c a1       	ldd	r23, Y+36	; 0x24
    1b2a:	8d a1       	ldd	r24, Y+37	; 0x25
    1b2c:	9e a1       	ldd	r25, Y+38	; 0x26
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	40 e8       	ldi	r20, 0x80	; 128
    1b34:	5f e3       	ldi	r21, 0x3F	; 63
    1b36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b3a:	88 23       	and	r24, r24
    1b3c:	2c f4       	brge	.+10     	; 0x1b48 <LCD_VidInit+0x1e6>
		__ticks = 1;
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	9a a3       	std	Y+34, r25	; 0x22
    1b44:	89 a3       	std	Y+33, r24	; 0x21
    1b46:	3f c0       	rjmp	.+126    	; 0x1bc6 <LCD_VidInit+0x264>
	else if (__tmp > 65535)
    1b48:	6b a1       	ldd	r22, Y+35	; 0x23
    1b4a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b4c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b4e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	3f ef       	ldi	r19, 0xFF	; 255
    1b54:	4f e7       	ldi	r20, 0x7F	; 127
    1b56:	57 e4       	ldi	r21, 0x47	; 71
    1b58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b5c:	18 16       	cp	r1, r24
    1b5e:	4c f5       	brge	.+82     	; 0x1bb2 <LCD_VidInit+0x250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b60:	6f a1       	ldd	r22, Y+39	; 0x27
    1b62:	78 a5       	ldd	r23, Y+40	; 0x28
    1b64:	89 a5       	ldd	r24, Y+41	; 0x29
    1b66:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	40 e2       	ldi	r20, 0x20	; 32
    1b6e:	51 e4       	ldi	r21, 0x41	; 65
    1b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	bc 01       	movw	r22, r24
    1b7a:	cd 01       	movw	r24, r26
    1b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	9a a3       	std	Y+34, r25	; 0x22
    1b86:	89 a3       	std	Y+33, r24	; 0x21
    1b88:	0f c0       	rjmp	.+30     	; 0x1ba8 <LCD_VidInit+0x246>
    1b8a:	88 ec       	ldi	r24, 0xC8	; 200
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	98 a3       	std	Y+32, r25	; 0x20
    1b90:	8f 8f       	std	Y+31, r24	; 0x1f
    1b92:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b94:	98 a1       	ldd	r25, Y+32	; 0x20
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	f1 f7       	brne	.-4      	; 0x1b96 <LCD_VidInit+0x234>
    1b9a:	98 a3       	std	Y+32, r25	; 0x20
    1b9c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b9e:	89 a1       	ldd	r24, Y+33	; 0x21
    1ba0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	9a a3       	std	Y+34, r25	; 0x22
    1ba6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba8:	89 a1       	ldd	r24, Y+33	; 0x21
    1baa:	9a a1       	ldd	r25, Y+34	; 0x22
    1bac:	00 97       	sbiw	r24, 0x00	; 0
    1bae:	69 f7       	brne	.-38     	; 0x1b8a <LCD_VidInit+0x228>
    1bb0:	14 c0       	rjmp	.+40     	; 0x1bda <LCD_VidInit+0x278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb2:	6b a1       	ldd	r22, Y+35	; 0x23
    1bb4:	7c a1       	ldd	r23, Y+36	; 0x24
    1bb6:	8d a1       	ldd	r24, Y+37	; 0x25
    1bb8:	9e a1       	ldd	r25, Y+38	; 0x26
    1bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	9a a3       	std	Y+34, r25	; 0x22
    1bc4:	89 a3       	std	Y+33, r24	; 0x21
    1bc6:	89 a1       	ldd	r24, Y+33	; 0x21
    1bc8:	9a a1       	ldd	r25, Y+34	; 0x22
    1bca:	9e 8f       	std	Y+30, r25	; 0x1e
    1bcc:	8d 8f       	std	Y+29, r24	; 0x1d
    1bce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bd0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	f1 f7       	brne	.-4      	; 0x1bd2 <LCD_VidInit+0x270>
    1bd6:	9e 8f       	std	Y+30, r25	; 0x1e
    1bd8:	8d 8f       	std	Y+29, r24	; 0x1d
		 _delay_ms(1);
		 LCD_VidWriteCommand(DISPLAY_ON);    //display on    //
    1bda:	8c e0       	ldi	r24, 0x0C	; 12
    1bdc:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_VidWriteCommand>
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	a0 e8       	ldi	r26, 0x80	; 128
    1be6:	bf e3       	ldi	r27, 0x3F	; 63
    1be8:	89 8f       	std	Y+25, r24	; 0x19
    1bea:	9a 8f       	std	Y+26, r25	; 0x1a
    1bec:	ab 8f       	std	Y+27, r26	; 0x1b
    1bee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf0:	69 8d       	ldd	r22, Y+25	; 0x19
    1bf2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bf4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bf6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	4a ef       	ldi	r20, 0xFA	; 250
    1bfe:	54 e4       	ldi	r21, 0x44	; 68
    1c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	8d 8b       	std	Y+21, r24	; 0x15
    1c0a:	9e 8b       	std	Y+22, r25	; 0x16
    1c0c:	af 8b       	std	Y+23, r26	; 0x17
    1c0e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c10:	6d 89       	ldd	r22, Y+21	; 0x15
    1c12:	7e 89       	ldd	r23, Y+22	; 0x16
    1c14:	8f 89       	ldd	r24, Y+23	; 0x17
    1c16:	98 8d       	ldd	r25, Y+24	; 0x18
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 e8       	ldi	r20, 0x80	; 128
    1c1e:	5f e3       	ldi	r21, 0x3F	; 63
    1c20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c24:	88 23       	and	r24, r24
    1c26:	2c f4       	brge	.+10     	; 0x1c32 <LCD_VidInit+0x2d0>
		__ticks = 1;
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	9c 8b       	std	Y+20, r25	; 0x14
    1c2e:	8b 8b       	std	Y+19, r24	; 0x13
    1c30:	3f c0       	rjmp	.+126    	; 0x1cb0 <LCD_VidInit+0x34e>
	else if (__tmp > 65535)
    1c32:	6d 89       	ldd	r22, Y+21	; 0x15
    1c34:	7e 89       	ldd	r23, Y+22	; 0x16
    1c36:	8f 89       	ldd	r24, Y+23	; 0x17
    1c38:	98 8d       	ldd	r25, Y+24	; 0x18
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	3f ef       	ldi	r19, 0xFF	; 255
    1c3e:	4f e7       	ldi	r20, 0x7F	; 127
    1c40:	57 e4       	ldi	r21, 0x47	; 71
    1c42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c46:	18 16       	cp	r1, r24
    1c48:	4c f5       	brge	.+82     	; 0x1c9c <LCD_VidInit+0x33a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	40 e2       	ldi	r20, 0x20	; 32
    1c58:	51 e4       	ldi	r21, 0x41	; 65
    1c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	bc 01       	movw	r22, r24
    1c64:	cd 01       	movw	r24, r26
    1c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	9c 8b       	std	Y+20, r25	; 0x14
    1c70:	8b 8b       	std	Y+19, r24	; 0x13
    1c72:	0f c0       	rjmp	.+30     	; 0x1c92 <LCD_VidInit+0x330>
    1c74:	88 ec       	ldi	r24, 0xC8	; 200
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	9a 8b       	std	Y+18, r25	; 0x12
    1c7a:	89 8b       	std	Y+17, r24	; 0x11
    1c7c:	89 89       	ldd	r24, Y+17	; 0x11
    1c7e:	9a 89       	ldd	r25, Y+18	; 0x12
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <LCD_VidInit+0x31e>
    1c84:	9a 8b       	std	Y+18, r25	; 0x12
    1c86:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c88:	8b 89       	ldd	r24, Y+19	; 0x13
    1c8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	9c 8b       	std	Y+20, r25	; 0x14
    1c90:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c92:	8b 89       	ldd	r24, Y+19	; 0x13
    1c94:	9c 89       	ldd	r25, Y+20	; 0x14
    1c96:	00 97       	sbiw	r24, 0x00	; 0
    1c98:	69 f7       	brne	.-38     	; 0x1c74 <LCD_VidInit+0x312>
    1c9a:	14 c0       	rjmp	.+40     	; 0x1cc4 <LCD_VidInit+0x362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1ca0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ca2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	9c 8b       	std	Y+20, r25	; 0x14
    1cae:	8b 8b       	std	Y+19, r24	; 0x13
    1cb0:	8b 89       	ldd	r24, Y+19	; 0x13
    1cb2:	9c 89       	ldd	r25, Y+20	; 0x14
    1cb4:	98 8b       	std	Y+16, r25	; 0x10
    1cb6:	8f 87       	std	Y+15, r24	; 0x0f
    1cb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cba:	98 89       	ldd	r25, Y+16	; 0x10
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	f1 f7       	brne	.-4      	; 0x1cbc <LCD_VidInit+0x35a>
    1cc0:	98 8b       	std	Y+16, r25	; 0x10
    1cc2:	8f 87       	std	Y+15, r24	; 0x0f
		 _delay_ms(1);
		 LCD_VidWriteCommand(CLR );        //clear display //
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_VidWriteCommand>
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	a0 e0       	ldi	r26, 0x00	; 0
    1cd0:	b0 e4       	ldi	r27, 0x40	; 64
    1cd2:	8b 87       	std	Y+11, r24	; 0x0b
    1cd4:	9c 87       	std	Y+12, r25	; 0x0c
    1cd6:	ad 87       	std	Y+13, r26	; 0x0d
    1cd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cda:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cde:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	4a ef       	ldi	r20, 0xFA	; 250
    1ce8:	54 e4       	ldi	r21, 0x44	; 68
    1cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	8f 83       	std	Y+7, r24	; 0x07
    1cf4:	98 87       	std	Y+8, r25	; 0x08
    1cf6:	a9 87       	std	Y+9, r26	; 0x09
    1cf8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cfa:	6f 81       	ldd	r22, Y+7	; 0x07
    1cfc:	78 85       	ldd	r23, Y+8	; 0x08
    1cfe:	89 85       	ldd	r24, Y+9	; 0x09
    1d00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	40 e8       	ldi	r20, 0x80	; 128
    1d08:	5f e3       	ldi	r21, 0x3F	; 63
    1d0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d0e:	88 23       	and	r24, r24
    1d10:	2c f4       	brge	.+10     	; 0x1d1c <LCD_VidInit+0x3ba>
		__ticks = 1;
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	9e 83       	std	Y+6, r25	; 0x06
    1d18:	8d 83       	std	Y+5, r24	; 0x05
    1d1a:	3f c0       	rjmp	.+126    	; 0x1d9a <LCD_VidInit+0x438>
	else if (__tmp > 65535)
    1d1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1e:	78 85       	ldd	r23, Y+8	; 0x08
    1d20:	89 85       	ldd	r24, Y+9	; 0x09
    1d22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	3f ef       	ldi	r19, 0xFF	; 255
    1d28:	4f e7       	ldi	r20, 0x7F	; 127
    1d2a:	57 e4       	ldi	r21, 0x47	; 71
    1d2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d30:	18 16       	cp	r1, r24
    1d32:	4c f5       	brge	.+82     	; 0x1d86 <LCD_VidInit+0x424>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e2       	ldi	r20, 0x20	; 32
    1d42:	51 e4       	ldi	r21, 0x41	; 65
    1d44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	bc 01       	movw	r22, r24
    1d4e:	cd 01       	movw	r24, r26
    1d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	9e 83       	std	Y+6, r25	; 0x06
    1d5a:	8d 83       	std	Y+5, r24	; 0x05
    1d5c:	0f c0       	rjmp	.+30     	; 0x1d7c <LCD_VidInit+0x41a>
    1d5e:	88 ec       	ldi	r24, 0xC8	; 200
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	9c 83       	std	Y+4, r25	; 0x04
    1d64:	8b 83       	std	Y+3, r24	; 0x03
    1d66:	8b 81       	ldd	r24, Y+3	; 0x03
    1d68:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	f1 f7       	brne	.-4      	; 0x1d6a <LCD_VidInit+0x408>
    1d6e:	9c 83       	std	Y+4, r25	; 0x04
    1d70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d72:	8d 81       	ldd	r24, Y+5	; 0x05
    1d74:	9e 81       	ldd	r25, Y+6	; 0x06
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	9e 83       	std	Y+6, r25	; 0x06
    1d7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d80:	00 97       	sbiw	r24, 0x00	; 0
    1d82:	69 f7       	brne	.-38     	; 0x1d5e <LCD_VidInit+0x3fc>
    1d84:	14 c0       	rjmp	.+40     	; 0x1dae <LCD_VidInit+0x44c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d86:	6f 81       	ldd	r22, Y+7	; 0x07
    1d88:	78 85       	ldd	r23, Y+8	; 0x08
    1d8a:	89 85       	ldd	r24, Y+9	; 0x09
    1d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	9e 83       	std	Y+6, r25	; 0x06
    1d98:	8d 83       	std	Y+5, r24	; 0x05
    1d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9e:	9a 83       	std	Y+2, r25	; 0x02
    1da0:	89 83       	std	Y+1, r24	; 0x01
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	9a 81       	ldd	r25, Y+2	; 0x02
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	f1 f7       	brne	.-4      	; 0x1da6 <LCD_VidInit+0x444>
    1daa:	9a 83       	std	Y+2, r25	; 0x02
    1dac:	89 83       	std	Y+1, r24	; 0x01
		 
		 
		 
	#endif	 
		 
	}
    1dae:	cf 5b       	subi	r28, 0xBF	; 191
    1db0:	df 4f       	sbci	r29, 0xFF	; 255
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	f8 94       	cli
    1db6:	de bf       	out	0x3e, r29	; 62
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	cd bf       	out	0x3d, r28	; 61
    1dbc:	cf 91       	pop	r28
    1dbe:	df 91       	pop	r29
    1dc0:	08 95       	ret

00001dc2 <LCD_VidWriteCommand>:
	/*

	loc_u8DataPort=the port that connected from D0 to D7
	loc_u8ControlPort=the port that connected to RS&RW&EN
	*/
	void LCD_VidWriteCommand(u8 loc_u8command){
    1dc2:	df 93       	push	r29
    1dc4:	cf 93       	push	r28
    1dc6:	0f 92       	push	r0
    1dc8:	cd b7       	in	r28, 0x3d	; 61
    1dca:	de b7       	in	r29, 0x3e	; 62
    1dcc:	89 83       	std	Y+1, r24	; 0x01

	#if LCD_MODE==FULL	
	DIO_VidSetPinValue(CTRL_PORT,RS_PIN,LOW); //make the RS in command mode//
    1dce:	83 e0       	ldi	r24, 0x03	; 3
    1dd0:	60 e0       	ldi	r22, 0x00	; 0
    1dd2:	40 e0       	ldi	r20, 0x00	; 0
    1dd4:	0e 94 1c 09 	call	0x1238	; 0x1238 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(CTRL_PORT,RW_PIN,LOW);//make the RW in write mode//
    1dd8:	83 e0       	ldi	r24, 0x03	; 3
    1dda:	61 e0       	ldi	r22, 0x01	; 1
    1ddc:	40 e0       	ldi	r20, 0x00	; 0
    1dde:	0e 94 1c 09 	call	0x1238	; 0x1238 <DIO_VidSetPinValue>
	DIO_VidSetPortValue(DATA_PORT,loc_u8command);//take the data from D0 to D7//
    1de2:	82 e0       	ldi	r24, 0x02	; 2
    1de4:	69 81       	ldd	r22, Y+1	; 0x01
    1de6:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <DIO_VidSetPortValue>
	LCD_VidEnable();
    1dea:	0e 94 b0 0b 	call	0x1760	; 0x1760 <LCD_VidEnable>

	DIO_VidSetPortValue(DATA_PORT,loc_u8command<<4);//take the data from D4 to D7//
	LCD_VidEnable();
	#endif		
			
	}
    1dee:	0f 90       	pop	r0
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	08 95       	ret

00001df6 <LCD_VidWriteData>:
	void LCD_VidWriteData(u8 loc_u8data){
    1df6:	df 93       	push	r29
    1df8:	cf 93       	push	r28
    1dfa:	0f 92       	push	r0
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
    1e00:	89 83       	std	Y+1, r24	; 0x01
		
	#if LCD_MODE==FULL		
		DIO_VidSetPinValue(CTRL_PORT,RS_PIN,HIGH); //make the RS in data mode//
    1e02:	83 e0       	ldi	r24, 0x03	; 3
    1e04:	60 e0       	ldi	r22, 0x00	; 0
    1e06:	41 e0       	ldi	r20, 0x01	; 1
    1e08:	0e 94 1c 09 	call	0x1238	; 0x1238 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(CTRL_PORT,RW_PIN,LOW);//make the RW in write mode//
    1e0c:	83 e0       	ldi	r24, 0x03	; 3
    1e0e:	61 e0       	ldi	r22, 0x01	; 1
    1e10:	40 e0       	ldi	r20, 0x00	; 0
    1e12:	0e 94 1c 09 	call	0x1238	; 0x1238 <DIO_VidSetPinValue>
		DIO_VidSetPortValue(DATA_PORT,loc_u8data);//take the data from D0 to D7//
    1e16:	82 e0       	ldi	r24, 0x02	; 2
    1e18:	69 81       	ldd	r22, Y+1	; 0x01
    1e1a:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <DIO_VidSetPortValue>
		LCD_VidEnable();
    1e1e:	0e 94 b0 0b 	call	0x1760	; 0x1760 <LCD_VidEnable>
		LCD_VidEnable();	
		DIO_VidSetPortValue(DATA_PORT,loc_u8data<<4);//take the data from D4 to D7//
		LCD_VidEnable();		
	#endif	
		
	}
    1e22:	0f 90       	pop	r0
    1e24:	cf 91       	pop	r28
    1e26:	df 91       	pop	r29
    1e28:	08 95       	ret

00001e2a <LCD_VidWriteString>:
	void LCD_VidWriteString(u8* loc_u8string){
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	00 d0       	rcall	.+0      	; 0x1e30 <LCD_VidWriteString+0x6>
    1e30:	0f 92       	push	r0
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	9b 83       	std	Y+3, r25	; 0x03
    1e38:	8a 83       	std	Y+2, r24	; 0x02
		u8 i=0;
    1e3a:	19 82       	std	Y+1, r1	; 0x01
		for(i=0; loc_u8string[i]!=NULL;i++){
    1e3c:	19 82       	std	Y+1, r1	; 0x01
    1e3e:	0e c0       	rjmp	.+28     	; 0x1e5c <LCD_VidWriteString+0x32>
		LCD_VidWriteData(loc_u8string[i]);
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	28 2f       	mov	r18, r24
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	9b 81       	ldd	r25, Y+3	; 0x03
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	e2 0f       	add	r30, r18
    1e4e:	f3 1f       	adc	r31, r19
    1e50:	80 81       	ld	r24, Z
    1e52:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_VidWriteData>
	#endif	
		
	}
	void LCD_VidWriteString(u8* loc_u8string){
		u8 i=0;
		for(i=0; loc_u8string[i]!=NULL;i++){
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	8f 5f       	subi	r24, 0xFF	; 255
    1e5a:	89 83       	std	Y+1, r24	; 0x01
    1e5c:	89 81       	ldd	r24, Y+1	; 0x01
    1e5e:	28 2f       	mov	r18, r24
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	9b 81       	ldd	r25, Y+3	; 0x03
    1e66:	fc 01       	movw	r30, r24
    1e68:	e2 0f       	add	r30, r18
    1e6a:	f3 1f       	adc	r31, r19
    1e6c:	80 81       	ld	r24, Z
    1e6e:	88 23       	and	r24, r24
    1e70:	39 f7       	brne	.-50     	; 0x1e40 <LCD_VidWriteString+0x16>
		LCD_VidWriteData(loc_u8string[i]);
		}
		
	}
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	08 95       	ret

00001e7e <LCD_VidWriteNumber>:
	void LCD_VidWriteNumber(s32 loc_s32number){
    1e7e:	ef 92       	push	r14
    1e80:	ff 92       	push	r15
    1e82:	0f 93       	push	r16
    1e84:	1f 93       	push	r17
    1e86:	df 93       	push	r29
    1e88:	cf 93       	push	r28
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    1e8e:	61 97       	sbiw	r28, 0x11	; 17
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	f8 94       	cli
    1e94:	de bf       	out	0x3e, r29	; 62
    1e96:	0f be       	out	0x3f, r0	; 63
    1e98:	cd bf       	out	0x3d, r28	; 61
    1e9a:	6e 87       	std	Y+14, r22	; 0x0e
    1e9c:	7f 87       	std	Y+15, r23	; 0x0f
    1e9e:	88 8b       	std	Y+16, r24	; 0x10
    1ea0:	99 8b       	std	Y+17, r25	; 0x11
// NEGATIVE AND POSTIVE VALUES//

	 s32 x=loc_s32number;
    1ea2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ea4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ea6:	a8 89       	ldd	r26, Y+16	; 0x10
    1ea8:	b9 89       	ldd	r27, Y+17	; 0x11
    1eaa:	8a 87       	std	Y+10, r24	; 0x0a
    1eac:	9b 87       	std	Y+11, r25	; 0x0b
    1eae:	ac 87       	std	Y+12, r26	; 0x0c
    1eb0:	bd 87       	std	Y+13, r27	; 0x0d
	 s32 y=0;
    1eb2:	1e 82       	std	Y+6, r1	; 0x06
    1eb4:	1f 82       	std	Y+7, r1	; 0x07
    1eb6:	18 86       	std	Y+8, r1	; 0x08
    1eb8:	19 86       	std	Y+9, r1	; 0x09
	 s32 reversed=1;
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	a0 e0       	ldi	r26, 0x00	; 0
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	8a 83       	std	Y+2, r24	; 0x02
    1ec4:	9b 83       	std	Y+3, r25	; 0x03
    1ec6:	ac 83       	std	Y+4, r26	; 0x04
    1ec8:	bd 83       	std	Y+5, r27	; 0x05
	 u8 negtive_flag=0;
    1eca:	19 82       	std	Y+1, r1	; 0x01
		 if(loc_s32number<0){
    1ecc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ece:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ed0:	a8 89       	ldd	r26, Y+16	; 0x10
    1ed2:	b9 89       	ldd	r27, Y+17	; 0x11
    1ed4:	bb 23       	and	r27, r27
    1ed6:	94 f4       	brge	.+36     	; 0x1efc <LCD_VidWriteNumber+0x7e>
					 x=(loc_s32number*-1);
    1ed8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1eda:	9f 85       	ldd	r25, Y+15	; 0x0f
    1edc:	a8 89       	ldd	r26, Y+16	; 0x10
    1ede:	b9 89       	ldd	r27, Y+17	; 0x11
    1ee0:	b0 95       	com	r27
    1ee2:	a0 95       	com	r26
    1ee4:	90 95       	com	r25
    1ee6:	81 95       	neg	r24
    1ee8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eea:	af 4f       	sbci	r26, 0xFF	; 255
    1eec:	bf 4f       	sbci	r27, 0xFF	; 255
    1eee:	8a 87       	std	Y+10, r24	; 0x0a
    1ef0:	9b 87       	std	Y+11, r25	; 0x0b
    1ef2:	ac 87       	std	Y+12, r26	; 0x0c
    1ef4:	bd 87       	std	Y+13, r27	; 0x0d
					 negtive_flag=1;
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	89 83       	std	Y+1, r24	; 0x01
    1efa:	42 c0       	rjmp	.+132    	; 0x1f80 <LCD_VidWriteNumber+0x102>
			 }

		 else if(x==0){
    1efc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1efe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f00:	ac 85       	ldd	r26, Y+12	; 0x0c
    1f02:	bd 85       	ldd	r27, Y+13	; 0x0d
    1f04:	00 97       	sbiw	r24, 0x00	; 0
    1f06:	a1 05       	cpc	r26, r1
    1f08:	b1 05       	cpc	r27, r1
    1f0a:	d1 f5       	brne	.+116    	; 0x1f80 <LCD_VidWriteNumber+0x102>
					 LCD_VidWriteData(48);
    1f0c:	80 e3       	ldi	r24, 0x30	; 48
    1f0e:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_VidWriteData>
    1f12:	36 c0       	rjmp	.+108    	; 0x1f80 <LCD_VidWriteNumber+0x102>
				}
		 while(x>0){
					 reversed=(reversed*10)+(x%10);
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	9b 81       	ldd	r25, Y+3	; 0x03
    1f18:	ac 81       	ldd	r26, Y+4	; 0x04
    1f1a:	bd 81       	ldd	r27, Y+5	; 0x05
    1f1c:	2a e0       	ldi	r18, 0x0A	; 10
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	40 e0       	ldi	r20, 0x00	; 0
    1f22:	50 e0       	ldi	r21, 0x00	; 0
    1f24:	bc 01       	movw	r22, r24
    1f26:	cd 01       	movw	r24, r26
    1f28:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <__mulsi3>
    1f2c:	7b 01       	movw	r14, r22
    1f2e:	8c 01       	movw	r16, r24
    1f30:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f32:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f34:	ac 85       	ldd	r26, Y+12	; 0x0c
    1f36:	bd 85       	ldd	r27, Y+13	; 0x0d
    1f38:	2a e0       	ldi	r18, 0x0A	; 10
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	40 e0       	ldi	r20, 0x00	; 0
    1f3e:	50 e0       	ldi	r21, 0x00	; 0
    1f40:	bc 01       	movw	r22, r24
    1f42:	cd 01       	movw	r24, r26
    1f44:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__divmodsi4>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	8e 0d       	add	r24, r14
    1f4e:	9f 1d       	adc	r25, r15
    1f50:	a0 1f       	adc	r26, r16
    1f52:	b1 1f       	adc	r27, r17
    1f54:	8a 83       	std	Y+2, r24	; 0x02
    1f56:	9b 83       	std	Y+3, r25	; 0x03
    1f58:	ac 83       	std	Y+4, r26	; 0x04
    1f5a:	bd 83       	std	Y+5, r27	; 0x05
					   x=x/10;
    1f5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f5e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f60:	ac 85       	ldd	r26, Y+12	; 0x0c
    1f62:	bd 85       	ldd	r27, Y+13	; 0x0d
    1f64:	2a e0       	ldi	r18, 0x0A	; 10
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	40 e0       	ldi	r20, 0x00	; 0
    1f6a:	50 e0       	ldi	r21, 0x00	; 0
    1f6c:	bc 01       	movw	r22, r24
    1f6e:	cd 01       	movw	r24, r26
    1f70:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__divmodsi4>
    1f74:	da 01       	movw	r26, r20
    1f76:	c9 01       	movw	r24, r18
    1f78:	8a 87       	std	Y+10, r24	; 0x0a
    1f7a:	9b 87       	std	Y+11, r25	; 0x0b
    1f7c:	ac 87       	std	Y+12, r26	; 0x0c
    1f7e:	bd 87       	std	Y+13, r27	; 0x0d
			 }

		 else if(x==0){
					 LCD_VidWriteData(48);
				}
		 while(x>0){
    1f80:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f82:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f84:	ac 85       	ldd	r26, Y+12	; 0x0c
    1f86:	bd 85       	ldd	r27, Y+13	; 0x0d
    1f88:	18 16       	cp	r1, r24
    1f8a:	19 06       	cpc	r1, r25
    1f8c:	1a 06       	cpc	r1, r26
    1f8e:	1b 06       	cpc	r1, r27
    1f90:	0c f2       	brlt	.-126    	; 0x1f14 <LCD_VidWriteNumber+0x96>
					 reversed=(reversed*10)+(x%10);
					   x=x/10;
				   }
		 if(loc_s32number<0){
    1f92:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f94:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f96:	a8 89       	ldd	r26, Y+16	; 0x10
    1f98:	b9 89       	ldd	r27, Y+17	; 0x11
    1f9a:	bb 23       	and	r27, r27
    1f9c:	84 f4       	brge	.+32     	; 0x1fbe <LCD_VidWriteNumber+0x140>
					 x=(loc_s32number*-1);
    1f9e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fa0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fa2:	a8 89       	ldd	r26, Y+16	; 0x10
    1fa4:	b9 89       	ldd	r27, Y+17	; 0x11
    1fa6:	b0 95       	com	r27
    1fa8:	a0 95       	com	r26
    1faa:	90 95       	com	r25
    1fac:	81 95       	neg	r24
    1fae:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb0:	af 4f       	sbci	r26, 0xFF	; 255
    1fb2:	bf 4f       	sbci	r27, 0xFF	; 255
    1fb4:	8a 87       	std	Y+10, r24	; 0x0a
    1fb6:	9b 87       	std	Y+11, r25	; 0x0b
    1fb8:	ac 87       	std	Y+12, r26	; 0x0c
    1fba:	bd 87       	std	Y+13, r27	; 0x0d
    1fbc:	4a c0       	rjmp	.+148    	; 0x2052 <LCD_VidWriteNumber+0x1d4>
		 }
		 else{
					x=loc_s32number;
    1fbe:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fc0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fc2:	a8 89       	ldd	r26, Y+16	; 0x10
    1fc4:	b9 89       	ldd	r27, Y+17	; 0x11
    1fc6:	8a 87       	std	Y+10, r24	; 0x0a
    1fc8:	9b 87       	std	Y+11, r25	; 0x0b
    1fca:	ac 87       	std	Y+12, r26	; 0x0c
    1fcc:	bd 87       	std	Y+13, r27	; 0x0d
    1fce:	41 c0       	rjmp	.+130    	; 0x2052 <LCD_VidWriteNumber+0x1d4>
			 }
		 while(x>0){
					y=reversed%10;
    1fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd2:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd4:	ac 81       	ldd	r26, Y+4	; 0x04
    1fd6:	bd 81       	ldd	r27, Y+5	; 0x05
    1fd8:	2a e0       	ldi	r18, 0x0A	; 10
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e0       	ldi	r20, 0x00	; 0
    1fde:	50 e0       	ldi	r21, 0x00	; 0
    1fe0:	bc 01       	movw	r22, r24
    1fe2:	cd 01       	movw	r24, r26
    1fe4:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__divmodsi4>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	8e 83       	std	Y+6, r24	; 0x06
    1fee:	9f 83       	std	Y+7, r25	; 0x07
    1ff0:	a8 87       	std	Y+8, r26	; 0x08
    1ff2:	b9 87       	std	Y+9, r27	; 0x09
					if(negtive_flag==1){
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	81 30       	cpi	r24, 0x01	; 1
    1ff8:	21 f4       	brne	.+8      	; 0x2002 <LCD_VidWriteNumber+0x184>
					 LCD_VidWriteData('-');
    1ffa:	8d e2       	ldi	r24, 0x2D	; 45
    1ffc:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_VidWriteData>
					  negtive_flag=0;
    2000:	19 82       	std	Y+1, r1	; 0x01
									}
					LCD_VidWriteData(y+48);
    2002:	8e 81       	ldd	r24, Y+6	; 0x06
    2004:	80 5d       	subi	r24, 0xD0	; 208
    2006:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_VidWriteData>
					reversed=reversed/10;
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	9b 81       	ldd	r25, Y+3	; 0x03
    200e:	ac 81       	ldd	r26, Y+4	; 0x04
    2010:	bd 81       	ldd	r27, Y+5	; 0x05
    2012:	2a e0       	ldi	r18, 0x0A	; 10
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	40 e0       	ldi	r20, 0x00	; 0
    2018:	50 e0       	ldi	r21, 0x00	; 0
    201a:	bc 01       	movw	r22, r24
    201c:	cd 01       	movw	r24, r26
    201e:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__divmodsi4>
    2022:	da 01       	movw	r26, r20
    2024:	c9 01       	movw	r24, r18
    2026:	8a 83       	std	Y+2, r24	; 0x02
    2028:	9b 83       	std	Y+3, r25	; 0x03
    202a:	ac 83       	std	Y+4, r26	; 0x04
    202c:	bd 83       	std	Y+5, r27	; 0x05
					x=x/10;
    202e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2030:	9b 85       	ldd	r25, Y+11	; 0x0b
    2032:	ac 85       	ldd	r26, Y+12	; 0x0c
    2034:	bd 85       	ldd	r27, Y+13	; 0x0d
    2036:	2a e0       	ldi	r18, 0x0A	; 10
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	40 e0       	ldi	r20, 0x00	; 0
    203c:	50 e0       	ldi	r21, 0x00	; 0
    203e:	bc 01       	movw	r22, r24
    2040:	cd 01       	movw	r24, r26
    2042:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__divmodsi4>
    2046:	da 01       	movw	r26, r20
    2048:	c9 01       	movw	r24, r18
    204a:	8a 87       	std	Y+10, r24	; 0x0a
    204c:	9b 87       	std	Y+11, r25	; 0x0b
    204e:	ac 87       	std	Y+12, r26	; 0x0c
    2050:	bd 87       	std	Y+13, r27	; 0x0d
					 x=(loc_s32number*-1);
		 }
		 else{
					x=loc_s32number;
			 }
		 while(x>0){
    2052:	8a 85       	ldd	r24, Y+10	; 0x0a
    2054:	9b 85       	ldd	r25, Y+11	; 0x0b
    2056:	ac 85       	ldd	r26, Y+12	; 0x0c
    2058:	bd 85       	ldd	r27, Y+13	; 0x0d
    205a:	18 16       	cp	r1, r24
    205c:	19 06       	cpc	r1, r25
    205e:	1a 06       	cpc	r1, r26
    2060:	1b 06       	cpc	r1, r27
    2062:	0c f4       	brge	.+2      	; 0x2066 <LCD_VidWriteNumber+0x1e8>
    2064:	b5 cf       	rjmp	.-150    	; 0x1fd0 <LCD_VidWriteNumber+0x152>
									}
					LCD_VidWriteData(y+48);
					reversed=reversed/10;
					x=x/10;
		 }
	}
    2066:	61 96       	adiw	r28, 0x11	; 17
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	de bf       	out	0x3e, r29	; 62
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	cd bf       	out	0x3d, r28	; 61
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	1f 91       	pop	r17
    2078:	0f 91       	pop	r16
    207a:	ff 90       	pop	r15
    207c:	ef 90       	pop	r14
    207e:	08 95       	ret

00002080 <LCD_VidSetDdram>:


	void LCD_VidSetDdram(u8 loc_u8row,u8 loc_u8col){
    2080:	df 93       	push	r29
    2082:	cf 93       	push	r28
    2084:	00 d0       	rcall	.+0      	; 0x2086 <LCD_VidSetDdram+0x6>
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
    208a:	89 83       	std	Y+1, r24	; 0x01
    208c:	6a 83       	std	Y+2, r22	; 0x02
		if(1==loc_u8row){
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	81 30       	cpi	r24, 0x01	; 1
    2092:	29 f4       	brne	.+10     	; 0x209e <LCD_VidSetDdram+0x1e>
			LCD_VidWriteCommand((127+loc_u8col));
    2094:	8a 81       	ldd	r24, Y+2	; 0x02
    2096:	81 58       	subi	r24, 0x81	; 129
    2098:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_VidWriteCommand>
    209c:	07 c0       	rjmp	.+14     	; 0x20ac <LCD_VidSetDdram+0x2c>
		}
		else if(2==loc_u8row){
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	82 30       	cpi	r24, 0x02	; 2
    20a2:	21 f4       	brne	.+8      	; 0x20ac <LCD_VidSetDdram+0x2c>

			LCD_VidWriteCommand((127+64+loc_u8col));
    20a4:	8a 81       	ldd	r24, Y+2	; 0x02
    20a6:	81 54       	subi	r24, 0x41	; 65
    20a8:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_VidWriteCommand>
		}
	}
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	08 95       	ret

000020b6 <OSCILLISCOPE_VoidInitialization>:




void OSCILLISCOPE_VoidInitialization(void)
{
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
	
	DIO_VidSetPinDirection(PORTD,6,INPUT);//InputCaptureUnit PIN
    20be:	83 e0       	ldi	r24, 0x03	; 3
    20c0:	66 e0       	ldi	r22, 0x06	; 6
    20c2:	40 e0       	ldi	r20, 0x00	; 0
    20c4:	0e 94 1c 08 	call	0x1038	; 0x1038 <DIO_VidSetPinDirection>
	TIMERONE_VoidSetCAllBackInputCaptureUnit(OSCILLISCOPE_VoidInputCaptureUnitInterruptServiceRoutine);
    20c8:	8d e0       	ldi	r24, 0x0D	; 13
    20ca:	91 e1       	ldi	r25, 0x11	; 17
    20cc:	0e 94 e7 11 	call	0x23ce	; 0x23ce <TIMERONE_VoidSetCAllBackInputCaptureUnit>
	TIMERONE_VoidSetCallBackOverFlow(OSCILLISCOPE_VoidOverFlowInterruptServiceRoutine);
    20d0:	8e e7       	ldi	r24, 0x7E	; 126
    20d2:	91 e1       	ldi	r25, 0x11	; 17
    20d4:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <TIMERONE_VoidSetCallBackOverFlow>
	TIMERONE_VidInitializtaion();
    20d8:	0e 94 8e 11 	call	0x231c	; 0x231c <TIMERONE_VidInitializtaion>
	
}
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	08 95       	ret

000020e2 <OSCILLISCOPE_VoidGetTheReadingsOfTheSignalSyncrounase>:


void OSCILLISCOPE_VoidGetTheReadingsOfTheSignalSyncrounase(u32 *PointerToFrequancy,u32 *PointerToDutyCycle)
{
    20e2:	ef 92       	push	r14
    20e4:	ff 92       	push	r15
    20e6:	0f 93       	push	r16
    20e8:	1f 93       	push	r17
    20ea:	df 93       	push	r29
    20ec:	cf 93       	push	r28
    20ee:	00 d0       	rcall	.+0      	; 0x20f0 <OSCILLISCOPE_VoidGetTheReadingsOfTheSignalSyncrounase+0xe>
    20f0:	00 d0       	rcall	.+0      	; 0x20f2 <OSCILLISCOPE_VoidGetTheReadingsOfTheSignalSyncrounase+0x10>
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
    20f6:	9a 83       	std	Y+2, r25	; 0x02
    20f8:	89 83       	std	Y+1, r24	; 0x01
    20fa:	7c 83       	std	Y+4, r23	; 0x04
    20fc:	6b 83       	std	Y+3, r22	; 0x03
	
	ValidationFlag=0;
    20fe:	10 92 aa 01 	sts	0x01AA, r1
	while(		ValidationFlag 		!=			3			);
    2102:	80 91 aa 01 	lds	r24, 0x01AA
    2106:	83 30       	cpi	r24, 0x03	; 3
    2108:	e1 f7       	brne	.-8      	; 0x2102 <OSCILLISCOPE_VoidGetTheReadingsOfTheSignalSyncrounase+0x20>

	*PointerToFrequancy=(	(	256	 )/  (	0.000001	*	(  SNAP3-SNAP1  )		)			);
    210a:	20 91 a4 01 	lds	r18, 0x01A4
    210e:	30 91 a5 01 	lds	r19, 0x01A5
    2112:	40 91 a6 01 	lds	r20, 0x01A6
    2116:	50 91 a7 01 	lds	r21, 0x01A7
    211a:	80 91 9e 01 	lds	r24, 0x019E
    211e:	90 91 9f 01 	lds	r25, 0x019F
    2122:	cc 01       	movw	r24, r24
    2124:	a0 e0       	ldi	r26, 0x00	; 0
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	79 01       	movw	r14, r18
    212a:	8a 01       	movw	r16, r20
    212c:	e8 1a       	sub	r14, r24
    212e:	f9 0a       	sbc	r15, r25
    2130:	0a 0b       	sbc	r16, r26
    2132:	1b 0b       	sbc	r17, r27
    2134:	d8 01       	movw	r26, r16
    2136:	c7 01       	movw	r24, r14
    2138:	bc 01       	movw	r22, r24
    213a:	cd 01       	movw	r24, r26
    213c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	bc 01       	movw	r22, r24
    2146:	cd 01       	movw	r24, r26
    2148:	2d eb       	ldi	r18, 0xBD	; 189
    214a:	37 e3       	ldi	r19, 0x37	; 55
    214c:	46 e8       	ldi	r20, 0x86	; 134
    214e:	55 e3       	ldi	r21, 0x35	; 53
    2150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	9c 01       	movw	r18, r24
    215a:	ad 01       	movw	r20, r26
    215c:	60 e0       	ldi	r22, 0x00	; 0
    215e:	70 e0       	ldi	r23, 0x00	; 0
    2160:	80 e8       	ldi	r24, 0x80	; 128
    2162:	93 e4       	ldi	r25, 0x43	; 67
    2164:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	bc 01       	movw	r22, r24
    216e:	cd 01       	movw	r24, r26
    2170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	e9 81       	ldd	r30, Y+1	; 0x01
    217a:	fa 81       	ldd	r31, Y+2	; 0x02
    217c:	80 83       	st	Z, r24
    217e:	91 83       	std	Z+1, r25	; 0x01
    2180:	a2 83       	std	Z+2, r26	; 0x02
    2182:	b3 83       	std	Z+3, r27	; 0x03
	
	*PointerToDutyCycle=(		(	(SNAP2-SNAP1)*(100)	)	/	(  SNAP3-SNAP1  )	);
    2184:	20 91 a0 01 	lds	r18, 0x01A0
    2188:	30 91 a1 01 	lds	r19, 0x01A1
    218c:	40 91 a2 01 	lds	r20, 0x01A2
    2190:	50 91 a3 01 	lds	r21, 0x01A3
    2194:	80 91 9e 01 	lds	r24, 0x019E
    2198:	90 91 9f 01 	lds	r25, 0x019F
    219c:	cc 01       	movw	r24, r24
    219e:	a0 e0       	ldi	r26, 0x00	; 0
    21a0:	b0 e0       	ldi	r27, 0x00	; 0
    21a2:	79 01       	movw	r14, r18
    21a4:	8a 01       	movw	r16, r20
    21a6:	e8 1a       	sub	r14, r24
    21a8:	f9 0a       	sbc	r15, r25
    21aa:	0a 0b       	sbc	r16, r26
    21ac:	1b 0b       	sbc	r17, r27
    21ae:	d8 01       	movw	r26, r16
    21b0:	c7 01       	movw	r24, r14
    21b2:	24 e6       	ldi	r18, 0x64	; 100
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	40 e0       	ldi	r20, 0x00	; 0
    21b8:	50 e0       	ldi	r21, 0x00	; 0
    21ba:	bc 01       	movw	r22, r24
    21bc:	cd 01       	movw	r24, r26
    21be:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <__mulsi3>
    21c2:	7b 01       	movw	r14, r22
    21c4:	8c 01       	movw	r16, r24
    21c6:	20 91 a4 01 	lds	r18, 0x01A4
    21ca:	30 91 a5 01 	lds	r19, 0x01A5
    21ce:	40 91 a6 01 	lds	r20, 0x01A6
    21d2:	50 91 a7 01 	lds	r21, 0x01A7
    21d6:	80 91 9e 01 	lds	r24, 0x019E
    21da:	90 91 9f 01 	lds	r25, 0x019F
    21de:	cc 01       	movw	r24, r24
    21e0:	a0 e0       	ldi	r26, 0x00	; 0
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	28 1b       	sub	r18, r24
    21e6:	39 0b       	sbc	r19, r25
    21e8:	4a 0b       	sbc	r20, r26
    21ea:	5b 0b       	sbc	r21, r27
    21ec:	c8 01       	movw	r24, r16
    21ee:	b7 01       	movw	r22, r14
    21f0:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <__udivmodsi4>
    21f4:	da 01       	movw	r26, r20
    21f6:	c9 01       	movw	r24, r18
    21f8:	eb 81       	ldd	r30, Y+3	; 0x03
    21fa:	fc 81       	ldd	r31, Y+4	; 0x04
    21fc:	80 83       	st	Z, r24
    21fe:	91 83       	std	Z+1, r25	; 0x01
    2200:	a2 83       	std	Z+2, r26	; 0x02
    2202:	b3 83       	std	Z+3, r27	; 0x03

	//ValidationFlag=0;
}
    2204:	0f 90       	pop	r0
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	1f 91       	pop	r17
    2212:	0f 91       	pop	r16
    2214:	ff 90       	pop	r15
    2216:	ef 90       	pop	r14
    2218:	08 95       	ret

0000221a <OSCILLISCOPE_VoidInputCaptureUnitInterruptServiceRoutine>:


static void OSCILLISCOPE_VoidInputCaptureUnitInterruptServiceRoutine(u16 TimerValue)
{
    221a:	df 93       	push	r29
    221c:	cf 93       	push	r28
    221e:	00 d0       	rcall	.+0      	; 0x2220 <OSCILLISCOPE_VoidInputCaptureUnitInterruptServiceRoutine+0x6>
    2220:	cd b7       	in	r28, 0x3d	; 61
    2222:	de b7       	in	r29, 0x3e	; 62
    2224:	9a 83       	std	Y+2, r25	; 0x02
    2226:	89 83       	std	Y+1, r24	; 0x01
	if(		ValidationFlag		==		0				)
    2228:	80 91 aa 01 	lds	r24, 0x01AA
    222c:	88 23       	and	r24, r24
    222e:	89 f4       	brne	.+34     	; 0x2252 <OSCILLISCOPE_VoidInputCaptureUnitInterruptServiceRoutine+0x38>
	{
		SNAP1=TimerValue;
    2230:	89 81       	ldd	r24, Y+1	; 0x01
    2232:	9a 81       	ldd	r25, Y+2	; 0x02
    2234:	90 93 9f 01 	sts	0x019F, r25
    2238:	80 93 9e 01 	sts	0x019E, r24
		TIMERONEICU_VidSenceControl(FALLING);
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	0e 94 cb 11 	call	0x2396	; 0x2396 <TIMERONEICU_VidSenceControl>
		ValidationFlag=1;
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	80 93 aa 01 	sts	0x01AA, r24
		OVERFLOW=0;
    2248:	10 92 a9 01 	sts	0x01A9, r1
    224c:	10 92 a8 01 	sts	0x01A8, r1
    2250:	50 c0       	rjmp	.+160    	; 0x22f2 <OSCILLISCOPE_VoidInputCaptureUnitInterruptServiceRoutine+0xd8>

	}
	else if(		ValidationFlag		==		1				)
    2252:	80 91 aa 01 	lds	r24, 0x01AA
    2256:	81 30       	cpi	r24, 0x01	; 1
    2258:	31 f5       	brne	.+76     	; 0x22a6 <OSCILLISCOPE_VoidInputCaptureUnitInterruptServiceRoutine+0x8c>
	{
		SNAP2=TimerValue+(OVERFLOW*65536);
    225a:	89 81       	ldd	r24, Y+1	; 0x01
    225c:	9a 81       	ldd	r25, Y+2	; 0x02
    225e:	9c 01       	movw	r18, r24
    2260:	40 e0       	ldi	r20, 0x00	; 0
    2262:	50 e0       	ldi	r21, 0x00	; 0
    2264:	80 91 a8 01 	lds	r24, 0x01A8
    2268:	90 91 a9 01 	lds	r25, 0x01A9
    226c:	cc 01       	movw	r24, r24
    226e:	a0 e0       	ldi	r26, 0x00	; 0
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	dc 01       	movw	r26, r24
    2274:	99 27       	eor	r25, r25
    2276:	88 27       	eor	r24, r24
    2278:	82 0f       	add	r24, r18
    227a:	93 1f       	adc	r25, r19
    227c:	a4 1f       	adc	r26, r20
    227e:	b5 1f       	adc	r27, r21
    2280:	80 93 a0 01 	sts	0x01A0, r24
    2284:	90 93 a1 01 	sts	0x01A1, r25
    2288:	a0 93 a2 01 	sts	0x01A2, r26
    228c:	b0 93 a3 01 	sts	0x01A3, r27
		TIMERONEICU_VidSenceControl(RISING);
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	0e 94 cb 11 	call	0x2396	; 0x2396 <TIMERONEICU_VidSenceControl>
		ValidationFlag=2;
    2296:	82 e0       	ldi	r24, 0x02	; 2
    2298:	80 93 aa 01 	sts	0x01AA, r24
		OVERFLOW=0;
    229c:	10 92 a9 01 	sts	0x01A9, r1
    22a0:	10 92 a8 01 	sts	0x01A8, r1
    22a4:	26 c0       	rjmp	.+76     	; 0x22f2 <OSCILLISCOPE_VoidInputCaptureUnitInterruptServiceRoutine+0xd8>
	}
	else if(		ValidationFlag		==		2				)
    22a6:	80 91 aa 01 	lds	r24, 0x01AA
    22aa:	82 30       	cpi	r24, 0x02	; 2
    22ac:	11 f5       	brne	.+68     	; 0x22f2 <OSCILLISCOPE_VoidInputCaptureUnitInterruptServiceRoutine+0xd8>
	{
		SNAP3=TimerValue+(OVERFLOW*65536);
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	9a 81       	ldd	r25, Y+2	; 0x02
    22b2:	9c 01       	movw	r18, r24
    22b4:	40 e0       	ldi	r20, 0x00	; 0
    22b6:	50 e0       	ldi	r21, 0x00	; 0
    22b8:	80 91 a8 01 	lds	r24, 0x01A8
    22bc:	90 91 a9 01 	lds	r25, 0x01A9
    22c0:	cc 01       	movw	r24, r24
    22c2:	a0 e0       	ldi	r26, 0x00	; 0
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	dc 01       	movw	r26, r24
    22c8:	99 27       	eor	r25, r25
    22ca:	88 27       	eor	r24, r24
    22cc:	82 0f       	add	r24, r18
    22ce:	93 1f       	adc	r25, r19
    22d0:	a4 1f       	adc	r26, r20
    22d2:	b5 1f       	adc	r27, r21
    22d4:	80 93 a4 01 	sts	0x01A4, r24
    22d8:	90 93 a5 01 	sts	0x01A5, r25
    22dc:	a0 93 a6 01 	sts	0x01A6, r26
    22e0:	b0 93 a7 01 	sts	0x01A7, r27
		OVERFLOW=0;
    22e4:	10 92 a9 01 	sts	0x01A9, r1
    22e8:	10 92 a8 01 	sts	0x01A8, r1
		ValidationFlag=3;
    22ec:	83 e0       	ldi	r24, 0x03	; 3
    22ee:	80 93 aa 01 	sts	0x01AA, r24
	}

}
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	cf 91       	pop	r28
    22f8:	df 91       	pop	r29
    22fa:	08 95       	ret

000022fc <OSCILLISCOPE_VoidOverFlowInterruptServiceRoutine>:



static void OSCILLISCOPE_VoidOverFlowInterruptServiceRoutine(void)
{
    22fc:	df 93       	push	r29
    22fe:	cf 93       	push	r28
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
	OVERFLOW++;
    2304:	80 91 a8 01 	lds	r24, 0x01A8
    2308:	90 91 a9 01 	lds	r25, 0x01A9
    230c:	01 96       	adiw	r24, 0x01	; 1
    230e:	90 93 a9 01 	sts	0x01A9, r25
    2312:	80 93 a8 01 	sts	0x01A8, r24
}
    2316:	cf 91       	pop	r28
    2318:	df 91       	pop	r29
    231a:	08 95       	ret

0000231c <TIMERONE_VidInitializtaion>:
#include "TIMER1_private.h"



void TIMERONE_VidInitializtaion(void)
{
    231c:	df 93       	push	r29
    231e:	cf 93       	push	r28
    2320:	cd b7       	in	r28, 0x3d	; 61
    2322:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=TIMERONE_TCCRA_CONFIG;
    2324:	ef e4       	ldi	r30, 0x4F	; 79
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	10 82       	st	Z, r1
	TCCR1B=TIMERONE_TCCRB_CONFIG;
    232a:	ee e4       	ldi	r30, 0x4E	; 78
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	80 e4       	ldi	r24, 0x40	; 64
    2330:	80 83       	st	Z, r24
	TIMSK=TIMERONE_MODE;
    2332:	e9 e5       	ldi	r30, 0x59	; 89
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	84 e2       	ldi	r24, 0x24	; 36
    2338:	80 83       	st	Z, r24
		ICR1=(			(8000000)	/	(	(	FREQUANCY	)	*		(	PWM_PRESCALLER	)	)			);
		
		TCCR1A=		CHANNEL			|			TIMERONE_TCCRA_CONFIG		;
	#endif
	
	TCCR1B|=TIMERONE_PRESCALLER; // Configure Timer One Prescaller
    233a:	ae e4       	ldi	r26, 0x4E	; 78
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	ee e4       	ldi	r30, 0x4E	; 78
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	82 60       	ori	r24, 0x02	; 2
    2346:	8c 93       	st	X, r24
}
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	08 95       	ret

0000234e <TIMERONE_VoidSetThePreLoad>:


void TIMERONE_VoidSetThePreLoad(u16 NumberOfCounts)
{
    234e:	df 93       	push	r29
    2350:	cf 93       	push	r28
    2352:	00 d0       	rcall	.+0      	; 0x2354 <TIMERONE_VoidSetThePreLoad+0x6>
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	9a 83       	std	Y+2, r25	; 0x02
    235a:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=NumberOfCounts;
    235c:	ec e4       	ldi	r30, 0x4C	; 76
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	9a 81       	ldd	r25, Y+2	; 0x02
    2364:	91 83       	std	Z+1, r25	; 0x01
    2366:	80 83       	st	Z, r24
}
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	cf 91       	pop	r28
    236e:	df 91       	pop	r29
    2370:	08 95       	ret

00002372 <TIMERONE_VidSetDutyCycle>:


void TIMERONE_VidSetDutyCycle(u16 DUTYCYCLE)
{
    2372:	df 93       	push	r29
    2374:	cf 93       	push	r28
    2376:	00 d0       	rcall	.+0      	; 0x2378 <TIMERONE_VidSetDutyCycle+0x6>
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
    237c:	9a 83       	std	Y+2, r25	; 0x02
    237e:	89 83       	std	Y+1, r24	; 0x01
	#if CHANNEL== CHANNEL_A
		OCR1A=DUTYCYCLE;
    2380:	ea e4       	ldi	r30, 0x4A	; 74
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	89 81       	ldd	r24, Y+1	; 0x01
    2386:	9a 81       	ldd	r25, Y+2	; 0x02
    2388:	91 83       	std	Z+1, r25	; 0x01
    238a:	80 83       	st	Z, r24
	#else	
		OCR1B=DUTYCYCLE;
	#endif
}
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	08 95       	ret

00002396 <TIMERONEICU_VidSenceControl>:




void TIMERONEICU_VidSenceControl(u8 LOC_u8EdgeType)
{
    2396:	df 93       	push	r29
    2398:	cf 93       	push	r28
    239a:	0f 92       	push	r0
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
    23a0:	89 83       	std	Y+1, r24	; 0x01
	if(			LOC_u8EdgeType			)  SET_BIT(TCCR1B,PIN6);      //Rising
    23a2:	89 81       	ldd	r24, Y+1	; 0x01
    23a4:	88 23       	and	r24, r24
    23a6:	41 f0       	breq	.+16     	; 0x23b8 <TIMERONEICU_VidSenceControl+0x22>
    23a8:	ae e4       	ldi	r26, 0x4E	; 78
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	ee e4       	ldi	r30, 0x4E	; 78
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	80 64       	ori	r24, 0x40	; 64
    23b4:	8c 93       	st	X, r24
    23b6:	07 c0       	rjmp	.+14     	; 0x23c6 <TIMERONEICU_VidSenceControl+0x30>
	else								   CLR_BIT(TCCR1B,PIN6);	//Falling
    23b8:	ae e4       	ldi	r26, 0x4E	; 78
    23ba:	b0 e0       	ldi	r27, 0x00	; 0
    23bc:	ee e4       	ldi	r30, 0x4E	; 78
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	8f 7b       	andi	r24, 0xBF	; 191
    23c4:	8c 93       	st	X, r24
}
    23c6:	0f 90       	pop	r0
    23c8:	cf 91       	pop	r28
    23ca:	df 91       	pop	r29
    23cc:	08 95       	ret

000023ce <TIMERONE_VoidSetCAllBackInputCaptureUnit>:




void TIMERONE_VoidSetCAllBackInputCaptureUnit(void	(*LocalInputCaptureUnitPointerToFunction)(u16 ICR_Value))
{
    23ce:	df 93       	push	r29
    23d0:	cf 93       	push	r28
    23d2:	00 d0       	rcall	.+0      	; 0x23d4 <TIMERONE_VoidSetCAllBackInputCaptureUnit+0x6>
    23d4:	cd b7       	in	r28, 0x3d	; 61
    23d6:	de b7       	in	r29, 0x3e	; 62
    23d8:	9a 83       	std	Y+2, r25	; 0x02
    23da:	89 83       	std	Y+1, r24	; 0x01
		InputCaptureUnitPointerToFunction=LocalInputCaptureUnitPointerToFunction;
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
    23de:	9a 81       	ldd	r25, Y+2	; 0x02
    23e0:	90 93 ac 01 	sts	0x01AC, r25
    23e4:	80 93 ab 01 	sts	0x01AB, r24
}
    23e8:	0f 90       	pop	r0
    23ea:	0f 90       	pop	r0
    23ec:	cf 91       	pop	r28
    23ee:	df 91       	pop	r29
    23f0:	08 95       	ret

000023f2 <TIMERONE_VoidSetCallBackOverFlow>:




void TIMERONE_VoidSetCallBackOverFlow(void (*LocalTimerOneOverFlowPointerFunction)(void))
{
    23f2:	df 93       	push	r29
    23f4:	cf 93       	push	r28
    23f6:	00 d0       	rcall	.+0      	; 0x23f8 <TIMERONE_VoidSetCallBackOverFlow+0x6>
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
    23fc:	9a 83       	std	Y+2, r25	; 0x02
    23fe:	89 83       	std	Y+1, r24	; 0x01
	TimerOneOverFlowPointerFunction=LocalTimerOneOverFlowPointerFunction;
    2400:	89 81       	ldd	r24, Y+1	; 0x01
    2402:	9a 81       	ldd	r25, Y+2	; 0x02
    2404:	90 93 ae 01 	sts	0x01AE, r25
    2408:	80 93 ad 01 	sts	0x01AD, r24
}
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	08 95       	ret

00002416 <__vector_6>:



//timer1 event capture//
void __vector_6(void)
{
    2416:	1f 92       	push	r1
    2418:	0f 92       	push	r0
    241a:	0f b6       	in	r0, 0x3f	; 63
    241c:	0f 92       	push	r0
    241e:	11 24       	eor	r1, r1
    2420:	2f 93       	push	r18
    2422:	3f 93       	push	r19
    2424:	4f 93       	push	r20
    2426:	5f 93       	push	r21
    2428:	6f 93       	push	r22
    242a:	7f 93       	push	r23
    242c:	8f 93       	push	r24
    242e:	9f 93       	push	r25
    2430:	af 93       	push	r26
    2432:	bf 93       	push	r27
    2434:	ef 93       	push	r30
    2436:	ff 93       	push	r31
    2438:	df 93       	push	r29
    243a:	cf 93       	push	r28
    243c:	cd b7       	in	r28, 0x3d	; 61
    243e:	de b7       	in	r29, 0x3e	; 62
	InputCaptureUnitPointerToFunction(ICR1);
    2440:	e0 91 ab 01 	lds	r30, 0x01AB
    2444:	f0 91 ac 01 	lds	r31, 0x01AC
    2448:	a6 e4       	ldi	r26, 0x46	; 70
    244a:	b0 e0       	ldi	r27, 0x00	; 0
    244c:	8d 91       	ld	r24, X+
    244e:	9c 91       	ld	r25, X
    2450:	09 95       	icall
}
    2452:	cf 91       	pop	r28
    2454:	df 91       	pop	r29
    2456:	ff 91       	pop	r31
    2458:	ef 91       	pop	r30
    245a:	bf 91       	pop	r27
    245c:	af 91       	pop	r26
    245e:	9f 91       	pop	r25
    2460:	8f 91       	pop	r24
    2462:	7f 91       	pop	r23
    2464:	6f 91       	pop	r22
    2466:	5f 91       	pop	r21
    2468:	4f 91       	pop	r20
    246a:	3f 91       	pop	r19
    246c:	2f 91       	pop	r18
    246e:	0f 90       	pop	r0
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	0f 90       	pop	r0
    2474:	1f 90       	pop	r1
    2476:	18 95       	reti

00002478 <__vector_9>:

//timer1 overflow//	
void __vector_9(void)
{	
    2478:	1f 92       	push	r1
    247a:	0f 92       	push	r0
    247c:	0f b6       	in	r0, 0x3f	; 63
    247e:	0f 92       	push	r0
    2480:	11 24       	eor	r1, r1
    2482:	2f 93       	push	r18
    2484:	3f 93       	push	r19
    2486:	4f 93       	push	r20
    2488:	5f 93       	push	r21
    248a:	6f 93       	push	r22
    248c:	7f 93       	push	r23
    248e:	8f 93       	push	r24
    2490:	9f 93       	push	r25
    2492:	af 93       	push	r26
    2494:	bf 93       	push	r27
    2496:	ef 93       	push	r30
    2498:	ff 93       	push	r31
    249a:	df 93       	push	r29
    249c:	cf 93       	push	r28
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
	TimerOneOverFlowPointerFunction();	
    24a2:	e0 91 ad 01 	lds	r30, 0x01AD
    24a6:	f0 91 ae 01 	lds	r31, 0x01AE
    24aa:	09 95       	icall
}
    24ac:	cf 91       	pop	r28
    24ae:	df 91       	pop	r29
    24b0:	ff 91       	pop	r31
    24b2:	ef 91       	pop	r30
    24b4:	bf 91       	pop	r27
    24b6:	af 91       	pop	r26
    24b8:	9f 91       	pop	r25
    24ba:	8f 91       	pop	r24
    24bc:	7f 91       	pop	r23
    24be:	6f 91       	pop	r22
    24c0:	5f 91       	pop	r21
    24c2:	4f 91       	pop	r20
    24c4:	3f 91       	pop	r19
    24c6:	2f 91       	pop	r18
    24c8:	0f 90       	pop	r0
    24ca:	0f be       	out	0x3f, r0	; 63
    24cc:	0f 90       	pop	r0
    24ce:	1f 90       	pop	r1
    24d0:	18 95       	reti

000024d2 <TIMER_VidSetCallBack>:
	#include "BIT_MATH.h"
	#include "TIMER_register.h"
	#include "TIMER_interface.h"

	static void (*GLOBAL_VidPointer)(void);
	void TIMER_VidSetCallBack(void(*LOCAL_VidPointer)(void)){
    24d2:	df 93       	push	r29
    24d4:	cf 93       	push	r28
    24d6:	00 d0       	rcall	.+0      	; 0x24d8 <TIMER_VidSetCallBack+0x6>
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
    24dc:	9a 83       	std	Y+2, r25	; 0x02
    24de:	89 83       	std	Y+1, r24	; 0x01
		
		if(LOCAL_VidPointer!=NULL){
    24e0:	89 81       	ldd	r24, Y+1	; 0x01
    24e2:	9a 81       	ldd	r25, Y+2	; 0x02
    24e4:	00 97       	sbiw	r24, 0x00	; 0
    24e6:	31 f0       	breq	.+12     	; 0x24f4 <TIMER_VidSetCallBack+0x22>
			GLOBAL_VidPointer=LOCAL_VidPointer;
    24e8:	89 81       	ldd	r24, Y+1	; 0x01
    24ea:	9a 81       	ldd	r25, Y+2	; 0x02
    24ec:	90 93 b0 01 	sts	0x01B0, r25
    24f0:	80 93 af 01 	sts	0x01AF, r24
		}
	}
    24f4:	0f 90       	pop	r0
    24f6:	0f 90       	pop	r0
    24f8:	cf 91       	pop	r28
    24fa:	df 91       	pop	r29
    24fc:	08 95       	ret

000024fe <TIMER_VidInit>:


	void TIMER_VidInit(void){
    24fe:	df 93       	push	r29
    2500:	cf 93       	push	r28
    2502:	cd b7       	in	r28, 0x3d	; 61
    2504:	de b7       	in	r29, 0x3e	; 62
	#if TIMER0_PRE_SCALLER==TIMER0_PRE_8
		CLR_BIT(TCCR0,PIN2);
		SET_BIT(TCCR0,PIN1);
		CLR_BIT(TCCR0,PIN0);
	#elif TIMER0_PRE_SCALLER==TIMER0_PRE_64
		CLR_BIT(TCCR0,PIN2);
    2506:	a3 e5       	ldi	r26, 0x53	; 83
    2508:	b0 e0       	ldi	r27, 0x00	; 0
    250a:	e3 e5       	ldi	r30, 0x53	; 83
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	80 81       	ld	r24, Z
    2510:	8b 7f       	andi	r24, 0xFB	; 251
    2512:	8c 93       	st	X, r24
		SET_BIT(TCCR0,PIN1);
    2514:	a3 e5       	ldi	r26, 0x53	; 83
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	e3 e5       	ldi	r30, 0x53	; 83
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	82 60       	ori	r24, 0x02	; 2
    2520:	8c 93       	st	X, r24
		SET_BIT(TCCR0,PIN0);
    2522:	a3 e5       	ldi	r26, 0x53	; 83
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	e3 e5       	ldi	r30, 0x53	; 83
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	81 60       	ori	r24, 0x01	; 1
    252e:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,PIN5);
		CLR_BIT(TCCR0,PIN4);
		OCR0=125;
	#elif TIMER0_MODE==TIMER0_FAST_PWM
		//interrupt Disable //
		CLR_BIT(TIMSK,PIN0);
    2530:	a9 e5       	ldi	r26, 0x59	; 89
    2532:	b0 e0       	ldi	r27, 0x00	; 0
    2534:	e9 e5       	ldi	r30, 0x59	; 89
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	80 81       	ld	r24, Z
    253a:	8e 7f       	andi	r24, 0xFE	; 254
    253c:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,PIN1);
    253e:	a9 e5       	ldi	r26, 0x59	; 89
    2540:	b0 e0       	ldi	r27, 0x00	; 0
    2542:	e9 e5       	ldi	r30, 0x59	; 89
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	80 81       	ld	r24, Z
    2548:	8d 7f       	andi	r24, 0xFD	; 253
    254a:	8c 93       	st	X, r24
	   //SELECT fast_PWM mode//
		SET_BIT(TCCR0,PIN6);
    254c:	a3 e5       	ldi	r26, 0x53	; 83
    254e:	b0 e0       	ldi	r27, 0x00	; 0
    2550:	e3 e5       	ldi	r30, 0x53	; 83
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	80 81       	ld	r24, Z
    2556:	80 64       	ori	r24, 0x40	; 64
    2558:	8c 93       	st	X, r24
		SET_BIT(TCCR0,PIN3);
    255a:	a3 e5       	ldi	r26, 0x53	; 83
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	e3 e5       	ldi	r30, 0x53	; 83
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	80 81       	ld	r24, Z
    2564:	88 60       	ori	r24, 0x08	; 8
    2566:	8c 93       	st	X, r24
	  //SELECT Non inverted mode//
		CLR_BIT(TCCR0,PIN4);
    2568:	a3 e5       	ldi	r26, 0x53	; 83
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	e3 e5       	ldi	r30, 0x53	; 83
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	8f 7e       	andi	r24, 0xEF	; 239
    2574:	8c 93       	st	X, r24
		SET_BIT(TCCR0,PIN5);
    2576:	a3 e5       	ldi	r26, 0x53	; 83
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	e3 e5       	ldi	r30, 0x53	; 83
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	80 62       	ori	r24, 0x20	; 32
    2582:	8c 93       	st	X, r24

	#endif

	}
    2584:	cf 91       	pop	r28
    2586:	df 91       	pop	r29
    2588:	08 95       	ret

0000258a <TIMER0_VidSetDutyCycle>:


	void TIMER0_VidSetDutyCycle(u8 LOC_u8Volt){
    258a:	df 93       	push	r29
    258c:	cf 93       	push	r28
    258e:	0f 92       	push	r0
    2590:	cd b7       	in	r28, 0x3d	; 61
    2592:	de b7       	in	r29, 0x3e	; 62
    2594:	89 83       	std	Y+1, r24	; 0x01
	//pinB 3//


		OCR0=LOC_u8Volt;
    2596:	ec e5       	ldi	r30, 0x5C	; 92
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	89 81       	ldd	r24, Y+1	; 0x01
    259c:	80 83       	st	Z, r24
		//take the volt//

	}
    259e:	0f 90       	pop	r0
    25a0:	cf 91       	pop	r28
    25a2:	df 91       	pop	r29
    25a4:	08 95       	ret

000025a6 <__vector_11>:
	//OVER_FLOW//
	void __vector_11(void){
    25a6:	1f 92       	push	r1
    25a8:	0f 92       	push	r0
    25aa:	0f b6       	in	r0, 0x3f	; 63
    25ac:	0f 92       	push	r0
    25ae:	11 24       	eor	r1, r1
    25b0:	2f 93       	push	r18
    25b2:	3f 93       	push	r19
    25b4:	4f 93       	push	r20
    25b6:	5f 93       	push	r21
    25b8:	6f 93       	push	r22
    25ba:	7f 93       	push	r23
    25bc:	8f 93       	push	r24
    25be:	9f 93       	push	r25
    25c0:	af 93       	push	r26
    25c2:	bf 93       	push	r27
    25c4:	ef 93       	push	r30
    25c6:	ff 93       	push	r31
    25c8:	df 93       	push	r29
    25ca:	cf 93       	push	r28
    25cc:	cd b7       	in	r28, 0x3d	; 61
    25ce:	de b7       	in	r29, 0x3e	; 62
		if(GLOBAL_VidPointer!=NULL){
    25d0:	80 91 af 01 	lds	r24, 0x01AF
    25d4:	90 91 b0 01 	lds	r25, 0x01B0
    25d8:	00 97       	sbiw	r24, 0x00	; 0
    25da:	29 f0       	breq	.+10     	; 0x25e6 <__vector_11+0x40>
			
			  GLOBAL_VidPointer();
    25dc:	e0 91 af 01 	lds	r30, 0x01AF
    25e0:	f0 91 b0 01 	lds	r31, 0x01B0
    25e4:	09 95       	icall
		}	
	}
    25e6:	cf 91       	pop	r28
    25e8:	df 91       	pop	r29
    25ea:	ff 91       	pop	r31
    25ec:	ef 91       	pop	r30
    25ee:	bf 91       	pop	r27
    25f0:	af 91       	pop	r26
    25f2:	9f 91       	pop	r25
    25f4:	8f 91       	pop	r24
    25f6:	7f 91       	pop	r23
    25f8:	6f 91       	pop	r22
    25fa:	5f 91       	pop	r21
    25fc:	4f 91       	pop	r20
    25fe:	3f 91       	pop	r19
    2600:	2f 91       	pop	r18
    2602:	0f 90       	pop	r0
    2604:	0f be       	out	0x3f, r0	; 63
    2606:	0f 90       	pop	r0
    2608:	1f 90       	pop	r1
    260a:	18 95       	reti

0000260c <__vector_10>:
	//CTC//
	void __vector_10(void){
    260c:	1f 92       	push	r1
    260e:	0f 92       	push	r0
    2610:	0f b6       	in	r0, 0x3f	; 63
    2612:	0f 92       	push	r0
    2614:	11 24       	eor	r1, r1
    2616:	2f 93       	push	r18
    2618:	3f 93       	push	r19
    261a:	4f 93       	push	r20
    261c:	5f 93       	push	r21
    261e:	6f 93       	push	r22
    2620:	7f 93       	push	r23
    2622:	8f 93       	push	r24
    2624:	9f 93       	push	r25
    2626:	af 93       	push	r26
    2628:	bf 93       	push	r27
    262a:	ef 93       	push	r30
    262c:	ff 93       	push	r31
    262e:	df 93       	push	r29
    2630:	cf 93       	push	r28
    2632:	cd b7       	in	r28, 0x3d	; 61
    2634:	de b7       	in	r29, 0x3e	; 62
		if(GLOBAL_VidPointer!=NULL){
    2636:	80 91 af 01 	lds	r24, 0x01AF
    263a:	90 91 b0 01 	lds	r25, 0x01B0
    263e:	00 97       	sbiw	r24, 0x00	; 0
    2640:	29 f0       	breq	.+10     	; 0x264c <__vector_10+0x40>
			
			GLOBAL_VidPointer();
    2642:	e0 91 af 01 	lds	r30, 0x01AF
    2646:	f0 91 b0 01 	lds	r31, 0x01B0
    264a:	09 95       	icall
		}	
	}
    264c:	cf 91       	pop	r28
    264e:	df 91       	pop	r29
    2650:	ff 91       	pop	r31
    2652:	ef 91       	pop	r30
    2654:	bf 91       	pop	r27
    2656:	af 91       	pop	r26
    2658:	9f 91       	pop	r25
    265a:	8f 91       	pop	r24
    265c:	7f 91       	pop	r23
    265e:	6f 91       	pop	r22
    2660:	5f 91       	pop	r21
    2662:	4f 91       	pop	r20
    2664:	3f 91       	pop	r19
    2666:	2f 91       	pop	r18
    2668:	0f 90       	pop	r0
    266a:	0f be       	out	0x3f, r0	; 63
    266c:	0f 90       	pop	r0
    266e:	1f 90       	pop	r1
    2670:	18 95       	reti

00002672 <TIMER0_VidChangeFrequancy>:
	void TIMER0_VidChangeFrequancy(u8 LOC_u8PreScaller){
    2672:	df 93       	push	r29
    2674:	cf 93       	push	r28
    2676:	00 d0       	rcall	.+0      	; 0x2678 <TIMER0_VidChangeFrequancy+0x6>
    2678:	0f 92       	push	r0
    267a:	cd b7       	in	r28, 0x3d	; 61
    267c:	de b7       	in	r29, 0x3e	; 62
    267e:	89 83       	std	Y+1, r24	; 0x01


	 switch(LOC_u8PreScaller){
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	28 2f       	mov	r18, r24
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	3b 83       	std	Y+3, r19	; 0x03
    2688:	2a 83       	std	Y+2, r18	; 0x02
    268a:	8a 81       	ldd	r24, Y+2	; 0x02
    268c:	9b 81       	ldd	r25, Y+3	; 0x03
    268e:	82 30       	cpi	r24, 0x02	; 2
    2690:	91 05       	cpc	r25, r1
    2692:	69 f1       	breq	.+90     	; 0x26ee <TIMER0_VidChangeFrequancy+0x7c>
    2694:	2a 81       	ldd	r18, Y+2	; 0x02
    2696:	3b 81       	ldd	r19, Y+3	; 0x03
    2698:	23 30       	cpi	r18, 0x03	; 3
    269a:	31 05       	cpc	r19, r1
    269c:	34 f4       	brge	.+12     	; 0x26aa <TIMER0_VidChangeFrequancy+0x38>
    269e:	8a 81       	ldd	r24, Y+2	; 0x02
    26a0:	9b 81       	ldd	r25, Y+3	; 0x03
    26a2:	81 30       	cpi	r24, 0x01	; 1
    26a4:	91 05       	cpc	r25, r1
    26a6:	69 f0       	breq	.+26     	; 0x26c2 <TIMER0_VidChangeFrequancy+0x50>
    26a8:	63 c0       	rjmp	.+198    	; 0x2770 <TIMER0_VidChangeFrequancy+0xfe>
    26aa:	2a 81       	ldd	r18, Y+2	; 0x02
    26ac:	3b 81       	ldd	r19, Y+3	; 0x03
    26ae:	23 30       	cpi	r18, 0x03	; 3
    26b0:	31 05       	cpc	r19, r1
    26b2:	99 f1       	breq	.+102    	; 0x271a <TIMER0_VidChangeFrequancy+0xa8>
    26b4:	8a 81       	ldd	r24, Y+2	; 0x02
    26b6:	9b 81       	ldd	r25, Y+3	; 0x03
    26b8:	84 30       	cpi	r24, 0x04	; 4
    26ba:	91 05       	cpc	r25, r1
    26bc:	09 f4       	brne	.+2      	; 0x26c0 <TIMER0_VidChangeFrequancy+0x4e>
    26be:	43 c0       	rjmp	.+134    	; 0x2746 <TIMER0_VidChangeFrequancy+0xd4>
    26c0:	57 c0       	rjmp	.+174    	; 0x2770 <TIMER0_VidChangeFrequancy+0xfe>

	 case 1:
			CLR_BIT(TCCR0,PIN2);
    26c2:	a3 e5       	ldi	r26, 0x53	; 83
    26c4:	b0 e0       	ldi	r27, 0x00	; 0
    26c6:	e3 e5       	ldi	r30, 0x53	; 83
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	80 81       	ld	r24, Z
    26cc:	8b 7f       	andi	r24, 0xFB	; 251
    26ce:	8c 93       	st	X, r24
			SET_BIT(TCCR0,PIN1);
    26d0:	a3 e5       	ldi	r26, 0x53	; 83
    26d2:	b0 e0       	ldi	r27, 0x00	; 0
    26d4:	e3 e5       	ldi	r30, 0x53	; 83
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	80 81       	ld	r24, Z
    26da:	82 60       	ori	r24, 0x02	; 2
    26dc:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,PIN0); break;
    26de:	a3 e5       	ldi	r26, 0x53	; 83
    26e0:	b0 e0       	ldi	r27, 0x00	; 0
    26e2:	e3 e5       	ldi	r30, 0x53	; 83
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	80 81       	ld	r24, Z
    26e8:	8e 7f       	andi	r24, 0xFE	; 254
    26ea:	8c 93       	st	X, r24
    26ec:	41 c0       	rjmp	.+130    	; 0x2770 <TIMER0_VidChangeFrequancy+0xfe>
	 case 2:
			CLR_BIT(TCCR0,PIN2);
    26ee:	a3 e5       	ldi	r26, 0x53	; 83
    26f0:	b0 e0       	ldi	r27, 0x00	; 0
    26f2:	e3 e5       	ldi	r30, 0x53	; 83
    26f4:	f0 e0       	ldi	r31, 0x00	; 0
    26f6:	80 81       	ld	r24, Z
    26f8:	8b 7f       	andi	r24, 0xFB	; 251
    26fa:	8c 93       	st	X, r24
			SET_BIT(TCCR0,PIN1);
    26fc:	a3 e5       	ldi	r26, 0x53	; 83
    26fe:	b0 e0       	ldi	r27, 0x00	; 0
    2700:	e3 e5       	ldi	r30, 0x53	; 83
    2702:	f0 e0       	ldi	r31, 0x00	; 0
    2704:	80 81       	ld	r24, Z
    2706:	82 60       	ori	r24, 0x02	; 2
    2708:	8c 93       	st	X, r24
			SET_BIT(TCCR0,PIN0); break;
    270a:	a3 e5       	ldi	r26, 0x53	; 83
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	e3 e5       	ldi	r30, 0x53	; 83
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	80 81       	ld	r24, Z
    2714:	81 60       	ori	r24, 0x01	; 1
    2716:	8c 93       	st	X, r24
    2718:	2b c0       	rjmp	.+86     	; 0x2770 <TIMER0_VidChangeFrequancy+0xfe>
	 case 3:
			SET_BIT(TCCR0,PIN2);
    271a:	a3 e5       	ldi	r26, 0x53	; 83
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	e3 e5       	ldi	r30, 0x53	; 83
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	84 60       	ori	r24, 0x04	; 4
    2726:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,PIN1);
    2728:	a3 e5       	ldi	r26, 0x53	; 83
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	e3 e5       	ldi	r30, 0x53	; 83
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	80 81       	ld	r24, Z
    2732:	8d 7f       	andi	r24, 0xFD	; 253
    2734:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,PIN0); break;
    2736:	a3 e5       	ldi	r26, 0x53	; 83
    2738:	b0 e0       	ldi	r27, 0x00	; 0
    273a:	e3 e5       	ldi	r30, 0x53	; 83
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	80 81       	ld	r24, Z
    2740:	8e 7f       	andi	r24, 0xFE	; 254
    2742:	8c 93       	st	X, r24
    2744:	15 c0       	rjmp	.+42     	; 0x2770 <TIMER0_VidChangeFrequancy+0xfe>
	 case 4:
			SET_BIT(TCCR0,PIN2);
    2746:	a3 e5       	ldi	r26, 0x53	; 83
    2748:	b0 e0       	ldi	r27, 0x00	; 0
    274a:	e3 e5       	ldi	r30, 0x53	; 83
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	80 81       	ld	r24, Z
    2750:	84 60       	ori	r24, 0x04	; 4
    2752:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,PIN1);
    2754:	a3 e5       	ldi	r26, 0x53	; 83
    2756:	b0 e0       	ldi	r27, 0x00	; 0
    2758:	e3 e5       	ldi	r30, 0x53	; 83
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	80 81       	ld	r24, Z
    275e:	8d 7f       	andi	r24, 0xFD	; 253
    2760:	8c 93       	st	X, r24
			SET_BIT(TCCR0,PIN0);
    2762:	a3 e5       	ldi	r26, 0x53	; 83
    2764:	b0 e0       	ldi	r27, 0x00	; 0
    2766:	e3 e5       	ldi	r30, 0x53	; 83
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	80 81       	ld	r24, Z
    276c:	81 60       	ori	r24, 0x01	; 1
    276e:	8c 93       	st	X, r24
			break;

	   }

	}
    2770:	0f 90       	pop	r0
    2772:	0f 90       	pop	r0
    2774:	0f 90       	pop	r0
    2776:	cf 91       	pop	r28
    2778:	df 91       	pop	r29
    277a:	08 95       	ret

0000277c <main>:
u8 OSILLISCOPE_VoidWriteTheSignalSpecsOnTheLCD(void);

void OSILLISCOPE_VoidDrawSquareWave(u8 Copy_DutyCycle);

void main(void)
{
    277c:	df 93       	push	r29
    277e:	cf 93       	push	r28
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
    2784:	2f 97       	sbiw	r28, 0x0f	; 15
    2786:	0f b6       	in	r0, 0x3f	; 63
    2788:	f8 94       	cli
    278a:	de bf       	out	0x3e, r29	; 62
    278c:	0f be       	out	0x3f, r0	; 63
    278e:	cd bf       	out	0x3d, r28	; 61

	u8 DutyCycle=0;
    2790:	1f 86       	std	Y+15, r1	; 0x0f

	OSILLISCOPE_VoidInitialization();
    2792:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <OSILLISCOPE_VoidInitialization>
	while(1)
	{



		DutyCycle=OSILLISCOPE_VoidWriteTheSignalSpecsOnTheLCD();
    2796:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <OSILLISCOPE_VoidWriteTheSignalSpecsOnTheLCD>
    279a:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_VidWriteCommand(CLR);
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_VidWriteCommand>
		OSILLISCOPE_VoidDrawSquareWave(DutyCycle);
    27a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    27a4:	0e 94 47 14 	call	0x288e	; 0x288e <OSILLISCOPE_VoidDrawSquareWave>
    27a8:	80 e0       	ldi	r24, 0x00	; 0
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	aa e7       	ldi	r26, 0x7A	; 122
    27ae:	b4 e4       	ldi	r27, 0x44	; 68
    27b0:	8b 87       	std	Y+11, r24	; 0x0b
    27b2:	9c 87       	std	Y+12, r25	; 0x0c
    27b4:	ad 87       	std	Y+13, r26	; 0x0d
    27b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    27bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    27be:	9e 85       	ldd	r25, Y+14	; 0x0e
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	4a ef       	ldi	r20, 0xFA	; 250
    27c6:	54 e4       	ldi	r21, 0x44	; 68
    27c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	8f 83       	std	Y+7, r24	; 0x07
    27d2:	98 87       	std	Y+8, r25	; 0x08
    27d4:	a9 87       	std	Y+9, r26	; 0x09
    27d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27d8:	6f 81       	ldd	r22, Y+7	; 0x07
    27da:	78 85       	ldd	r23, Y+8	; 0x08
    27dc:	89 85       	ldd	r24, Y+9	; 0x09
    27de:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	40 e8       	ldi	r20, 0x80	; 128
    27e6:	5f e3       	ldi	r21, 0x3F	; 63
    27e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27ec:	88 23       	and	r24, r24
    27ee:	2c f4       	brge	.+10     	; 0x27fa <main+0x7e>
		__ticks = 1;
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	9e 83       	std	Y+6, r25	; 0x06
    27f6:	8d 83       	std	Y+5, r24	; 0x05
    27f8:	3f c0       	rjmp	.+126    	; 0x2878 <main+0xfc>
	else if (__tmp > 65535)
    27fa:	6f 81       	ldd	r22, Y+7	; 0x07
    27fc:	78 85       	ldd	r23, Y+8	; 0x08
    27fe:	89 85       	ldd	r24, Y+9	; 0x09
    2800:	9a 85       	ldd	r25, Y+10	; 0x0a
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	3f ef       	ldi	r19, 0xFF	; 255
    2806:	4f e7       	ldi	r20, 0x7F	; 127
    2808:	57 e4       	ldi	r21, 0x47	; 71
    280a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    280e:	18 16       	cp	r1, r24
    2810:	4c f5       	brge	.+82     	; 0x2864 <main+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2812:	6b 85       	ldd	r22, Y+11	; 0x0b
    2814:	7c 85       	ldd	r23, Y+12	; 0x0c
    2816:	8d 85       	ldd	r24, Y+13	; 0x0d
    2818:	9e 85       	ldd	r25, Y+14	; 0x0e
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	40 e2       	ldi	r20, 0x20	; 32
    2820:	51 e4       	ldi	r21, 0x41	; 65
    2822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	bc 01       	movw	r22, r24
    282c:	cd 01       	movw	r24, r26
    282e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	9e 83       	std	Y+6, r25	; 0x06
    2838:	8d 83       	std	Y+5, r24	; 0x05
    283a:	0f c0       	rjmp	.+30     	; 0x285a <main+0xde>
    283c:	88 ec       	ldi	r24, 0xC8	; 200
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	9c 83       	std	Y+4, r25	; 0x04
    2842:	8b 83       	std	Y+3, r24	; 0x03
    2844:	8b 81       	ldd	r24, Y+3	; 0x03
    2846:	9c 81       	ldd	r25, Y+4	; 0x04
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	f1 f7       	brne	.-4      	; 0x2848 <main+0xcc>
    284c:	9c 83       	std	Y+4, r25	; 0x04
    284e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2850:	8d 81       	ldd	r24, Y+5	; 0x05
    2852:	9e 81       	ldd	r25, Y+6	; 0x06
    2854:	01 97       	sbiw	r24, 0x01	; 1
    2856:	9e 83       	std	Y+6, r25	; 0x06
    2858:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    285a:	8d 81       	ldd	r24, Y+5	; 0x05
    285c:	9e 81       	ldd	r25, Y+6	; 0x06
    285e:	00 97       	sbiw	r24, 0x00	; 0
    2860:	69 f7       	brne	.-38     	; 0x283c <main+0xc0>
    2862:	99 cf       	rjmp	.-206    	; 0x2796 <main+0x1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2864:	6f 81       	ldd	r22, Y+7	; 0x07
    2866:	78 85       	ldd	r23, Y+8	; 0x08
    2868:	89 85       	ldd	r24, Y+9	; 0x09
    286a:	9a 85       	ldd	r25, Y+10	; 0x0a
    286c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	9e 83       	std	Y+6, r25	; 0x06
    2876:	8d 83       	std	Y+5, r24	; 0x05
    2878:	8d 81       	ldd	r24, Y+5	; 0x05
    287a:	9e 81       	ldd	r25, Y+6	; 0x06
    287c:	9a 83       	std	Y+2, r25	; 0x02
    287e:	89 83       	std	Y+1, r24	; 0x01
    2880:	89 81       	ldd	r24, Y+1	; 0x01
    2882:	9a 81       	ldd	r25, Y+2	; 0x02
    2884:	01 97       	sbiw	r24, 0x01	; 1
    2886:	f1 f7       	brne	.-4      	; 0x2884 <main+0x108>
    2888:	9a 83       	std	Y+2, r25	; 0x02
    288a:	89 83       	std	Y+1, r24	; 0x01
    288c:	84 cf       	rjmp	.-248    	; 0x2796 <main+0x1a>

0000288e <OSILLISCOPE_VoidDrawSquareWave>:

}


void OSILLISCOPE_VoidDrawSquareWave(u8 Copy_DutyCycle)
{
    288e:	df 93       	push	r29
    2890:	cf 93       	push	r28
    2892:	cd b7       	in	r28, 0x3d	; 61
    2894:	de b7       	in	r29, 0x3e	; 62
    2896:	29 97       	sbiw	r28, 0x09	; 9
    2898:	0f b6       	in	r0, 0x3f	; 63
    289a:	f8 94       	cli
    289c:	de bf       	out	0x3e, r29	; 62
    289e:	0f be       	out	0x3f, r0	; 63
    28a0:	cd bf       	out	0x3d, r28	; 61
    28a2:	89 87       	std	Y+9, r24	; 0x09
	u8 FirstOnTimeEnds,FirstOffTimeEnds,Repeated=0,Flag=1;
    28a4:	1e 82       	std	Y+6, r1	; 0x06
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	8d 83       	std	Y+5, r24	; 0x05

	if(			Copy_DutyCycle			>=0 			&& 		Copy_DutyCycle   <=25			)
    28aa:	89 85       	ldd	r24, Y+9	; 0x09
    28ac:	8a 31       	cpi	r24, 0x1A	; 26
    28ae:	28 f4       	brcc	.+10     	; 0x28ba <OSILLISCOPE_VoidDrawSquareWave+0x2c>
	{
		FirstOnTimeEnds=1;
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	88 87       	std	Y+8, r24	; 0x08
		FirstOffTimeEnds=7;
    28b4:	87 e0       	ldi	r24, 0x07	; 7
    28b6:	8f 83       	std	Y+7, r24	; 0x07
    28b8:	27 c0       	rjmp	.+78     	; 0x2908 <OSILLISCOPE_VoidDrawSquareWave+0x7a>
	}
	else if(			Copy_DutyCycle			>25 			&& 		Copy_DutyCycle   <=50			)
    28ba:	89 85       	ldd	r24, Y+9	; 0x09
    28bc:	8a 31       	cpi	r24, 0x1A	; 26
    28be:	40 f0       	brcs	.+16     	; 0x28d0 <OSILLISCOPE_VoidDrawSquareWave+0x42>
    28c0:	89 85       	ldd	r24, Y+9	; 0x09
    28c2:	83 33       	cpi	r24, 0x33	; 51
    28c4:	28 f4       	brcc	.+10     	; 0x28d0 <OSILLISCOPE_VoidDrawSquareWave+0x42>
	{
		FirstOnTimeEnds=3;
    28c6:	83 e0       	ldi	r24, 0x03	; 3
    28c8:	88 87       	std	Y+8, r24	; 0x08
		FirstOffTimeEnds=7;
    28ca:	87 e0       	ldi	r24, 0x07	; 7
    28cc:	8f 83       	std	Y+7, r24	; 0x07
    28ce:	1c c0       	rjmp	.+56     	; 0x2908 <OSILLISCOPE_VoidDrawSquareWave+0x7a>
	}
	else if(			Copy_DutyCycle			>50 			&& 		Copy_DutyCycle   <=75			)
    28d0:	89 85       	ldd	r24, Y+9	; 0x09
    28d2:	83 33       	cpi	r24, 0x33	; 51
    28d4:	40 f0       	brcs	.+16     	; 0x28e6 <OSILLISCOPE_VoidDrawSquareWave+0x58>
    28d6:	89 85       	ldd	r24, Y+9	; 0x09
    28d8:	8c 34       	cpi	r24, 0x4C	; 76
    28da:	28 f4       	brcc	.+10     	; 0x28e6 <OSILLISCOPE_VoidDrawSquareWave+0x58>
	{
		FirstOnTimeEnds=5;
    28dc:	85 e0       	ldi	r24, 0x05	; 5
    28de:	88 87       	std	Y+8, r24	; 0x08
		FirstOffTimeEnds=7;
    28e0:	87 e0       	ldi	r24, 0x07	; 7
    28e2:	8f 83       	std	Y+7, r24	; 0x07
    28e4:	11 c0       	rjmp	.+34     	; 0x2908 <OSILLISCOPE_VoidDrawSquareWave+0x7a>
	}
	else
	{
		Flag=0;
    28e6:	1d 82       	std	Y+5, r1	; 0x05
		for(	u8 i=1;					i<=	16;			i++				)			// TON Loc=0
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	8c 83       	std	Y+4, r24	; 0x04
    28ec:	0a c0       	rjmp	.+20     	; 0x2902 <OSILLISCOPE_VoidDrawSquareWave+0x74>
		{
			LCD_VidSetDdram(1,i);
    28ee:	81 e0       	ldi	r24, 0x01	; 1
    28f0:	6c 81       	ldd	r22, Y+4	; 0x04
    28f2:	0e 94 40 10 	call	0x2080	; 0x2080 <LCD_VidSetDdram>
			LCD_VidWriteData(0);
    28f6:	80 e0       	ldi	r24, 0x00	; 0
    28f8:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_VidWriteData>
		FirstOffTimeEnds=7;
	}
	else
	{
		Flag=0;
		for(	u8 i=1;					i<=	16;			i++				)			// TON Loc=0
    28fc:	8c 81       	ldd	r24, Y+4	; 0x04
    28fe:	8f 5f       	subi	r24, 0xFF	; 255
    2900:	8c 83       	std	Y+4, r24	; 0x04
    2902:	8c 81       	ldd	r24, Y+4	; 0x04
    2904:	81 31       	cpi	r24, 0x11	; 17
    2906:	98 f3       	brcs	.-26     	; 0x28ee <OSILLISCOPE_VoidDrawSquareWave+0x60>
			LCD_VidSetDdram(1,i);
			LCD_VidWriteData(0);
		}
	}

	if(					Flag						)
    2908:	8d 81       	ldd	r24, Y+5	; 0x05
    290a:	88 23       	and	r24, r24
    290c:	09 f4       	brne	.+2      	; 0x2910 <OSILLISCOPE_VoidDrawSquareWave+0x82>
    290e:	60 c0       	rjmp	.+192    	; 0x29d0 <OSILLISCOPE_VoidDrawSquareWave+0x142>
	{

		for(u8 j=0;			j<2;				j++)
    2910:	1b 82       	std	Y+3, r1	; 0x03
    2912:	5a c0       	rjmp	.+180    	; 0x29c8 <OSILLISCOPE_VoidDrawSquareWave+0x13a>
		{

			for(	u8 i=1;					i<=	FirstOnTimeEnds;			i++				)			// TON Loc=0
    2914:	81 e0       	ldi	r24, 0x01	; 1
    2916:	8a 83       	std	Y+2, r24	; 0x02
    2918:	0d c0       	rjmp	.+26     	; 0x2934 <OSILLISCOPE_VoidDrawSquareWave+0xa6>
			{
				LCD_VidSetDdram(1,i+Repeated);
    291a:	9a 81       	ldd	r25, Y+2	; 0x02
    291c:	8e 81       	ldd	r24, Y+6	; 0x06
    291e:	98 0f       	add	r25, r24
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	69 2f       	mov	r22, r25
    2924:	0e 94 40 10 	call	0x2080	; 0x2080 <LCD_VidSetDdram>
				LCD_VidWriteData(0);
    2928:	80 e0       	ldi	r24, 0x00	; 0
    292a:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_VidWriteData>
	{

		for(u8 j=0;			j<2;				j++)
		{

			for(	u8 i=1;					i<=	FirstOnTimeEnds;			i++				)			// TON Loc=0
    292e:	8a 81       	ldd	r24, Y+2	; 0x02
    2930:	8f 5f       	subi	r24, 0xFF	; 255
    2932:	8a 83       	std	Y+2, r24	; 0x02
    2934:	9a 81       	ldd	r25, Y+2	; 0x02
    2936:	88 85       	ldd	r24, Y+8	; 0x08
    2938:	89 17       	cp	r24, r25
    293a:	78 f7       	brcc	.-34     	; 0x291a <OSILLISCOPE_VoidDrawSquareWave+0x8c>
			{
				LCD_VidSetDdram(1,i+Repeated);
				LCD_VidWriteData(0);
			}
			LCD_VidSetDdram(1,FirstOnTimeEnds+Repeated+1);
    293c:	98 85       	ldd	r25, Y+8	; 0x08
    293e:	8e 81       	ldd	r24, Y+6	; 0x06
    2940:	89 0f       	add	r24, r25
    2942:	98 2f       	mov	r25, r24
    2944:	9f 5f       	subi	r25, 0xFF	; 255
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	69 2f       	mov	r22, r25
    294a:	0e 94 40 10 	call	0x2080	; 0x2080 <LCD_VidSetDdram>
			LCD_VidWriteData(1);			// TON Ends  With Drawing on X and Y  Loc=1
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_VidWriteData>
			LCD_VidSetDdram(2,FirstOnTimeEnds+Repeated+1);
    2954:	98 85       	ldd	r25, Y+8	; 0x08
    2956:	8e 81       	ldd	r24, Y+6	; 0x06
    2958:	89 0f       	add	r24, r25
    295a:	98 2f       	mov	r25, r24
    295c:	9f 5f       	subi	r25, 0xFF	; 255
    295e:	82 e0       	ldi	r24, 0x02	; 2
    2960:	69 2f       	mov	r22, r25
    2962:	0e 94 40 10 	call	0x2080	; 0x2080 <LCD_VidSetDdram>
			LCD_VidWriteData(2);
    2966:	82 e0       	ldi	r24, 0x02	; 2
    2968:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_VidWriteData>
	/*********************************************************************************************************************/
			for(	u8 i=FirstOnTimeEnds+2;					i<=	FirstOffTimeEnds;			i++				)			// TON Loc=0
    296c:	88 85       	ldd	r24, Y+8	; 0x08
    296e:	8e 5f       	subi	r24, 0xFE	; 254
    2970:	89 83       	std	Y+1, r24	; 0x01
    2972:	0d c0       	rjmp	.+26     	; 0x298e <OSILLISCOPE_VoidDrawSquareWave+0x100>
			{
				LCD_VidSetDdram(2,i+Repeated);
    2974:	99 81       	ldd	r25, Y+1	; 0x01
    2976:	8e 81       	ldd	r24, Y+6	; 0x06
    2978:	98 0f       	add	r25, r24
    297a:	82 e0       	ldi	r24, 0x02	; 2
    297c:	69 2f       	mov	r22, r25
    297e:	0e 94 40 10 	call	0x2080	; 0x2080 <LCD_VidSetDdram>
				LCD_VidWriteData(3);
    2982:	83 e0       	ldi	r24, 0x03	; 3
    2984:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_VidWriteData>
			LCD_VidSetDdram(1,FirstOnTimeEnds+Repeated+1);
			LCD_VidWriteData(1);			// TON Ends  With Drawing on X and Y  Loc=1
			LCD_VidSetDdram(2,FirstOnTimeEnds+Repeated+1);
			LCD_VidWriteData(2);
	/*********************************************************************************************************************/
			for(	u8 i=FirstOnTimeEnds+2;					i<=	FirstOffTimeEnds;			i++				)			// TON Loc=0
    2988:	89 81       	ldd	r24, Y+1	; 0x01
    298a:	8f 5f       	subi	r24, 0xFF	; 255
    298c:	89 83       	std	Y+1, r24	; 0x01
    298e:	99 81       	ldd	r25, Y+1	; 0x01
    2990:	8f 81       	ldd	r24, Y+7	; 0x07
    2992:	89 17       	cp	r24, r25
    2994:	78 f7       	brcc	.-34     	; 0x2974 <OSILLISCOPE_VoidDrawSquareWave+0xe6>
			{
				LCD_VidSetDdram(2,i+Repeated);
				LCD_VidWriteData(3);
			}
			LCD_VidSetDdram(2,8+Repeated);
    2996:	8e 81       	ldd	r24, Y+6	; 0x06
    2998:	98 2f       	mov	r25, r24
    299a:	98 5f       	subi	r25, 0xF8	; 248
    299c:	82 e0       	ldi	r24, 0x02	; 2
    299e:	69 2f       	mov	r22, r25
    29a0:	0e 94 40 10 	call	0x2080	; 0x2080 <LCD_VidSetDdram>
			LCD_VidWriteData(4);
    29a4:	84 e0       	ldi	r24, 0x04	; 4
    29a6:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_VidWriteData>
			LCD_VidSetDdram(1,8+Repeated);
    29aa:	8e 81       	ldd	r24, Y+6	; 0x06
    29ac:	98 2f       	mov	r25, r24
    29ae:	98 5f       	subi	r25, 0xF8	; 248
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	69 2f       	mov	r22, r25
    29b4:	0e 94 40 10 	call	0x2080	; 0x2080 <LCD_VidSetDdram>
			LCD_VidWriteData(5);
    29b8:	85 e0       	ldi	r24, 0x05	; 5
    29ba:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_VidWriteData>
			Repeated=8;
    29be:	88 e0       	ldi	r24, 0x08	; 8
    29c0:	8e 83       	std	Y+6, r24	; 0x06
	}

	if(					Flag						)
	{

		for(u8 j=0;			j<2;				j++)
    29c2:	8b 81       	ldd	r24, Y+3	; 0x03
    29c4:	8f 5f       	subi	r24, 0xFF	; 255
    29c6:	8b 83       	std	Y+3, r24	; 0x03
    29c8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ca:	82 30       	cpi	r24, 0x02	; 2
    29cc:	08 f4       	brcc	.+2      	; 0x29d0 <OSILLISCOPE_VoidDrawSquareWave+0x142>
    29ce:	a2 cf       	rjmp	.-188    	; 0x2914 <OSILLISCOPE_VoidDrawSquareWave+0x86>
			LCD_VidWriteData(5);
			Repeated=8;
		}
	}

}
    29d0:	29 96       	adiw	r28, 0x09	; 9
    29d2:	0f b6       	in	r0, 0x3f	; 63
    29d4:	f8 94       	cli
    29d6:	de bf       	out	0x3e, r29	; 62
    29d8:	0f be       	out	0x3f, r0	; 63
    29da:	cd bf       	out	0x3d, r28	; 61
    29dc:	cf 91       	pop	r28
    29de:	df 91       	pop	r29
    29e0:	08 95       	ret

000029e2 <OSILLISCOPE_VoidWriteTheSignalSpecsOnTheLCD>:


u8 OSILLISCOPE_VoidWriteTheSignalSpecsOnTheLCD(void)
{
    29e2:	df 93       	push	r29
    29e4:	cf 93       	push	r28
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
    29ea:	2a 97       	sbiw	r28, 0x0a	; 10
    29ec:	0f b6       	in	r0, 0x3f	; 63
    29ee:	f8 94       	cli
    29f0:	de bf       	out	0x3e, r29	; 62
    29f2:	0f be       	out	0x3f, r0	; 63
    29f4:	cd bf       	out	0x3d, r28	; 61
	u32 Frequancy=0,DutyCycle=0;
    29f6:	1b 82       	std	Y+3, r1	; 0x03
    29f8:	1c 82       	std	Y+4, r1	; 0x04
    29fa:	1d 82       	std	Y+5, r1	; 0x05
    29fc:	1e 82       	std	Y+6, r1	; 0x06
    29fe:	1f 82       	std	Y+7, r1	; 0x07
    2a00:	18 86       	std	Y+8, r1	; 0x08
    2a02:	19 86       	std	Y+9, r1	; 0x09
    2a04:	1a 86       	std	Y+10, r1	; 0x0a
	u16 Period=0;
    2a06:	1a 82       	std	Y+2, r1	; 0x02
    2a08:	19 82       	std	Y+1, r1	; 0x01

	LCD_VidWriteCommand(CLR);
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_VidWriteCommand>
	Period=ADC_VidGetReadingPooling(ADC0);
    2a10:	80 e0       	ldi	r24, 0x00	; 0
    2a12:	0e 94 88 07 	call	0xf10	; 0xf10 <ADC_VidGetReadingPooling>
    2a16:	9a 83       	std	Y+2, r25	; 0x02
    2a18:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_VidSetDutyCycle(Period*0.25);
    2a1a:	89 81       	ldd	r24, Y+1	; 0x01
    2a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a1e:	cc 01       	movw	r24, r24
    2a20:	a0 e0       	ldi	r26, 0x00	; 0
    2a22:	b0 e0       	ldi	r27, 0x00	; 0
    2a24:	bc 01       	movw	r22, r24
    2a26:	cd 01       	movw	r24, r26
    2a28:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	bc 01       	movw	r22, r24
    2a32:	cd 01       	movw	r24, r26
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	40 e8       	ldi	r20, 0x80	; 128
    2a3a:	5e e3       	ldi	r21, 0x3E	; 62
    2a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	bc 01       	movw	r22, r24
    2a46:	cd 01       	movw	r24, r26
    2a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	cb 01       	movw	r24, r22
    2a50:	0e 94 c5 12 	call	0x258a	; 0x258a <TIMER0_VidSetDutyCycle>
	OSCILLISCOPE_VoidGetTheReadingsOfTheSignalSyncrounase(&Frequancy,&DutyCycle);
    2a54:	ce 01       	movw	r24, r28
    2a56:	03 96       	adiw	r24, 0x03	; 3
    2a58:	9e 01       	movw	r18, r28
    2a5a:	29 5f       	subi	r18, 0xF9	; 249
    2a5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a5e:	b9 01       	movw	r22, r18
    2a60:	0e 94 71 10 	call	0x20e2	; 0x20e2 <OSCILLISCOPE_VoidGetTheReadingsOfTheSignalSyncrounase>
/*	LCD_VidWriteString("F=");
	LCD_VidWriteNumber(Frequancy);
	LCD_VidWriteString(" D=");
	LCD_VidWriteNumber(DutyCycle);
	_delay_ms(3000);*/
	return DutyCycle;
    2a64:	8f 81       	ldd	r24, Y+7	; 0x07
    2a66:	98 85       	ldd	r25, Y+8	; 0x08
    2a68:	a9 85       	ldd	r26, Y+9	; 0x09
    2a6a:	ba 85       	ldd	r27, Y+10	; 0x0a
}
    2a6c:	2a 96       	adiw	r28, 0x0a	; 10
    2a6e:	0f b6       	in	r0, 0x3f	; 63
    2a70:	f8 94       	cli
    2a72:	de bf       	out	0x3e, r29	; 62
    2a74:	0f be       	out	0x3f, r0	; 63
    2a76:	cd bf       	out	0x3d, r28	; 61
    2a78:	cf 91       	pop	r28
    2a7a:	df 91       	pop	r29
    2a7c:	08 95       	ret

00002a7e <OSILLISCOPE_VoidInitialization>:


void OSILLISCOPE_VoidInitialization(void)
{
    2a7e:	df 93       	push	r29
    2a80:	cf 93       	push	r28
    2a82:	cd b7       	in	r28, 0x3d	; 61
    2a84:	de b7       	in	r29, 0x3e	; 62
    2a86:	e7 97       	sbiw	r28, 0x37	; 55
    2a88:	0f b6       	in	r0, 0x3f	; 63
    2a8a:	f8 94       	cli
    2a8c:	de bf       	out	0x3e, r29	; 62
    2a8e:	0f be       	out	0x3f, r0	; 63
    2a90:	cd bf       	out	0x3d, r28	; 61
		{1, 1, 1, 1, 1, 1, 0, 0},		  //   Secand ROW Y AXIS LOC=2 Drawing On Y

		{0, 0, 0, 0, 0, 31, 0, 0}, 	   //  Secand ROW X AXIS LOC=3
		{1, 1, 1, 1, 1, 31, 0, 0},   // Secand ROW Y AXIS LOC=4  With Drawing on X And Y
		{0, 0, 1, 1, 1, 1, 1, 1}	// FIRST ROW Y AXIS LOC=5   Drawing On y
	};
    2a92:	ce 01       	movw	r24, r28
    2a94:	03 96       	adiw	r24, 0x03	; 3
    2a96:	9c ab       	std	Y+52, r25	; 0x34
    2a98:	8b ab       	std	Y+51, r24	; 0x33
    2a9a:	eb e6       	ldi	r30, 0x6B	; 107
    2a9c:	f1 e0       	ldi	r31, 0x01	; 1
    2a9e:	fe ab       	std	Y+54, r31	; 0x36
    2aa0:	ed ab       	std	Y+53, r30	; 0x35
    2aa2:	f0 e3       	ldi	r31, 0x30	; 48
    2aa4:	ff ab       	std	Y+55, r31	; 0x37
    2aa6:	ed a9       	ldd	r30, Y+53	; 0x35
    2aa8:	fe a9       	ldd	r31, Y+54	; 0x36
    2aaa:	00 80       	ld	r0, Z
    2aac:	8d a9       	ldd	r24, Y+53	; 0x35
    2aae:	9e a9       	ldd	r25, Y+54	; 0x36
    2ab0:	01 96       	adiw	r24, 0x01	; 1
    2ab2:	9e ab       	std	Y+54, r25	; 0x36
    2ab4:	8d ab       	std	Y+53, r24	; 0x35
    2ab6:	eb a9       	ldd	r30, Y+51	; 0x33
    2ab8:	fc a9       	ldd	r31, Y+52	; 0x34
    2aba:	00 82       	st	Z, r0
    2abc:	8b a9       	ldd	r24, Y+51	; 0x33
    2abe:	9c a9       	ldd	r25, Y+52	; 0x34
    2ac0:	01 96       	adiw	r24, 0x01	; 1
    2ac2:	9c ab       	std	Y+52, r25	; 0x34
    2ac4:	8b ab       	std	Y+51, r24	; 0x33
    2ac6:	9f a9       	ldd	r25, Y+55	; 0x37
    2ac8:	91 50       	subi	r25, 0x01	; 1
    2aca:	9f ab       	std	Y+55, r25	; 0x37
    2acc:	ef a9       	ldd	r30, Y+55	; 0x37
    2ace:	ee 23       	and	r30, r30
    2ad0:	51 f7       	brne	.-44     	; 0x2aa6 <OSILLISCOPE_VoidInitialization+0x28>


	GIE_VidEnable();
    2ad2:	0e 94 94 0b 	call	0x1728	; 0x1728 <GIE_VidEnable>
	TIMER_VidInit();
    2ad6:	0e 94 7f 12 	call	0x24fe	; 0x24fe <TIMER_VidInit>
	OSCILLISCOPE_VoidInitialization();
    2ada:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <OSCILLISCOPE_VoidInitialization>
	DIO_VidSetPinDirection(PORTB,PIN3,OUTPUT); // FAST_PWM_Timer0
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	63 e0       	ldi	r22, 0x03	; 3
    2ae2:	41 e0       	ldi	r20, 0x01	; 1
    2ae4:	0e 94 1c 08 	call	0x1038	; 0x1038 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(PORTA,PIN0,INPUT); // ADC
    2ae8:	80 e0       	ldi	r24, 0x00	; 0
    2aea:	60 e0       	ldi	r22, 0x00	; 0
    2aec:	40 e0       	ldi	r20, 0x00	; 0
    2aee:	0e 94 1c 08 	call	0x1038	; 0x1038 <DIO_VidSetPinDirection>
	ADC_VidInit();
    2af2:	0e 94 2d 07 	call	0xe5a	; 0xe5a <ADC_VidInit>
	LCD_VidInit();
    2af6:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LCD_VidInit>

	LCD_VidWriteCommand(64);//Set DDRAM
    2afa:	80 e4       	ldi	r24, 0x40	; 64
    2afc:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_VidWriteCommand>

	for(u8 i=0;			i<6;		i++)
    2b00:	1a 82       	std	Y+2, r1	; 0x02
    2b02:	22 c0       	rjmp	.+68     	; 0x2b48 <OSILLISCOPE_VoidInitialization+0xca>
	{
		for(u8 j=0;			j<8;		j++)
    2b04:	19 82       	std	Y+1, r1	; 0x01
    2b06:	1a c0       	rjmp	.+52     	; 0x2b3c <OSILLISCOPE_VoidInitialization+0xbe>
		{
			LCD_VidWriteData(ARRAY[i][j]);
    2b08:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0a:	28 2f       	mov	r18, r24
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	48 2f       	mov	r20, r24
    2b12:	50 e0       	ldi	r21, 0x00	; 0
    2b14:	22 0f       	add	r18, r18
    2b16:	33 1f       	adc	r19, r19
    2b18:	22 0f       	add	r18, r18
    2b1a:	33 1f       	adc	r19, r19
    2b1c:	22 0f       	add	r18, r18
    2b1e:	33 1f       	adc	r19, r19
    2b20:	ce 01       	movw	r24, r28
    2b22:	01 96       	adiw	r24, 0x01	; 1
    2b24:	82 0f       	add	r24, r18
    2b26:	93 1f       	adc	r25, r19
    2b28:	84 0f       	add	r24, r20
    2b2a:	95 1f       	adc	r25, r21
    2b2c:	fc 01       	movw	r30, r24
    2b2e:	32 96       	adiw	r30, 0x02	; 2
    2b30:	80 81       	ld	r24, Z
    2b32:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_VidWriteData>

	LCD_VidWriteCommand(64);//Set DDRAM

	for(u8 i=0;			i<6;		i++)
	{
		for(u8 j=0;			j<8;		j++)
    2b36:	89 81       	ldd	r24, Y+1	; 0x01
    2b38:	8f 5f       	subi	r24, 0xFF	; 255
    2b3a:	89 83       	std	Y+1, r24	; 0x01
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01
    2b3e:	88 30       	cpi	r24, 0x08	; 8
    2b40:	18 f3       	brcs	.-58     	; 0x2b08 <OSILLISCOPE_VoidInitialization+0x8a>
	ADC_VidInit();
	LCD_VidInit();

	LCD_VidWriteCommand(64);//Set DDRAM

	for(u8 i=0;			i<6;		i++)
    2b42:	8a 81       	ldd	r24, Y+2	; 0x02
    2b44:	8f 5f       	subi	r24, 0xFF	; 255
    2b46:	8a 83       	std	Y+2, r24	; 0x02
    2b48:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4a:	86 30       	cpi	r24, 0x06	; 6
    2b4c:	d8 f2       	brcs	.-74     	; 0x2b04 <OSILLISCOPE_VoidInitialization+0x86>
		for(u8 j=0;			j<8;		j++)
		{
			LCD_VidWriteData(ARRAY[i][j]);
		}
	}
}
    2b4e:	e7 96       	adiw	r28, 0x37	; 55
    2b50:	0f b6       	in	r0, 0x3f	; 63
    2b52:	f8 94       	cli
    2b54:	de bf       	out	0x3e, r29	; 62
    2b56:	0f be       	out	0x3f, r0	; 63
    2b58:	cd bf       	out	0x3d, r28	; 61
    2b5a:	cf 91       	pop	r28
    2b5c:	df 91       	pop	r29
    2b5e:	08 95       	ret

00002b60 <__mulsi3>:
    2b60:	62 9f       	mul	r22, r18
    2b62:	d0 01       	movw	r26, r0
    2b64:	73 9f       	mul	r23, r19
    2b66:	f0 01       	movw	r30, r0
    2b68:	82 9f       	mul	r24, r18
    2b6a:	e0 0d       	add	r30, r0
    2b6c:	f1 1d       	adc	r31, r1
    2b6e:	64 9f       	mul	r22, r20
    2b70:	e0 0d       	add	r30, r0
    2b72:	f1 1d       	adc	r31, r1
    2b74:	92 9f       	mul	r25, r18
    2b76:	f0 0d       	add	r31, r0
    2b78:	83 9f       	mul	r24, r19
    2b7a:	f0 0d       	add	r31, r0
    2b7c:	74 9f       	mul	r23, r20
    2b7e:	f0 0d       	add	r31, r0
    2b80:	65 9f       	mul	r22, r21
    2b82:	f0 0d       	add	r31, r0
    2b84:	99 27       	eor	r25, r25
    2b86:	72 9f       	mul	r23, r18
    2b88:	b0 0d       	add	r27, r0
    2b8a:	e1 1d       	adc	r30, r1
    2b8c:	f9 1f       	adc	r31, r25
    2b8e:	63 9f       	mul	r22, r19
    2b90:	b0 0d       	add	r27, r0
    2b92:	e1 1d       	adc	r30, r1
    2b94:	f9 1f       	adc	r31, r25
    2b96:	bd 01       	movw	r22, r26
    2b98:	cf 01       	movw	r24, r30
    2b9a:	11 24       	eor	r1, r1
    2b9c:	08 95       	ret

00002b9e <__udivmodsi4>:
    2b9e:	a1 e2       	ldi	r26, 0x21	; 33
    2ba0:	1a 2e       	mov	r1, r26
    2ba2:	aa 1b       	sub	r26, r26
    2ba4:	bb 1b       	sub	r27, r27
    2ba6:	fd 01       	movw	r30, r26
    2ba8:	0d c0       	rjmp	.+26     	; 0x2bc4 <__udivmodsi4_ep>

00002baa <__udivmodsi4_loop>:
    2baa:	aa 1f       	adc	r26, r26
    2bac:	bb 1f       	adc	r27, r27
    2bae:	ee 1f       	adc	r30, r30
    2bb0:	ff 1f       	adc	r31, r31
    2bb2:	a2 17       	cp	r26, r18
    2bb4:	b3 07       	cpc	r27, r19
    2bb6:	e4 07       	cpc	r30, r20
    2bb8:	f5 07       	cpc	r31, r21
    2bba:	20 f0       	brcs	.+8      	; 0x2bc4 <__udivmodsi4_ep>
    2bbc:	a2 1b       	sub	r26, r18
    2bbe:	b3 0b       	sbc	r27, r19
    2bc0:	e4 0b       	sbc	r30, r20
    2bc2:	f5 0b       	sbc	r31, r21

00002bc4 <__udivmodsi4_ep>:
    2bc4:	66 1f       	adc	r22, r22
    2bc6:	77 1f       	adc	r23, r23
    2bc8:	88 1f       	adc	r24, r24
    2bca:	99 1f       	adc	r25, r25
    2bcc:	1a 94       	dec	r1
    2bce:	69 f7       	brne	.-38     	; 0x2baa <__udivmodsi4_loop>
    2bd0:	60 95       	com	r22
    2bd2:	70 95       	com	r23
    2bd4:	80 95       	com	r24
    2bd6:	90 95       	com	r25
    2bd8:	9b 01       	movw	r18, r22
    2bda:	ac 01       	movw	r20, r24
    2bdc:	bd 01       	movw	r22, r26
    2bde:	cf 01       	movw	r24, r30
    2be0:	08 95       	ret

00002be2 <__divmodsi4>:
    2be2:	97 fb       	bst	r25, 7
    2be4:	09 2e       	mov	r0, r25
    2be6:	05 26       	eor	r0, r21
    2be8:	0e d0       	rcall	.+28     	; 0x2c06 <__divmodsi4_neg1>
    2bea:	57 fd       	sbrc	r21, 7
    2bec:	04 d0       	rcall	.+8      	; 0x2bf6 <__divmodsi4_neg2>
    2bee:	d7 df       	rcall	.-82     	; 0x2b9e <__udivmodsi4>
    2bf0:	0a d0       	rcall	.+20     	; 0x2c06 <__divmodsi4_neg1>
    2bf2:	00 1c       	adc	r0, r0
    2bf4:	38 f4       	brcc	.+14     	; 0x2c04 <__divmodsi4_exit>

00002bf6 <__divmodsi4_neg2>:
    2bf6:	50 95       	com	r21
    2bf8:	40 95       	com	r20
    2bfa:	30 95       	com	r19
    2bfc:	21 95       	neg	r18
    2bfe:	3f 4f       	sbci	r19, 0xFF	; 255
    2c00:	4f 4f       	sbci	r20, 0xFF	; 255
    2c02:	5f 4f       	sbci	r21, 0xFF	; 255

00002c04 <__divmodsi4_exit>:
    2c04:	08 95       	ret

00002c06 <__divmodsi4_neg1>:
    2c06:	f6 f7       	brtc	.-4      	; 0x2c04 <__divmodsi4_exit>
    2c08:	90 95       	com	r25
    2c0a:	80 95       	com	r24
    2c0c:	70 95       	com	r23
    2c0e:	61 95       	neg	r22
    2c10:	7f 4f       	sbci	r23, 0xFF	; 255
    2c12:	8f 4f       	sbci	r24, 0xFF	; 255
    2c14:	9f 4f       	sbci	r25, 0xFF	; 255
    2c16:	08 95       	ret

00002c18 <__prologue_saves__>:
    2c18:	2f 92       	push	r2
    2c1a:	3f 92       	push	r3
    2c1c:	4f 92       	push	r4
    2c1e:	5f 92       	push	r5
    2c20:	6f 92       	push	r6
    2c22:	7f 92       	push	r7
    2c24:	8f 92       	push	r8
    2c26:	9f 92       	push	r9
    2c28:	af 92       	push	r10
    2c2a:	bf 92       	push	r11
    2c2c:	cf 92       	push	r12
    2c2e:	df 92       	push	r13
    2c30:	ef 92       	push	r14
    2c32:	ff 92       	push	r15
    2c34:	0f 93       	push	r16
    2c36:	1f 93       	push	r17
    2c38:	cf 93       	push	r28
    2c3a:	df 93       	push	r29
    2c3c:	cd b7       	in	r28, 0x3d	; 61
    2c3e:	de b7       	in	r29, 0x3e	; 62
    2c40:	ca 1b       	sub	r28, r26
    2c42:	db 0b       	sbc	r29, r27
    2c44:	0f b6       	in	r0, 0x3f	; 63
    2c46:	f8 94       	cli
    2c48:	de bf       	out	0x3e, r29	; 62
    2c4a:	0f be       	out	0x3f, r0	; 63
    2c4c:	cd bf       	out	0x3d, r28	; 61
    2c4e:	09 94       	ijmp

00002c50 <__epilogue_restores__>:
    2c50:	2a 88       	ldd	r2, Y+18	; 0x12
    2c52:	39 88       	ldd	r3, Y+17	; 0x11
    2c54:	48 88       	ldd	r4, Y+16	; 0x10
    2c56:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c58:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c5a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c5c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c5e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c60:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c62:	b9 84       	ldd	r11, Y+9	; 0x09
    2c64:	c8 84       	ldd	r12, Y+8	; 0x08
    2c66:	df 80       	ldd	r13, Y+7	; 0x07
    2c68:	ee 80       	ldd	r14, Y+6	; 0x06
    2c6a:	fd 80       	ldd	r15, Y+5	; 0x05
    2c6c:	0c 81       	ldd	r16, Y+4	; 0x04
    2c6e:	1b 81       	ldd	r17, Y+3	; 0x03
    2c70:	aa 81       	ldd	r26, Y+2	; 0x02
    2c72:	b9 81       	ldd	r27, Y+1	; 0x01
    2c74:	ce 0f       	add	r28, r30
    2c76:	d1 1d       	adc	r29, r1
    2c78:	0f b6       	in	r0, 0x3f	; 63
    2c7a:	f8 94       	cli
    2c7c:	de bf       	out	0x3e, r29	; 62
    2c7e:	0f be       	out	0x3f, r0	; 63
    2c80:	cd bf       	out	0x3d, r28	; 61
    2c82:	ed 01       	movw	r28, r26
    2c84:	08 95       	ret

00002c86 <_exit>:
    2c86:	f8 94       	cli

00002c88 <__stop_program>:
    2c88:	ff cf       	rjmp	.-2      	; 0x2c88 <__stop_program>
