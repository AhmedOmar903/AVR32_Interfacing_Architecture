
ADC_INT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003696  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000022a  00800060  00003696  0000372a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080028a  0080028a  00003954  2**0
                  ALLOC
  3 .stab         0000282c  00000000  00000000  00003954  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001194  00000000  00000000  00006180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000074b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000076a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000ae37  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c010  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c1d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c4c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ce34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 58 11 	jmp	0x22b0	; 0x22b0 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <__vector_9>
      28:	0c 94 5f 12 	jmp	0x24be	; 0x24be <__vector_10>
      2c:	0c 94 2c 12 	jmp	0x2458	; 0x2458 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e9       	ldi	r30, 0x96	; 150
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 39       	cpi	r26, 0x9D	; 157
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 92 12 	call	0x2524	; 0x2524 <main>
      8a:	0c 94 49 1b 	jmp	0x3692	; 0x3692 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e6       	ldi	r26, 0x66	; 102
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b2 1a 	jmp	0x3564	; 0x3564 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a2 1a 	jmp	0x3544	; 0x3544 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 be 1a 	jmp	0x357c	; 0x357c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a2 1a 	jmp	0x3544	; 0x3544 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 be 1a 	jmp	0x357c	; 0x357c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e6       	ldi	r24, 0x66	; 102
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b2 1a 	jmp	0x3564	; 0x3564 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9e 1a 	jmp	0x353c	; 0x353c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e6       	ldi	r22, 0x66	; 102
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ba 1a 	jmp	0x3574	; 0x3574 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a2 1a 	jmp	0x3544	; 0x3544 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 be 1a 	jmp	0x357c	; 0x357c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a2 1a 	jmp	0x3544	; 0x3544 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 be 1a 	jmp	0x357c	; 0x357c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a2 1a 	jmp	0x3544	; 0x3544 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 be 1a 	jmp	0x357c	; 0x357c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a6 1a 	jmp	0x354c	; 0x354c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 c2 1a 	jmp	0x3584	; 0x3584 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 9e 1a 	jmp	0x353c	; 0x353c <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 ba 1a 	jmp	0x3574	; 0x3574 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e2 59       	subi	r30, 0x92	; 146
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_SetCallBack>:
#include "BIT_MATH.h"
#include "ADC_interface.h"
#include "ADC_register.h"

static void(*Gptr)(u16 ADC_Adress)=NULL;
void ADC_SetCallBack(void (*LocPtr)(u16 ADC_Adress)){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <ADC_SetCallBack+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01

	if(LocPtr!=NULL){
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	9a 81       	ldd	r25, Y+2	; 0x02
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	31 f0       	breq	.+12     	; 0xe50 <ADC_SetCallBack+0x22>
		Gptr=LocPtr;
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	9a 81       	ldd	r25, Y+2	; 0x02
     e48:	90 93 8b 02 	sts	0x028B, r25
     e4c:	80 93 8a 02 	sts	0x028A, r24
	    }

}
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	08 95       	ret

00000e5a <ADC_VidInit>:
void ADC_VidInit(void){
     e5a:	df 93       	push	r29
     e5c:	cf 93       	push	r28
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
//CHOOSE THE Vref//
  SET_BIT(ADMUX,PIN6);
     e62:	a7 e2       	ldi	r26, 0x27	; 39
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e7 e2       	ldi	r30, 0x27	; 39
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	80 64       	ori	r24, 0x40	; 64
     e6e:	8c 93       	st	X, r24
  CLR_BIT(ADMUX,PIN7);
     e70:	a7 e2       	ldi	r26, 0x27	; 39
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e7 e2       	ldi	r30, 0x27	; 39
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	8f 77       	andi	r24, 0x7F	; 127
     e7c:	8c 93       	st	X, r24

#if DATA_READING==RIGHT  
   CLR_BIT(ADMUX,PIN5);//choose the right adjest//
     e7e:	a7 e2       	ldi	r26, 0x27	; 39
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e7 e2       	ldi	r30, 0x27	; 39
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	8f 7d       	andi	r24, 0xDF	; 223
     e8a:	8c 93       	st	X, r24
#elif DATA_READING==LEFT  
   SET_BIT(ADMUX,PIN5);//choose the LEFT adjest//  
#endif   

#if AUTO_TRIG==OFF
   CLR_BIT(ADCSRA,PIN5);//auto trigger OFF//
     e8c:	a6 e2       	ldi	r26, 0x26	; 38
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e6 e2       	ldi	r30, 0x26	; 38
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	8f 7d       	andi	r24, 0xDF	; 223
     e98:	8c 93       	st	X, r24

		  #endif

#endif   
   
    CLR_BIT(ADCSRA,PIN0);  //pre scaller 64//
     e9a:	a6 e2       	ldi	r26, 0x26	; 38
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e6 e2       	ldi	r30, 0x26	; 38
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	8e 7f       	andi	r24, 0xFE	; 254
     ea6:	8c 93       	st	X, r24
    SET_BIT(ADCSRA,PIN1);
     ea8:	a6 e2       	ldi	r26, 0x26	; 38
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e6 e2       	ldi	r30, 0x26	; 38
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	82 60       	ori	r24, 0x02	; 2
     eb4:	8c 93       	st	X, r24
    SET_BIT(ADCSRA,PIN2);
     eb6:	a6 e2       	ldi	r26, 0x26	; 38
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e6 e2       	ldi	r30, 0x26	; 38
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	84 60       	ori	r24, 0x04	; 4
     ec2:	8c 93       	st	X, r24
	
  
    SET_BIT(ADCSRA ,PIN7);//ADC ENABLBE//
     ec4:	a6 e2       	ldi	r26, 0x26	; 38
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e6 e2       	ldi	r30, 0x26	; 38
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	80 68       	ori	r24, 0x80	; 128
     ed0:	8c 93       	st	X, r24

}
     ed2:	cf 91       	pop	r28
     ed4:	df 91       	pop	r29
     ed6:	08 95       	ret

00000ed8 <ADC_VidGetReadingPooling>:

u16 ADC_VidGetReadingPooling(u8 LOC_u8AdcNum){
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	0f 92       	push	r0
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	89 83       	std	Y+1, r24	; 0x01
	
	ADMUX&=0b11100000;
     ee4:	a7 e2       	ldi	r26, 0x27	; 39
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e7 e2       	ldi	r30, 0x27	; 39
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	80 7e       	andi	r24, 0xE0	; 224
     ef0:	8c 93       	st	X, r24
	ADMUX|=LOC_u8AdcNum;
     ef2:	a7 e2       	ldi	r26, 0x27	; 39
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e7 e2       	ldi	r30, 0x27	; 39
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	90 81       	ld	r25, Z
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	89 2b       	or	r24, r25
     f00:	8c 93       	st	X, r24
	
	SET_BIT(ADCSRA,PIN6);//start the conversion//
     f02:	a6 e2       	ldi	r26, 0x26	; 38
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e6 e2       	ldi	r30, 0x26	; 38
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	80 64       	ori	r24, 0x40	; 64
     f0e:	8c 93       	st	X, r24
	
	while(0==GET_BIT(ADCSRA,PIN4)){
     f10:	e6 e2       	ldi	r30, 0x26	; 38
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	82 95       	swap	r24
     f18:	8f 70       	andi	r24, 0x0F	; 15
     f1a:	88 2f       	mov	r24, r24
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	81 70       	andi	r24, 0x01	; 1
     f20:	90 70       	andi	r25, 0x00	; 0
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	a9 f3       	breq	.-22     	; 0xf10 <ADC_VidGetReadingPooling+0x38>
		
	}
	SET_BIT(ADCSRA,PIN4);
     f26:	a6 e2       	ldi	r26, 0x26	; 38
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e6 e2       	ldi	r30, 0x26	; 38
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	80 61       	ori	r24, 0x10	; 16
     f32:	8c 93       	st	X, r24
	
	return ADC;
     f34:	e4 e2       	ldi	r30, 0x24	; 36
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	91 81       	ldd	r25, Z+1	; 0x01
}
     f3c:	0f 90       	pop	r0
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <ADC_VidGetReadingInterrupt>:

void ADC_VidGetReadingInterrupt(u8 LOC_u8AdcNum){
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	0f 92       	push	r0
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=0b11100000;
     f50:	a7 e2       	ldi	r26, 0x27	; 39
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e7 e2       	ldi	r30, 0x27	; 39
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	80 7e       	andi	r24, 0xE0	; 224
     f5c:	8c 93       	st	X, r24
	ADMUX|=LOC_u8AdcNum;
     f5e:	a7 e2       	ldi	r26, 0x27	; 39
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e7 e2       	ldi	r30, 0x27	; 39
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	90 81       	ld	r25, Z
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	89 2b       	or	r24, r25
     f6c:	8c 93       	st	X, r24

#if	INTERRUPT_ADC==ON
 SET_BIT(ADCSRA,PIN3);//enable the ADC interrupt on//
#elif  INTERRUPT_ADC==OFF
 CLR_BIT(ADCSRA,PIN3);//Disable the ADC interrupt on//
     f6e:	a6 e2       	ldi	r26, 0x26	; 38
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e6 e2       	ldi	r30, 0x26	; 38
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	87 7f       	andi	r24, 0xF7	; 247
     f7a:	8c 93       	st	X, r24
#endif
SET_BIT(ADCSRA,PIN6);//start the conversion//
     f7c:	a6 e2       	ldi	r26, 0x26	; 38
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e6 e2       	ldi	r30, 0x26	; 38
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	80 64       	ori	r24, 0x40	; 64
     f88:	8c 93       	st	X, r24

}
     f8a:	0f 90       	pop	r0
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <__vector_16>:

void __vector_16( void ){
     f92:	1f 92       	push	r1
     f94:	0f 92       	push	r0
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	0f 92       	push	r0
     f9a:	11 24       	eor	r1, r1
     f9c:	2f 93       	push	r18
     f9e:	3f 93       	push	r19
     fa0:	4f 93       	push	r20
     fa2:	5f 93       	push	r21
     fa4:	6f 93       	push	r22
     fa6:	7f 93       	push	r23
     fa8:	8f 93       	push	r24
     faa:	9f 93       	push	r25
     fac:	af 93       	push	r26
     fae:	bf 93       	push	r27
     fb0:	ef 93       	push	r30
     fb2:	ff 93       	push	r31
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62

 if(Gptr!=NULL){
     fbc:	80 91 8a 02 	lds	r24, 0x028A
     fc0:	90 91 8b 02 	lds	r25, 0x028B
     fc4:	00 97       	sbiw	r24, 0x00	; 0
     fc6:	49 f0       	breq	.+18     	; 0xfda <__vector_16+0x48>
	Gptr(ADC);
     fc8:	e0 91 8a 02 	lds	r30, 0x028A
     fcc:	f0 91 8b 02 	lds	r31, 0x028B
     fd0:	a4 e2       	ldi	r26, 0x24	; 36
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	8d 91       	ld	r24, X+
     fd6:	9c 91       	ld	r25, X
     fd8:	09 95       	icall
    }

}
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	ff 91       	pop	r31
     fe0:	ef 91       	pop	r30
     fe2:	bf 91       	pop	r27
     fe4:	af 91       	pop	r26
     fe6:	9f 91       	pop	r25
     fe8:	8f 91       	pop	r24
     fea:	7f 91       	pop	r23
     fec:	6f 91       	pop	r22
     fee:	5f 91       	pop	r21
     ff0:	4f 91       	pop	r20
     ff2:	3f 91       	pop	r19
     ff4:	2f 91       	pop	r18
     ff6:	0f 90       	pop	r0
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	0f 90       	pop	r0
     ffc:	1f 90       	pop	r1
     ffe:	18 95       	reti

00001000 <DIO_VidSetPinDirection>:
/*
loc_u8port=port name 
loc_u8pin =pin number
loc_u8state=pin direction
*/
void DIO_VidSetPinDirection(u8 loc_u8port,u8 loc_u8pin, u8 loc_u8state){
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	27 97       	sbiw	r28, 0x07	; 7
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	f8 94       	cli
    100e:	de bf       	out	0x3e, r29	; 62
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	cd bf       	out	0x3d, r28	; 61
    1014:	89 83       	std	Y+1, r24	; 0x01
    1016:	6a 83       	std	Y+2, r22	; 0x02
    1018:	4b 83       	std	Y+3, r20	; 0x03
	
	if(1==loc_u8state){
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	09 f0       	breq	.+2      	; 0x1022 <DIO_VidSetPinDirection+0x22>
    1020:	6f c0       	rjmp	.+222    	; 0x1100 <DIO_VidSetPinDirection+0x100>
	    switch(loc_u8port){
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	3f 83       	std	Y+7, r19	; 0x07
    102a:	2e 83       	std	Y+6, r18	; 0x06
    102c:	8e 81       	ldd	r24, Y+6	; 0x06
    102e:	9f 81       	ldd	r25, Y+7	; 0x07
    1030:	81 30       	cpi	r24, 0x01	; 1
    1032:	91 05       	cpc	r25, r1
    1034:	49 f1       	breq	.+82     	; 0x1088 <DIO_VidSetPinDirection+0x88>
    1036:	2e 81       	ldd	r18, Y+6	; 0x06
    1038:	3f 81       	ldd	r19, Y+7	; 0x07
    103a:	22 30       	cpi	r18, 0x02	; 2
    103c:	31 05       	cpc	r19, r1
    103e:	2c f4       	brge	.+10     	; 0x104a <DIO_VidSetPinDirection+0x4a>
    1040:	8e 81       	ldd	r24, Y+6	; 0x06
    1042:	9f 81       	ldd	r25, Y+7	; 0x07
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	61 f0       	breq	.+24     	; 0x1060 <DIO_VidSetPinDirection+0x60>
    1048:	d2 c0       	rjmp	.+420    	; 0x11ee <DIO_VidSetPinDirection+0x1ee>
    104a:	2e 81       	ldd	r18, Y+6	; 0x06
    104c:	3f 81       	ldd	r19, Y+7	; 0x07
    104e:	22 30       	cpi	r18, 0x02	; 2
    1050:	31 05       	cpc	r19, r1
    1052:	71 f1       	breq	.+92     	; 0x10b0 <DIO_VidSetPinDirection+0xb0>
    1054:	8e 81       	ldd	r24, Y+6	; 0x06
    1056:	9f 81       	ldd	r25, Y+7	; 0x07
    1058:	83 30       	cpi	r24, 0x03	; 3
    105a:	91 05       	cpc	r25, r1
    105c:	e9 f1       	breq	.+122    	; 0x10d8 <DIO_VidSetPinDirection+0xd8>
    105e:	c7 c0       	rjmp	.+398    	; 0x11ee <DIO_VidSetPinDirection+0x1ee>
		case 0:SET_BIT(DDRA,loc_u8pin);break;
    1060:	aa e3       	ldi	r26, 0x3A	; 58
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	ea e3       	ldi	r30, 0x3A	; 58
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	48 2f       	mov	r20, r24
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	02 2e       	mov	r0, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <DIO_VidSetPinDirection+0x7e>
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	0a 94       	dec	r0
    1080:	e2 f7       	brpl	.-8      	; 0x107a <DIO_VidSetPinDirection+0x7a>
    1082:	84 2b       	or	r24, r20
    1084:	8c 93       	st	X, r24
    1086:	b3 c0       	rjmp	.+358    	; 0x11ee <DIO_VidSetPinDirection+0x1ee>
		case 1:SET_BIT(DDRB,loc_u8pin);break;
    1088:	a7 e3       	ldi	r26, 0x37	; 55
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e7 e3       	ldi	r30, 0x37	; 55
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	48 2f       	mov	r20, r24
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	02 2e       	mov	r0, r18
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <DIO_VidSetPinDirection+0xa6>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	0a 94       	dec	r0
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <DIO_VidSetPinDirection+0xa2>
    10aa:	84 2b       	or	r24, r20
    10ac:	8c 93       	st	X, r24
    10ae:	9f c0       	rjmp	.+318    	; 0x11ee <DIO_VidSetPinDirection+0x1ee>
		case 2:SET_BIT(DDRC,loc_u8pin);break;
    10b0:	a4 e3       	ldi	r26, 0x34	; 52
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e4 e3       	ldi	r30, 0x34	; 52
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	48 2f       	mov	r20, r24
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	02 2e       	mov	r0, r18
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <DIO_VidSetPinDirection+0xce>
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	0a 94       	dec	r0
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <DIO_VidSetPinDirection+0xca>
    10d2:	84 2b       	or	r24, r20
    10d4:	8c 93       	st	X, r24
    10d6:	8b c0       	rjmp	.+278    	; 0x11ee <DIO_VidSetPinDirection+0x1ee>
		case 3:SET_BIT(DDRD,loc_u8pin);break;
    10d8:	a1 e3       	ldi	r26, 0x31	; 49
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e1 e3       	ldi	r30, 0x31	; 49
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	48 2f       	mov	r20, r24
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	02 2e       	mov	r0, r18
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <DIO_VidSetPinDirection+0xf6>
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	0a 94       	dec	r0
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <DIO_VidSetPinDirection+0xf2>
    10fa:	84 2b       	or	r24, r20
    10fc:	8c 93       	st	X, r24
    10fe:	77 c0       	rjmp	.+238    	; 0x11ee <DIO_VidSetPinDirection+0x1ee>
	 }
	}
	else if(0==loc_u8state){
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	88 23       	and	r24, r24
    1104:	09 f0       	breq	.+2      	; 0x1108 <DIO_VidSetPinDirection+0x108>
    1106:	73 c0       	rjmp	.+230    	; 0x11ee <DIO_VidSetPinDirection+0x1ee>
	    switch(loc_u8port){
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	3d 83       	std	Y+5, r19	; 0x05
    1110:	2c 83       	std	Y+4, r18	; 0x04
    1112:	8c 81       	ldd	r24, Y+4	; 0x04
    1114:	9d 81       	ldd	r25, Y+5	; 0x05
    1116:	81 30       	cpi	r24, 0x01	; 1
    1118:	91 05       	cpc	r25, r1
    111a:	59 f1       	breq	.+86     	; 0x1172 <DIO_VidSetPinDirection+0x172>
    111c:	2c 81       	ldd	r18, Y+4	; 0x04
    111e:	3d 81       	ldd	r19, Y+5	; 0x05
    1120:	22 30       	cpi	r18, 0x02	; 2
    1122:	31 05       	cpc	r19, r1
    1124:	2c f4       	brge	.+10     	; 0x1130 <DIO_VidSetPinDirection+0x130>
    1126:	8c 81       	ldd	r24, Y+4	; 0x04
    1128:	9d 81       	ldd	r25, Y+5	; 0x05
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	69 f0       	breq	.+26     	; 0x1148 <DIO_VidSetPinDirection+0x148>
    112e:	5f c0       	rjmp	.+190    	; 0x11ee <DIO_VidSetPinDirection+0x1ee>
    1130:	2c 81       	ldd	r18, Y+4	; 0x04
    1132:	3d 81       	ldd	r19, Y+5	; 0x05
    1134:	22 30       	cpi	r18, 0x02	; 2
    1136:	31 05       	cpc	r19, r1
    1138:	89 f1       	breq	.+98     	; 0x119c <DIO_VidSetPinDirection+0x19c>
    113a:	8c 81       	ldd	r24, Y+4	; 0x04
    113c:	9d 81       	ldd	r25, Y+5	; 0x05
    113e:	83 30       	cpi	r24, 0x03	; 3
    1140:	91 05       	cpc	r25, r1
    1142:	09 f4       	brne	.+2      	; 0x1146 <DIO_VidSetPinDirection+0x146>
    1144:	40 c0       	rjmp	.+128    	; 0x11c6 <DIO_VidSetPinDirection+0x1c6>
    1146:	53 c0       	rjmp	.+166    	; 0x11ee <DIO_VidSetPinDirection+0x1ee>
		case 0:CLR_BIT(DDRA,loc_u8pin);break;
    1148:	aa e3       	ldi	r26, 0x3A	; 58
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	ea e3       	ldi	r30, 0x3A	; 58
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	48 2f       	mov	r20, r24
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	02 2e       	mov	r0, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <DIO_VidSetPinDirection+0x166>
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	0a 94       	dec	r0
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <DIO_VidSetPinDirection+0x162>
    116a:	80 95       	com	r24
    116c:	84 23       	and	r24, r20
    116e:	8c 93       	st	X, r24
    1170:	3e c0       	rjmp	.+124    	; 0x11ee <DIO_VidSetPinDirection+0x1ee>
		case 1:CLR_BIT(DDRB,loc_u8pin);break;
    1172:	a7 e3       	ldi	r26, 0x37	; 55
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e7 e3       	ldi	r30, 0x37	; 55
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	48 2f       	mov	r20, r24
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 2e       	mov	r0, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <DIO_VidSetPinDirection+0x190>
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	0a 94       	dec	r0
    1192:	e2 f7       	brpl	.-8      	; 0x118c <DIO_VidSetPinDirection+0x18c>
    1194:	80 95       	com	r24
    1196:	84 23       	and	r24, r20
    1198:	8c 93       	st	X, r24
    119a:	29 c0       	rjmp	.+82     	; 0x11ee <DIO_VidSetPinDirection+0x1ee>
		case 2:CLR_BIT(DDRC,loc_u8pin);break;
    119c:	a4 e3       	ldi	r26, 0x34	; 52
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e4 e3       	ldi	r30, 0x34	; 52
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	48 2f       	mov	r20, r24
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 2e       	mov	r0, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <DIO_VidSetPinDirection+0x1ba>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <DIO_VidSetPinDirection+0x1b6>
    11be:	80 95       	com	r24
    11c0:	84 23       	and	r24, r20
    11c2:	8c 93       	st	X, r24
    11c4:	14 c0       	rjmp	.+40     	; 0x11ee <DIO_VidSetPinDirection+0x1ee>
		case 3:CLR_BIT(DDRD,loc_u8pin);break;
    11c6:	a1 e3       	ldi	r26, 0x31	; 49
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e1 e3       	ldi	r30, 0x31	; 49
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	48 2f       	mov	r20, r24
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	02 2e       	mov	r0, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <DIO_VidSetPinDirection+0x1e4>
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	0a 94       	dec	r0
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <DIO_VidSetPinDirection+0x1e0>
    11e8:	80 95       	com	r24
    11ea:	84 23       	and	r24, r20
    11ec:	8c 93       	st	X, r24
	 }
	}
	
	
}
    11ee:	27 96       	adiw	r28, 0x07	; 7
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <DIO_VidSetPinValue>:
void DIO_VidSetPinValue(u8 loc_u8port,u8 loc_u8pin, u8 loc_u8value){
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	27 97       	sbiw	r28, 0x07	; 7
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
    1214:	89 83       	std	Y+1, r24	; 0x01
    1216:	6a 83       	std	Y+2, r22	; 0x02
    1218:	4b 83       	std	Y+3, r20	; 0x03
	
	if(1==loc_u8value){
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	81 30       	cpi	r24, 0x01	; 1
    121e:	09 f0       	breq	.+2      	; 0x1222 <DIO_VidSetPinValue+0x22>
    1220:	6f c0       	rjmp	.+222    	; 0x1300 <DIO_VidSetPinValue+0x100>
	    switch(loc_u8port){
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	3f 83       	std	Y+7, r19	; 0x07
    122a:	2e 83       	std	Y+6, r18	; 0x06
    122c:	8e 81       	ldd	r24, Y+6	; 0x06
    122e:	9f 81       	ldd	r25, Y+7	; 0x07
    1230:	81 30       	cpi	r24, 0x01	; 1
    1232:	91 05       	cpc	r25, r1
    1234:	49 f1       	breq	.+82     	; 0x1288 <DIO_VidSetPinValue+0x88>
    1236:	2e 81       	ldd	r18, Y+6	; 0x06
    1238:	3f 81       	ldd	r19, Y+7	; 0x07
    123a:	22 30       	cpi	r18, 0x02	; 2
    123c:	31 05       	cpc	r19, r1
    123e:	2c f4       	brge	.+10     	; 0x124a <DIO_VidSetPinValue+0x4a>
    1240:	8e 81       	ldd	r24, Y+6	; 0x06
    1242:	9f 81       	ldd	r25, Y+7	; 0x07
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	61 f0       	breq	.+24     	; 0x1260 <DIO_VidSetPinValue+0x60>
    1248:	d2 c0       	rjmp	.+420    	; 0x13ee <DIO_VidSetPinValue+0x1ee>
    124a:	2e 81       	ldd	r18, Y+6	; 0x06
    124c:	3f 81       	ldd	r19, Y+7	; 0x07
    124e:	22 30       	cpi	r18, 0x02	; 2
    1250:	31 05       	cpc	r19, r1
    1252:	71 f1       	breq	.+92     	; 0x12b0 <DIO_VidSetPinValue+0xb0>
    1254:	8e 81       	ldd	r24, Y+6	; 0x06
    1256:	9f 81       	ldd	r25, Y+7	; 0x07
    1258:	83 30       	cpi	r24, 0x03	; 3
    125a:	91 05       	cpc	r25, r1
    125c:	e9 f1       	breq	.+122    	; 0x12d8 <DIO_VidSetPinValue+0xd8>
    125e:	c7 c0       	rjmp	.+398    	; 0x13ee <DIO_VidSetPinValue+0x1ee>
		case 0:SET_BIT(PORTA,loc_u8pin);break;
    1260:	ab e3       	ldi	r26, 0x3B	; 59
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	eb e3       	ldi	r30, 0x3B	; 59
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	48 2f       	mov	r20, r24
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	02 2e       	mov	r0, r18
    1278:	02 c0       	rjmp	.+4      	; 0x127e <DIO_VidSetPinValue+0x7e>
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	0a 94       	dec	r0
    1280:	e2 f7       	brpl	.-8      	; 0x127a <DIO_VidSetPinValue+0x7a>
    1282:	84 2b       	or	r24, r20
    1284:	8c 93       	st	X, r24
    1286:	b3 c0       	rjmp	.+358    	; 0x13ee <DIO_VidSetPinValue+0x1ee>
		case 1:SET_BIT(PORTB,loc_u8pin);break;
    1288:	a8 e3       	ldi	r26, 0x38	; 56
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e8 e3       	ldi	r30, 0x38	; 56
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 2e       	mov	r0, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <DIO_VidSetPinValue+0xa6>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	0a 94       	dec	r0
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <DIO_VidSetPinValue+0xa2>
    12aa:	84 2b       	or	r24, r20
    12ac:	8c 93       	st	X, r24
    12ae:	9f c0       	rjmp	.+318    	; 0x13ee <DIO_VidSetPinValue+0x1ee>
		case 2:SET_BIT(PORTC,loc_u8pin);break;
    12b0:	a5 e3       	ldi	r26, 0x35	; 53
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e5 e3       	ldi	r30, 0x35	; 53
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	48 2f       	mov	r20, r24
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 2e       	mov	r0, r18
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <DIO_VidSetPinValue+0xce>
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	0a 94       	dec	r0
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <DIO_VidSetPinValue+0xca>
    12d2:	84 2b       	or	r24, r20
    12d4:	8c 93       	st	X, r24
    12d6:	8b c0       	rjmp	.+278    	; 0x13ee <DIO_VidSetPinValue+0x1ee>
		case 3:SET_BIT(PORTD,loc_u8pin);break;
    12d8:	a2 e3       	ldi	r26, 0x32	; 50
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e2 e3       	ldi	r30, 0x32	; 50
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	48 2f       	mov	r20, r24
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	02 2e       	mov	r0, r18
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <DIO_VidSetPinValue+0xf6>
    12f2:	88 0f       	add	r24, r24
    12f4:	99 1f       	adc	r25, r25
    12f6:	0a 94       	dec	r0
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <DIO_VidSetPinValue+0xf2>
    12fa:	84 2b       	or	r24, r20
    12fc:	8c 93       	st	X, r24
    12fe:	77 c0       	rjmp	.+238    	; 0x13ee <DIO_VidSetPinValue+0x1ee>
	 }
	}
	else if(0==loc_u8value){
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	88 23       	and	r24, r24
    1304:	09 f0       	breq	.+2      	; 0x1308 <DIO_VidSetPinValue+0x108>
    1306:	73 c0       	rjmp	.+230    	; 0x13ee <DIO_VidSetPinValue+0x1ee>
	    switch(loc_u8port){
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	3d 83       	std	Y+5, r19	; 0x05
    1310:	2c 83       	std	Y+4, r18	; 0x04
    1312:	8c 81       	ldd	r24, Y+4	; 0x04
    1314:	9d 81       	ldd	r25, Y+5	; 0x05
    1316:	81 30       	cpi	r24, 0x01	; 1
    1318:	91 05       	cpc	r25, r1
    131a:	59 f1       	breq	.+86     	; 0x1372 <DIO_VidSetPinValue+0x172>
    131c:	2c 81       	ldd	r18, Y+4	; 0x04
    131e:	3d 81       	ldd	r19, Y+5	; 0x05
    1320:	22 30       	cpi	r18, 0x02	; 2
    1322:	31 05       	cpc	r19, r1
    1324:	2c f4       	brge	.+10     	; 0x1330 <DIO_VidSetPinValue+0x130>
    1326:	8c 81       	ldd	r24, Y+4	; 0x04
    1328:	9d 81       	ldd	r25, Y+5	; 0x05
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	69 f0       	breq	.+26     	; 0x1348 <DIO_VidSetPinValue+0x148>
    132e:	5f c0       	rjmp	.+190    	; 0x13ee <DIO_VidSetPinValue+0x1ee>
    1330:	2c 81       	ldd	r18, Y+4	; 0x04
    1332:	3d 81       	ldd	r19, Y+5	; 0x05
    1334:	22 30       	cpi	r18, 0x02	; 2
    1336:	31 05       	cpc	r19, r1
    1338:	89 f1       	breq	.+98     	; 0x139c <DIO_VidSetPinValue+0x19c>
    133a:	8c 81       	ldd	r24, Y+4	; 0x04
    133c:	9d 81       	ldd	r25, Y+5	; 0x05
    133e:	83 30       	cpi	r24, 0x03	; 3
    1340:	91 05       	cpc	r25, r1
    1342:	09 f4       	brne	.+2      	; 0x1346 <DIO_VidSetPinValue+0x146>
    1344:	40 c0       	rjmp	.+128    	; 0x13c6 <DIO_VidSetPinValue+0x1c6>
    1346:	53 c0       	rjmp	.+166    	; 0x13ee <DIO_VidSetPinValue+0x1ee>
		case 0:CLR_BIT(PORTA,loc_u8pin);break;
    1348:	ab e3       	ldi	r26, 0x3B	; 59
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	eb e3       	ldi	r30, 0x3B	; 59
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	48 2f       	mov	r20, r24
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	02 2e       	mov	r0, r18
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <DIO_VidSetPinValue+0x166>
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	0a 94       	dec	r0
    1368:	e2 f7       	brpl	.-8      	; 0x1362 <DIO_VidSetPinValue+0x162>
    136a:	80 95       	com	r24
    136c:	84 23       	and	r24, r20
    136e:	8c 93       	st	X, r24
    1370:	3e c0       	rjmp	.+124    	; 0x13ee <DIO_VidSetPinValue+0x1ee>
		case 1:CLR_BIT(PORTB,loc_u8pin);break;
    1372:	a8 e3       	ldi	r26, 0x38	; 56
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e8 e3       	ldi	r30, 0x38	; 56
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	48 2f       	mov	r20, r24
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 2e       	mov	r0, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <DIO_VidSetPinValue+0x190>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	0a 94       	dec	r0
    1392:	e2 f7       	brpl	.-8      	; 0x138c <DIO_VidSetPinValue+0x18c>
    1394:	80 95       	com	r24
    1396:	84 23       	and	r24, r20
    1398:	8c 93       	st	X, r24
    139a:	29 c0       	rjmp	.+82     	; 0x13ee <DIO_VidSetPinValue+0x1ee>
		case 2:CLR_BIT(PORTC,loc_u8pin);break;
    139c:	a5 e3       	ldi	r26, 0x35	; 53
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e5 e3       	ldi	r30, 0x35	; 53
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	48 2f       	mov	r20, r24
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	02 2e       	mov	r0, r18
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <DIO_VidSetPinValue+0x1ba>
    13b6:	88 0f       	add	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	0a 94       	dec	r0
    13bc:	e2 f7       	brpl	.-8      	; 0x13b6 <DIO_VidSetPinValue+0x1b6>
    13be:	80 95       	com	r24
    13c0:	84 23       	and	r24, r20
    13c2:	8c 93       	st	X, r24
    13c4:	14 c0       	rjmp	.+40     	; 0x13ee <DIO_VidSetPinValue+0x1ee>
		case 3:CLR_BIT(PORTD,loc_u8pin);break;
    13c6:	a2 e3       	ldi	r26, 0x32	; 50
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e2 e3       	ldi	r30, 0x32	; 50
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	48 2f       	mov	r20, r24
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	02 2e       	mov	r0, r18
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <DIO_VidSetPinValue+0x1e4>
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	0a 94       	dec	r0
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <DIO_VidSetPinValue+0x1e0>
    13e8:	80 95       	com	r24
    13ea:	84 23       	and	r24, r20
    13ec:	8c 93       	st	X, r24
	 }
	}
}
    13ee:	27 96       	adiw	r28, 0x07	; 7
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	de bf       	out	0x3e, r29	; 62
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	cd bf       	out	0x3d, r28	; 61
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	08 95       	ret

00001400 <DIO_VidSetPortDirection>:
void DIO_VidSetPortDirection(u8 loc_u8port,u8 loc_u8value){
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	00 d0       	rcall	.+0      	; 0x1406 <DIO_VidSetPortDirection+0x6>
    1406:	00 d0       	rcall	.+0      	; 0x1408 <DIO_VidSetPortDirection+0x8>
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
    140c:	89 83       	std	Y+1, r24	; 0x01
    140e:	6a 83       	std	Y+2, r22	; 0x02
	

			switch(loc_u8port){
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	28 2f       	mov	r18, r24
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	3c 83       	std	Y+4, r19	; 0x04
    1418:	2b 83       	std	Y+3, r18	; 0x03
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	9c 81       	ldd	r25, Y+4	; 0x04
    141e:	81 30       	cpi	r24, 0x01	; 1
    1420:	91 05       	cpc	r25, r1
    1422:	d1 f0       	breq	.+52     	; 0x1458 <DIO_VidSetPortDirection+0x58>
    1424:	2b 81       	ldd	r18, Y+3	; 0x03
    1426:	3c 81       	ldd	r19, Y+4	; 0x04
    1428:	22 30       	cpi	r18, 0x02	; 2
    142a:	31 05       	cpc	r19, r1
    142c:	2c f4       	brge	.+10     	; 0x1438 <DIO_VidSetPortDirection+0x38>
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	9c 81       	ldd	r25, Y+4	; 0x04
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	61 f0       	breq	.+24     	; 0x144e <DIO_VidSetPortDirection+0x4e>
    1436:	1e c0       	rjmp	.+60     	; 0x1474 <DIO_VidSetPortDirection+0x74>
    1438:	2b 81       	ldd	r18, Y+3	; 0x03
    143a:	3c 81       	ldd	r19, Y+4	; 0x04
    143c:	22 30       	cpi	r18, 0x02	; 2
    143e:	31 05       	cpc	r19, r1
    1440:	81 f0       	breq	.+32     	; 0x1462 <DIO_VidSetPortDirection+0x62>
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	9c 81       	ldd	r25, Y+4	; 0x04
    1446:	83 30       	cpi	r24, 0x03	; 3
    1448:	91 05       	cpc	r25, r1
    144a:	81 f0       	breq	.+32     	; 0x146c <DIO_VidSetPortDirection+0x6c>
    144c:	13 c0       	rjmp	.+38     	; 0x1474 <DIO_VidSetPortDirection+0x74>

			case 0:DDRA=loc_u8value;break;
    144e:	ea e3       	ldi	r30, 0x3A	; 58
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	80 83       	st	Z, r24
    1456:	0e c0       	rjmp	.+28     	; 0x1474 <DIO_VidSetPortDirection+0x74>
			case 1:DDRB=loc_u8value;break;
    1458:	e7 e3       	ldi	r30, 0x37	; 55
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	80 83       	st	Z, r24
    1460:	09 c0       	rjmp	.+18     	; 0x1474 <DIO_VidSetPortDirection+0x74>
			case 2:DDRC=loc_u8value;break;
    1462:	e4 e3       	ldi	r30, 0x34	; 52
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	80 83       	st	Z, r24
    146a:	04 c0       	rjmp	.+8      	; 0x1474 <DIO_VidSetPortDirection+0x74>
			case 3:DDRD=loc_u8value;break;
    146c:	e1 e3       	ldi	r30, 0x31	; 49
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	80 83       	st	Z, r24

			}
		
}
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <DIO_VidSetPortValue>:
void DIO_VidSetPortValue(u8 loc_u8port,u8 loc_u8value){
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	00 d0       	rcall	.+0      	; 0x1488 <DIO_VidSetPortValue+0x6>
    1488:	00 d0       	rcall	.+0      	; 0x148a <DIO_VidSetPortValue+0x8>
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	89 83       	std	Y+1, r24	; 0x01
    1490:	6a 83       	std	Y+2, r22	; 0x02
	
			switch(loc_u8port){
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	3c 83       	std	Y+4, r19	; 0x04
    149a:	2b 83       	std	Y+3, r18	; 0x03
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	9c 81       	ldd	r25, Y+4	; 0x04
    14a0:	81 30       	cpi	r24, 0x01	; 1
    14a2:	91 05       	cpc	r25, r1
    14a4:	d1 f0       	breq	.+52     	; 0x14da <DIO_VidSetPortValue+0x58>
    14a6:	2b 81       	ldd	r18, Y+3	; 0x03
    14a8:	3c 81       	ldd	r19, Y+4	; 0x04
    14aa:	22 30       	cpi	r18, 0x02	; 2
    14ac:	31 05       	cpc	r19, r1
    14ae:	2c f4       	brge	.+10     	; 0x14ba <DIO_VidSetPortValue+0x38>
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	9c 81       	ldd	r25, Y+4	; 0x04
    14b4:	00 97       	sbiw	r24, 0x00	; 0
    14b6:	61 f0       	breq	.+24     	; 0x14d0 <DIO_VidSetPortValue+0x4e>
    14b8:	1e c0       	rjmp	.+60     	; 0x14f6 <DIO_VidSetPortValue+0x74>
    14ba:	2b 81       	ldd	r18, Y+3	; 0x03
    14bc:	3c 81       	ldd	r19, Y+4	; 0x04
    14be:	22 30       	cpi	r18, 0x02	; 2
    14c0:	31 05       	cpc	r19, r1
    14c2:	81 f0       	breq	.+32     	; 0x14e4 <DIO_VidSetPortValue+0x62>
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	9c 81       	ldd	r25, Y+4	; 0x04
    14c8:	83 30       	cpi	r24, 0x03	; 3
    14ca:	91 05       	cpc	r25, r1
    14cc:	81 f0       	breq	.+32     	; 0x14ee <DIO_VidSetPortValue+0x6c>
    14ce:	13 c0       	rjmp	.+38     	; 0x14f6 <DIO_VidSetPortValue+0x74>

			case 0:PORTA=loc_u8value;break;
    14d0:	eb e3       	ldi	r30, 0x3B	; 59
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	80 83       	st	Z, r24
    14d8:	0e c0       	rjmp	.+28     	; 0x14f6 <DIO_VidSetPortValue+0x74>
			case 1:PORTB=loc_u8value;break;
    14da:	e8 e3       	ldi	r30, 0x38	; 56
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	80 83       	st	Z, r24
    14e2:	09 c0       	rjmp	.+18     	; 0x14f6 <DIO_VidSetPortValue+0x74>
			case 2:PORTC=loc_u8value;break;
    14e4:	e5 e3       	ldi	r30, 0x35	; 53
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	80 83       	st	Z, r24
    14ec:	04 c0       	rjmp	.+8      	; 0x14f6 <DIO_VidSetPortValue+0x74>
			case 3:PORTD=loc_u8value;break;
    14ee:	e2 e3       	ldi	r30, 0x32	; 50
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	80 83       	st	Z, r24

			}
	
}
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	cf 91       	pop	r28
    1500:	df 91       	pop	r29
    1502:	08 95       	ret

00001504 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 loc_u8port,u8 loc_u8pin){
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	00 d0       	rcall	.+0      	; 0x150a <DIO_u8GetPinValue+0x6>
    150a:	00 d0       	rcall	.+0      	; 0x150c <DIO_u8GetPinValue+0x8>
    150c:	0f 92       	push	r0
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	8a 83       	std	Y+2, r24	; 0x02
    1514:	6b 83       	std	Y+3, r22	; 0x03
	u8 VALUE;
	switch(loc_u8port){
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	3d 83       	std	Y+5, r19	; 0x05
    151e:	2c 83       	std	Y+4, r18	; 0x04
    1520:	4c 81       	ldd	r20, Y+4	; 0x04
    1522:	5d 81       	ldd	r21, Y+5	; 0x05
    1524:	41 30       	cpi	r20, 0x01	; 1
    1526:	51 05       	cpc	r21, r1
    1528:	41 f1       	breq	.+80     	; 0x157a <DIO_u8GetPinValue+0x76>
    152a:	8c 81       	ldd	r24, Y+4	; 0x04
    152c:	9d 81       	ldd	r25, Y+5	; 0x05
    152e:	82 30       	cpi	r24, 0x02	; 2
    1530:	91 05       	cpc	r25, r1
    1532:	34 f4       	brge	.+12     	; 0x1540 <DIO_u8GetPinValue+0x3c>
    1534:	2c 81       	ldd	r18, Y+4	; 0x04
    1536:	3d 81       	ldd	r19, Y+5	; 0x05
    1538:	21 15       	cp	r18, r1
    153a:	31 05       	cpc	r19, r1
    153c:	61 f0       	breq	.+24     	; 0x1556 <DIO_u8GetPinValue+0x52>
    153e:	52 c0       	rjmp	.+164    	; 0x15e4 <DIO_u8GetPinValue+0xe0>
    1540:	4c 81       	ldd	r20, Y+4	; 0x04
    1542:	5d 81       	ldd	r21, Y+5	; 0x05
    1544:	42 30       	cpi	r20, 0x02	; 2
    1546:	51 05       	cpc	r21, r1
    1548:	51 f1       	breq	.+84     	; 0x159e <DIO_u8GetPinValue+0x9a>
    154a:	8c 81       	ldd	r24, Y+4	; 0x04
    154c:	9d 81       	ldd	r25, Y+5	; 0x05
    154e:	83 30       	cpi	r24, 0x03	; 3
    1550:	91 05       	cpc	r25, r1
    1552:	b9 f1       	breq	.+110    	; 0x15c2 <DIO_u8GetPinValue+0xbe>
    1554:	47 c0       	rjmp	.+142    	; 0x15e4 <DIO_u8GetPinValue+0xe0>
		case 0:VALUE=GET_BIT(PINA,loc_u8pin); break;
    1556:	e9 e3       	ldi	r30, 0x39	; 57
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	88 2f       	mov	r24, r24
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	a9 01       	movw	r20, r18
    1568:	02 c0       	rjmp	.+4      	; 0x156e <DIO_u8GetPinValue+0x6a>
    156a:	55 95       	asr	r21
    156c:	47 95       	ror	r20
    156e:	8a 95       	dec	r24
    1570:	e2 f7       	brpl	.-8      	; 0x156a <DIO_u8GetPinValue+0x66>
    1572:	ca 01       	movw	r24, r20
    1574:	81 70       	andi	r24, 0x01	; 1
    1576:	89 83       	std	Y+1, r24	; 0x01
    1578:	35 c0       	rjmp	.+106    	; 0x15e4 <DIO_u8GetPinValue+0xe0>
		case 1:VALUE=GET_BIT(PINB,loc_u8pin); break;
    157a:	e6 e3       	ldi	r30, 0x36	; 54
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	88 2f       	mov	r24, r24
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	a9 01       	movw	r20, r18
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <DIO_u8GetPinValue+0x8e>
    158e:	55 95       	asr	r21
    1590:	47 95       	ror	r20
    1592:	8a 95       	dec	r24
    1594:	e2 f7       	brpl	.-8      	; 0x158e <DIO_u8GetPinValue+0x8a>
    1596:	ca 01       	movw	r24, r20
    1598:	81 70       	andi	r24, 0x01	; 1
    159a:	89 83       	std	Y+1, r24	; 0x01
    159c:	23 c0       	rjmp	.+70     	; 0x15e4 <DIO_u8GetPinValue+0xe0>
		case 2:VALUE=GET_BIT(PINC,loc_u8pin); break;
    159e:	e3 e3       	ldi	r30, 0x33	; 51
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	88 2f       	mov	r24, r24
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	a9 01       	movw	r20, r18
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <DIO_u8GetPinValue+0xb2>
    15b2:	55 95       	asr	r21
    15b4:	47 95       	ror	r20
    15b6:	8a 95       	dec	r24
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <DIO_u8GetPinValue+0xae>
    15ba:	ca 01       	movw	r24, r20
    15bc:	81 70       	andi	r24, 0x01	; 1
    15be:	89 83       	std	Y+1, r24	; 0x01
    15c0:	11 c0       	rjmp	.+34     	; 0x15e4 <DIO_u8GetPinValue+0xe0>
		case 3:VALUE=GET_BIT(PIND,loc_u8pin); break;
    15c2:	e0 e3       	ldi	r30, 0x30	; 48
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	88 2f       	mov	r24, r24
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	a9 01       	movw	r20, r18
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <DIO_u8GetPinValue+0xd6>
    15d6:	55 95       	asr	r21
    15d8:	47 95       	ror	r20
    15da:	8a 95       	dec	r24
    15dc:	e2 f7       	brpl	.-8      	; 0x15d6 <DIO_u8GetPinValue+0xd2>
    15de:	ca 01       	movw	r24, r20
    15e0:	81 70       	andi	r24, 0x01	; 1
    15e2:	89 83       	std	Y+1, r24	; 0x01
	 }
	 return VALUE;
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <GIE_VidEnable>:
#include "GIE_interface.h"
#include "GIE_register.h"



void GIE_VidEnable(void){
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
	
  SET_BIT(SREG,PIN7); 
    15fe:	af e5       	ldi	r26, 0x5F	; 95
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	ef e5       	ldi	r30, 0x5F	; 95
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	80 68       	ori	r24, 0x80	; 128
    160a:	8c 93       	st	X, r24
}
    160c:	cf 91       	pop	r28
    160e:	df 91       	pop	r29
    1610:	08 95       	ret

00001612 <GIE_VidDisable>:
void GIE_VidDisable(void){
    1612:	df 93       	push	r29
    1614:	cf 93       	push	r28
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,PIN7);
    161a:	af e5       	ldi	r26, 0x5F	; 95
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	ef e5       	ldi	r30, 0x5F	; 95
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	8f 77       	andi	r24, 0x7F	; 127
    1626:	8c 93       	st	X, r24
}
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	08 95       	ret

0000162e <LCD_VidInit>:
#include "DIO_interface.h"
#include "LCD_interface.h"
/*u8 loc_u8DataPort=the port that connected from D0 to D7
u8   loc_u8ControlPort=the port that connected to RS&RW&EN
*/
void LCD_VidInit(u8 loc_u8DataPort,u8 loc_u8ControlPort){
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	ea 97       	sbiw	r28, 0x3a	; 58
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	f8 94       	cli
    163c:	de bf       	out	0x3e, r29	; 62
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	cd bf       	out	0x3d, r28	; 61
    1642:	89 af       	std	Y+57, r24	; 0x39
    1644:	6a af       	std	Y+58, r22	; 0x3a
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	a8 e4       	ldi	r26, 0x48	; 72
    164c:	b2 e4       	ldi	r27, 0x42	; 66
    164e:	8d ab       	std	Y+53, r24	; 0x35
    1650:	9e ab       	std	Y+54, r25	; 0x36
    1652:	af ab       	std	Y+55, r26	; 0x37
    1654:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1656:	6d a9       	ldd	r22, Y+53	; 0x35
    1658:	7e a9       	ldd	r23, Y+54	; 0x36
    165a:	8f a9       	ldd	r24, Y+55	; 0x37
    165c:	98 ad       	ldd	r25, Y+56	; 0x38
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	4a ef       	ldi	r20, 0xFA	; 250
    1664:	54 e4       	ldi	r21, 0x44	; 68
    1666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    166a:	dc 01       	movw	r26, r24
    166c:	cb 01       	movw	r24, r22
    166e:	89 ab       	std	Y+49, r24	; 0x31
    1670:	9a ab       	std	Y+50, r25	; 0x32
    1672:	ab ab       	std	Y+51, r26	; 0x33
    1674:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1676:	69 a9       	ldd	r22, Y+49	; 0x31
    1678:	7a a9       	ldd	r23, Y+50	; 0x32
    167a:	8b a9       	ldd	r24, Y+51	; 0x33
    167c:	9c a9       	ldd	r25, Y+52	; 0x34
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	40 e8       	ldi	r20, 0x80	; 128
    1684:	5f e3       	ldi	r21, 0x3F	; 63
    1686:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    168a:	88 23       	and	r24, r24
    168c:	2c f4       	brge	.+10     	; 0x1698 <LCD_VidInit+0x6a>
		__ticks = 1;
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	98 ab       	std	Y+48, r25	; 0x30
    1694:	8f a7       	std	Y+47, r24	; 0x2f
    1696:	3f c0       	rjmp	.+126    	; 0x1716 <LCD_VidInit+0xe8>
	else if (__tmp > 65535)
    1698:	69 a9       	ldd	r22, Y+49	; 0x31
    169a:	7a a9       	ldd	r23, Y+50	; 0x32
    169c:	8b a9       	ldd	r24, Y+51	; 0x33
    169e:	9c a9       	ldd	r25, Y+52	; 0x34
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	3f ef       	ldi	r19, 0xFF	; 255
    16a4:	4f e7       	ldi	r20, 0x7F	; 127
    16a6:	57 e4       	ldi	r21, 0x47	; 71
    16a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16ac:	18 16       	cp	r1, r24
    16ae:	4c f5       	brge	.+82     	; 0x1702 <LCD_VidInit+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16b0:	6d a9       	ldd	r22, Y+53	; 0x35
    16b2:	7e a9       	ldd	r23, Y+54	; 0x36
    16b4:	8f a9       	ldd	r24, Y+55	; 0x37
    16b6:	98 ad       	ldd	r25, Y+56	; 0x38
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	40 e2       	ldi	r20, 0x20	; 32
    16be:	51 e4       	ldi	r21, 0x41	; 65
    16c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	bc 01       	movw	r22, r24
    16ca:	cd 01       	movw	r24, r26
    16cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	98 ab       	std	Y+48, r25	; 0x30
    16d6:	8f a7       	std	Y+47, r24	; 0x2f
    16d8:	0f c0       	rjmp	.+30     	; 0x16f8 <LCD_VidInit+0xca>
    16da:	88 ec       	ldi	r24, 0xC8	; 200
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	9e a7       	std	Y+46, r25	; 0x2e
    16e0:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    16e4:	9e a5       	ldd	r25, Y+46	; 0x2e
    16e6:	01 97       	sbiw	r24, 0x01	; 1
    16e8:	f1 f7       	brne	.-4      	; 0x16e6 <LCD_VidInit+0xb8>
    16ea:	9e a7       	std	Y+46, r25	; 0x2e
    16ec:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    16f0:	98 a9       	ldd	r25, Y+48	; 0x30
    16f2:	01 97       	sbiw	r24, 0x01	; 1
    16f4:	98 ab       	std	Y+48, r25	; 0x30
    16f6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    16fa:	98 a9       	ldd	r25, Y+48	; 0x30
    16fc:	00 97       	sbiw	r24, 0x00	; 0
    16fe:	69 f7       	brne	.-38     	; 0x16da <LCD_VidInit+0xac>
    1700:	14 c0       	rjmp	.+40     	; 0x172a <LCD_VidInit+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1702:	69 a9       	ldd	r22, Y+49	; 0x31
    1704:	7a a9       	ldd	r23, Y+50	; 0x32
    1706:	8b a9       	ldd	r24, Y+51	; 0x33
    1708:	9c a9       	ldd	r25, Y+52	; 0x34
    170a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	98 ab       	std	Y+48, r25	; 0x30
    1714:	8f a7       	std	Y+47, r24	; 0x2f
    1716:	8f a5       	ldd	r24, Y+47	; 0x2f
    1718:	98 a9       	ldd	r25, Y+48	; 0x30
    171a:	9c a7       	std	Y+44, r25	; 0x2c
    171c:	8b a7       	std	Y+43, r24	; 0x2b
    171e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1720:	9c a5       	ldd	r25, Y+44	; 0x2c
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	f1 f7       	brne	.-4      	; 0x1722 <LCD_VidInit+0xf4>
    1726:	9c a7       	std	Y+44, r25	; 0x2c
    1728:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	DIO_VidSetPortDirection(loc_u8DataPort,255);
    172a:	89 ad       	ldd	r24, Y+57	; 0x39
    172c:	6f ef       	ldi	r22, 0xFF	; 255
    172e:	0e 94 00 0a 	call	0x1400	; 0x1400 <DIO_VidSetPortDirection>
	DIO_VidSetPortDirection(loc_u8ControlPort,0b00000111);
    1732:	8a ad       	ldd	r24, Y+58	; 0x3a
    1734:	67 e0       	ldi	r22, 0x07	; 7
    1736:	0e 94 00 0a 	call	0x1400	; 0x1400 <DIO_VidSetPortDirection>
	
	 LCD_VidWriteCommand(loc_u8DataPort,loc_u8ControlPort,FUNCTION_SET);    //function set  //
    173a:	89 ad       	ldd	r24, Y+57	; 0x39
    173c:	6a ad       	ldd	r22, Y+58	; 0x3a
    173e:	48 e3       	ldi	r20, 0x38	; 56
    1740:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LCD_VidWriteCommand>
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	a0 e8       	ldi	r26, 0x80	; 128
    174a:	bf e3       	ldi	r27, 0x3F	; 63
    174c:	8f a3       	std	Y+39, r24	; 0x27
    174e:	98 a7       	std	Y+40, r25	; 0x28
    1750:	a9 a7       	std	Y+41, r26	; 0x29
    1752:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1754:	6f a1       	ldd	r22, Y+39	; 0x27
    1756:	78 a5       	ldd	r23, Y+40	; 0x28
    1758:	89 a5       	ldd	r24, Y+41	; 0x29
    175a:	9a a5       	ldd	r25, Y+42	; 0x2a
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	4a ef       	ldi	r20, 0xFA	; 250
    1762:	54 e4       	ldi	r21, 0x44	; 68
    1764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1768:	dc 01       	movw	r26, r24
    176a:	cb 01       	movw	r24, r22
    176c:	8b a3       	std	Y+35, r24	; 0x23
    176e:	9c a3       	std	Y+36, r25	; 0x24
    1770:	ad a3       	std	Y+37, r26	; 0x25
    1772:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1774:	6b a1       	ldd	r22, Y+35	; 0x23
    1776:	7c a1       	ldd	r23, Y+36	; 0x24
    1778:	8d a1       	ldd	r24, Y+37	; 0x25
    177a:	9e a1       	ldd	r25, Y+38	; 0x26
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	40 e8       	ldi	r20, 0x80	; 128
    1782:	5f e3       	ldi	r21, 0x3F	; 63
    1784:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1788:	88 23       	and	r24, r24
    178a:	2c f4       	brge	.+10     	; 0x1796 <LCD_VidInit+0x168>
		__ticks = 1;
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	9a a3       	std	Y+34, r25	; 0x22
    1792:	89 a3       	std	Y+33, r24	; 0x21
    1794:	3f c0       	rjmp	.+126    	; 0x1814 <LCD_VidInit+0x1e6>
	else if (__tmp > 65535)
    1796:	6b a1       	ldd	r22, Y+35	; 0x23
    1798:	7c a1       	ldd	r23, Y+36	; 0x24
    179a:	8d a1       	ldd	r24, Y+37	; 0x25
    179c:	9e a1       	ldd	r25, Y+38	; 0x26
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	3f ef       	ldi	r19, 0xFF	; 255
    17a2:	4f e7       	ldi	r20, 0x7F	; 127
    17a4:	57 e4       	ldi	r21, 0x47	; 71
    17a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17aa:	18 16       	cp	r1, r24
    17ac:	4c f5       	brge	.+82     	; 0x1800 <LCD_VidInit+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ae:	6f a1       	ldd	r22, Y+39	; 0x27
    17b0:	78 a5       	ldd	r23, Y+40	; 0x28
    17b2:	89 a5       	ldd	r24, Y+41	; 0x29
    17b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	40 e2       	ldi	r20, 0x20	; 32
    17bc:	51 e4       	ldi	r21, 0x41	; 65
    17be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c2:	dc 01       	movw	r26, r24
    17c4:	cb 01       	movw	r24, r22
    17c6:	bc 01       	movw	r22, r24
    17c8:	cd 01       	movw	r24, r26
    17ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ce:	dc 01       	movw	r26, r24
    17d0:	cb 01       	movw	r24, r22
    17d2:	9a a3       	std	Y+34, r25	; 0x22
    17d4:	89 a3       	std	Y+33, r24	; 0x21
    17d6:	0f c0       	rjmp	.+30     	; 0x17f6 <LCD_VidInit+0x1c8>
    17d8:	88 ec       	ldi	r24, 0xC8	; 200
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	98 a3       	std	Y+32, r25	; 0x20
    17de:	8f 8f       	std	Y+31, r24	; 0x1f
    17e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17e2:	98 a1       	ldd	r25, Y+32	; 0x20
    17e4:	01 97       	sbiw	r24, 0x01	; 1
    17e6:	f1 f7       	brne	.-4      	; 0x17e4 <LCD_VidInit+0x1b6>
    17e8:	98 a3       	std	Y+32, r25	; 0x20
    17ea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ec:	89 a1       	ldd	r24, Y+33	; 0x21
    17ee:	9a a1       	ldd	r25, Y+34	; 0x22
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	9a a3       	std	Y+34, r25	; 0x22
    17f4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f6:	89 a1       	ldd	r24, Y+33	; 0x21
    17f8:	9a a1       	ldd	r25, Y+34	; 0x22
    17fa:	00 97       	sbiw	r24, 0x00	; 0
    17fc:	69 f7       	brne	.-38     	; 0x17d8 <LCD_VidInit+0x1aa>
    17fe:	14 c0       	rjmp	.+40     	; 0x1828 <LCD_VidInit+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1800:	6b a1       	ldd	r22, Y+35	; 0x23
    1802:	7c a1       	ldd	r23, Y+36	; 0x24
    1804:	8d a1       	ldd	r24, Y+37	; 0x25
    1806:	9e a1       	ldd	r25, Y+38	; 0x26
    1808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	9a a3       	std	Y+34, r25	; 0x22
    1812:	89 a3       	std	Y+33, r24	; 0x21
    1814:	89 a1       	ldd	r24, Y+33	; 0x21
    1816:	9a a1       	ldd	r25, Y+34	; 0x22
    1818:	9e 8f       	std	Y+30, r25	; 0x1e
    181a:	8d 8f       	std	Y+29, r24	; 0x1d
    181c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    181e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	f1 f7       	brne	.-4      	; 0x1820 <LCD_VidInit+0x1f2>
    1824:	9e 8f       	std	Y+30, r25	; 0x1e
    1826:	8d 8f       	std	Y+29, r24	; 0x1d
     _delay_ms(1);
	 LCD_VidWriteCommand(loc_u8DataPort,loc_u8ControlPort,DISPLAY_ON);    //display on    //
    1828:	89 ad       	ldd	r24, Y+57	; 0x39
    182a:	6a ad       	ldd	r22, Y+58	; 0x3a
    182c:	4c e0       	ldi	r20, 0x0C	; 12
    182e:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LCD_VidWriteCommand>
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	a0 e8       	ldi	r26, 0x80	; 128
    1838:	bf e3       	ldi	r27, 0x3F	; 63
    183a:	89 8f       	std	Y+25, r24	; 0x19
    183c:	9a 8f       	std	Y+26, r25	; 0x1a
    183e:	ab 8f       	std	Y+27, r26	; 0x1b
    1840:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1842:	69 8d       	ldd	r22, Y+25	; 0x19
    1844:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1846:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1848:	9c 8d       	ldd	r25, Y+28	; 0x1c
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	4a ef       	ldi	r20, 0xFA	; 250
    1850:	54 e4       	ldi	r21, 0x44	; 68
    1852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	8d 8b       	std	Y+21, r24	; 0x15
    185c:	9e 8b       	std	Y+22, r25	; 0x16
    185e:	af 8b       	std	Y+23, r26	; 0x17
    1860:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1862:	6d 89       	ldd	r22, Y+21	; 0x15
    1864:	7e 89       	ldd	r23, Y+22	; 0x16
    1866:	8f 89       	ldd	r24, Y+23	; 0x17
    1868:	98 8d       	ldd	r25, Y+24	; 0x18
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e8       	ldi	r20, 0x80	; 128
    1870:	5f e3       	ldi	r21, 0x3F	; 63
    1872:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1876:	88 23       	and	r24, r24
    1878:	2c f4       	brge	.+10     	; 0x1884 <LCD_VidInit+0x256>
		__ticks = 1;
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	9c 8b       	std	Y+20, r25	; 0x14
    1880:	8b 8b       	std	Y+19, r24	; 0x13
    1882:	3f c0       	rjmp	.+126    	; 0x1902 <LCD_VidInit+0x2d4>
	else if (__tmp > 65535)
    1884:	6d 89       	ldd	r22, Y+21	; 0x15
    1886:	7e 89       	ldd	r23, Y+22	; 0x16
    1888:	8f 89       	ldd	r24, Y+23	; 0x17
    188a:	98 8d       	ldd	r25, Y+24	; 0x18
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	3f ef       	ldi	r19, 0xFF	; 255
    1890:	4f e7       	ldi	r20, 0x7F	; 127
    1892:	57 e4       	ldi	r21, 0x47	; 71
    1894:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1898:	18 16       	cp	r1, r24
    189a:	4c f5       	brge	.+82     	; 0x18ee <LCD_VidInit+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189c:	69 8d       	ldd	r22, Y+25	; 0x19
    189e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	40 e2       	ldi	r20, 0x20	; 32
    18aa:	51 e4       	ldi	r21, 0x41	; 65
    18ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	bc 01       	movw	r22, r24
    18b6:	cd 01       	movw	r24, r26
    18b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	9c 8b       	std	Y+20, r25	; 0x14
    18c2:	8b 8b       	std	Y+19, r24	; 0x13
    18c4:	0f c0       	rjmp	.+30     	; 0x18e4 <LCD_VidInit+0x2b6>
    18c6:	88 ec       	ldi	r24, 0xC8	; 200
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	9a 8b       	std	Y+18, r25	; 0x12
    18cc:	89 8b       	std	Y+17, r24	; 0x11
    18ce:	89 89       	ldd	r24, Y+17	; 0x11
    18d0:	9a 89       	ldd	r25, Y+18	; 0x12
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <LCD_VidInit+0x2a4>
    18d6:	9a 8b       	std	Y+18, r25	; 0x12
    18d8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18da:	8b 89       	ldd	r24, Y+19	; 0x13
    18dc:	9c 89       	ldd	r25, Y+20	; 0x14
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	9c 8b       	std	Y+20, r25	; 0x14
    18e2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e4:	8b 89       	ldd	r24, Y+19	; 0x13
    18e6:	9c 89       	ldd	r25, Y+20	; 0x14
    18e8:	00 97       	sbiw	r24, 0x00	; 0
    18ea:	69 f7       	brne	.-38     	; 0x18c6 <LCD_VidInit+0x298>
    18ec:	14 c0       	rjmp	.+40     	; 0x1916 <LCD_VidInit+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ee:	6d 89       	ldd	r22, Y+21	; 0x15
    18f0:	7e 89       	ldd	r23, Y+22	; 0x16
    18f2:	8f 89       	ldd	r24, Y+23	; 0x17
    18f4:	98 8d       	ldd	r25, Y+24	; 0x18
    18f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	9c 8b       	std	Y+20, r25	; 0x14
    1900:	8b 8b       	std	Y+19, r24	; 0x13
    1902:	8b 89       	ldd	r24, Y+19	; 0x13
    1904:	9c 89       	ldd	r25, Y+20	; 0x14
    1906:	98 8b       	std	Y+16, r25	; 0x10
    1908:	8f 87       	std	Y+15, r24	; 0x0f
    190a:	8f 85       	ldd	r24, Y+15	; 0x0f
    190c:	98 89       	ldd	r25, Y+16	; 0x10
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	f1 f7       	brne	.-4      	; 0x190e <LCD_VidInit+0x2e0>
    1912:	98 8b       	std	Y+16, r25	; 0x10
    1914:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(1);
	 LCD_VidWriteCommand(loc_u8DataPort,loc_u8ControlPort,CLR );        //clear display //
    1916:	89 ad       	ldd	r24, Y+57	; 0x39
    1918:	6a ad       	ldd	r22, Y+58	; 0x3a
    191a:	41 e0       	ldi	r20, 0x01	; 1
    191c:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LCD_VidWriteCommand>
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	a0 e0       	ldi	r26, 0x00	; 0
    1926:	b0 e4       	ldi	r27, 0x40	; 64
    1928:	8b 87       	std	Y+11, r24	; 0x0b
    192a:	9c 87       	std	Y+12, r25	; 0x0c
    192c:	ad 87       	std	Y+13, r26	; 0x0d
    192e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1930:	6b 85       	ldd	r22, Y+11	; 0x0b
    1932:	7c 85       	ldd	r23, Y+12	; 0x0c
    1934:	8d 85       	ldd	r24, Y+13	; 0x0d
    1936:	9e 85       	ldd	r25, Y+14	; 0x0e
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	4a ef       	ldi	r20, 0xFA	; 250
    193e:	54 e4       	ldi	r21, 0x44	; 68
    1940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	8f 83       	std	Y+7, r24	; 0x07
    194a:	98 87       	std	Y+8, r25	; 0x08
    194c:	a9 87       	std	Y+9, r26	; 0x09
    194e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1950:	6f 81       	ldd	r22, Y+7	; 0x07
    1952:	78 85       	ldd	r23, Y+8	; 0x08
    1954:	89 85       	ldd	r24, Y+9	; 0x09
    1956:	9a 85       	ldd	r25, Y+10	; 0x0a
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	40 e8       	ldi	r20, 0x80	; 128
    195e:	5f e3       	ldi	r21, 0x3F	; 63
    1960:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1964:	88 23       	and	r24, r24
    1966:	2c f4       	brge	.+10     	; 0x1972 <LCD_VidInit+0x344>
		__ticks = 1;
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	9e 83       	std	Y+6, r25	; 0x06
    196e:	8d 83       	std	Y+5, r24	; 0x05
    1970:	3f c0       	rjmp	.+126    	; 0x19f0 <LCD_VidInit+0x3c2>
	else if (__tmp > 65535)
    1972:	6f 81       	ldd	r22, Y+7	; 0x07
    1974:	78 85       	ldd	r23, Y+8	; 0x08
    1976:	89 85       	ldd	r24, Y+9	; 0x09
    1978:	9a 85       	ldd	r25, Y+10	; 0x0a
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	3f ef       	ldi	r19, 0xFF	; 255
    197e:	4f e7       	ldi	r20, 0x7F	; 127
    1980:	57 e4       	ldi	r21, 0x47	; 71
    1982:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1986:	18 16       	cp	r1, r24
    1988:	4c f5       	brge	.+82     	; 0x19dc <LCD_VidInit+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    198a:	6b 85       	ldd	r22, Y+11	; 0x0b
    198c:	7c 85       	ldd	r23, Y+12	; 0x0c
    198e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1990:	9e 85       	ldd	r25, Y+14	; 0x0e
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	40 e2       	ldi	r20, 0x20	; 32
    1998:	51 e4       	ldi	r21, 0x41	; 65
    199a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	bc 01       	movw	r22, r24
    19a4:	cd 01       	movw	r24, r26
    19a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	9e 83       	std	Y+6, r25	; 0x06
    19b0:	8d 83       	std	Y+5, r24	; 0x05
    19b2:	0f c0       	rjmp	.+30     	; 0x19d2 <LCD_VidInit+0x3a4>
    19b4:	88 ec       	ldi	r24, 0xC8	; 200
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	9c 83       	std	Y+4, r25	; 0x04
    19ba:	8b 83       	std	Y+3, r24	; 0x03
    19bc:	8b 81       	ldd	r24, Y+3	; 0x03
    19be:	9c 81       	ldd	r25, Y+4	; 0x04
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	f1 f7       	brne	.-4      	; 0x19c0 <LCD_VidInit+0x392>
    19c4:	9c 83       	std	Y+4, r25	; 0x04
    19c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ca:	9e 81       	ldd	r25, Y+6	; 0x06
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	9e 83       	std	Y+6, r25	; 0x06
    19d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d2:	8d 81       	ldd	r24, Y+5	; 0x05
    19d4:	9e 81       	ldd	r25, Y+6	; 0x06
    19d6:	00 97       	sbiw	r24, 0x00	; 0
    19d8:	69 f7       	brne	.-38     	; 0x19b4 <LCD_VidInit+0x386>
    19da:	14 c0       	rjmp	.+40     	; 0x1a04 <LCD_VidInit+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19dc:	6f 81       	ldd	r22, Y+7	; 0x07
    19de:	78 85       	ldd	r23, Y+8	; 0x08
    19e0:	89 85       	ldd	r24, Y+9	; 0x09
    19e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	9e 83       	std	Y+6, r25	; 0x06
    19ee:	8d 83       	std	Y+5, r24	; 0x05
    19f0:	8d 81       	ldd	r24, Y+5	; 0x05
    19f2:	9e 81       	ldd	r25, Y+6	; 0x06
    19f4:	9a 83       	std	Y+2, r25	; 0x02
    19f6:	89 83       	std	Y+1, r24	; 0x01
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
    19fa:	9a 81       	ldd	r25, Y+2	; 0x02
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	f1 f7       	brne	.-4      	; 0x19fc <LCD_VidInit+0x3ce>
    1a00:	9a 83       	std	Y+2, r25	; 0x02
    1a02:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(2);
	 
}
    1a04:	ea 96       	adiw	r28, 0x3a	; 58
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	f8 94       	cli
    1a0a:	de bf       	out	0x3e, r29	; 62
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	cd bf       	out	0x3d, r28	; 61
    1a10:	cf 91       	pop	r28
    1a12:	df 91       	pop	r29
    1a14:	08 95       	ret

00001a16 <LCD_VidWriteCommand>:
/*

loc_u8DataPort=the port that connected from D0 to D7
loc_u8ControlPort=the port that connected to RS&RW&EN
*/
void LCD_VidWriteCommand(u8 loc_u8DataPort,u8 loc_u8ControlPort,u8 loc_u8command){
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
    1a1e:	6f 97       	sbiw	r28, 0x1f	; 31
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	f8 94       	cli
    1a24:	de bf       	out	0x3e, r29	; 62
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	cd bf       	out	0x3d, r28	; 61
    1a2a:	8d 8f       	std	Y+29, r24	; 0x1d
    1a2c:	6e 8f       	std	Y+30, r22	; 0x1e
    1a2e:	4f 8f       	std	Y+31, r20	; 0x1f
	
	DIO_VidSetPinValue(loc_u8ControlPort,PIN0,LOW); //make the RS in command mode//
    1a30:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a32:	60 e0       	ldi	r22, 0x00	; 0
    1a34:	40 e0       	ldi	r20, 0x00	; 0
    1a36:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_VidSetPinValue>
    DIO_VidSetPinValue(loc_u8ControlPort,PIN1,LOW);//make the RW in write mode//
    1a3a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a3c:	61 e0       	ldi	r22, 0x01	; 1
    1a3e:	40 e0       	ldi	r20, 0x00	; 0
    1a40:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_VidSetPinValue>
    DIO_VidSetPortValue(loc_u8DataPort,loc_u8command);//take the data from D0 to D7//
    1a44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a46:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a48:	0e 94 41 0a 	call	0x1482	; 0x1482 <DIO_VidSetPortValue>
	
	
    DIO_VidSetPinValue(loc_u8ControlPort,PIN2,HIGH); // EN raising edge//
    1a4c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a4e:	62 e0       	ldi	r22, 0x02	; 2
    1a50:	41 e0       	ldi	r20, 0x01	; 1
    1a52:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_VidSetPinValue>
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	a0 e8       	ldi	r26, 0x80	; 128
    1a5c:	bf e3       	ldi	r27, 0x3F	; 63
    1a5e:	89 8f       	std	Y+25, r24	; 0x19
    1a60:	9a 8f       	std	Y+26, r25	; 0x1a
    1a62:	ab 8f       	std	Y+27, r26	; 0x1b
    1a64:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a66:	69 8d       	ldd	r22, Y+25	; 0x19
    1a68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	4a ef       	ldi	r20, 0xFA	; 250
    1a74:	54 e4       	ldi	r21, 0x44	; 68
    1a76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	8d 8b       	std	Y+21, r24	; 0x15
    1a80:	9e 8b       	std	Y+22, r25	; 0x16
    1a82:	af 8b       	std	Y+23, r26	; 0x17
    1a84:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a86:	6d 89       	ldd	r22, Y+21	; 0x15
    1a88:	7e 89       	ldd	r23, Y+22	; 0x16
    1a8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	40 e8       	ldi	r20, 0x80	; 128
    1a94:	5f e3       	ldi	r21, 0x3F	; 63
    1a96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a9a:	88 23       	and	r24, r24
    1a9c:	2c f4       	brge	.+10     	; 0x1aa8 <LCD_VidWriteCommand+0x92>
		__ticks = 1;
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	9c 8b       	std	Y+20, r25	; 0x14
    1aa4:	8b 8b       	std	Y+19, r24	; 0x13
    1aa6:	3f c0       	rjmp	.+126    	; 0x1b26 <LCD_VidWriteCommand+0x110>
	else if (__tmp > 65535)
    1aa8:	6d 89       	ldd	r22, Y+21	; 0x15
    1aaa:	7e 89       	ldd	r23, Y+22	; 0x16
    1aac:	8f 89       	ldd	r24, Y+23	; 0x17
    1aae:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	3f ef       	ldi	r19, 0xFF	; 255
    1ab4:	4f e7       	ldi	r20, 0x7F	; 127
    1ab6:	57 e4       	ldi	r21, 0x47	; 71
    1ab8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1abc:	18 16       	cp	r1, r24
    1abe:	4c f5       	brge	.+82     	; 0x1b12 <LCD_VidWriteCommand+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ac2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ac4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ac6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	40 e2       	ldi	r20, 0x20	; 32
    1ace:	51 e4       	ldi	r21, 0x41	; 65
    1ad0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	bc 01       	movw	r22, r24
    1ada:	cd 01       	movw	r24, r26
    1adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	9c 8b       	std	Y+20, r25	; 0x14
    1ae6:	8b 8b       	std	Y+19, r24	; 0x13
    1ae8:	0f c0       	rjmp	.+30     	; 0x1b08 <LCD_VidWriteCommand+0xf2>
    1aea:	88 ec       	ldi	r24, 0xC8	; 200
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	9a 8b       	std	Y+18, r25	; 0x12
    1af0:	89 8b       	std	Y+17, r24	; 0x11
    1af2:	89 89       	ldd	r24, Y+17	; 0x11
    1af4:	9a 89       	ldd	r25, Y+18	; 0x12
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	f1 f7       	brne	.-4      	; 0x1af6 <LCD_VidWriteCommand+0xe0>
    1afa:	9a 8b       	std	Y+18, r25	; 0x12
    1afc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afe:	8b 89       	ldd	r24, Y+19	; 0x13
    1b00:	9c 89       	ldd	r25, Y+20	; 0x14
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	9c 8b       	std	Y+20, r25	; 0x14
    1b06:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b08:	8b 89       	ldd	r24, Y+19	; 0x13
    1b0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	69 f7       	brne	.-38     	; 0x1aea <LCD_VidWriteCommand+0xd4>
    1b10:	14 c0       	rjmp	.+40     	; 0x1b3a <LCD_VidWriteCommand+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b12:	6d 89       	ldd	r22, Y+21	; 0x15
    1b14:	7e 89       	ldd	r23, Y+22	; 0x16
    1b16:	8f 89       	ldd	r24, Y+23	; 0x17
    1b18:	98 8d       	ldd	r25, Y+24	; 0x18
    1b1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	9c 8b       	std	Y+20, r25	; 0x14
    1b24:	8b 8b       	std	Y+19, r24	; 0x13
    1b26:	8b 89       	ldd	r24, Y+19	; 0x13
    1b28:	9c 89       	ldd	r25, Y+20	; 0x14
    1b2a:	98 8b       	std	Y+16, r25	; 0x10
    1b2c:	8f 87       	std	Y+15, r24	; 0x0f
    1b2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b30:	98 89       	ldd	r25, Y+16	; 0x10
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <LCD_VidWriteCommand+0x11c>
    1b36:	98 8b       	std	Y+16, r25	; 0x10
    1b38:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
    DIO_VidSetPinValue(loc_u8ControlPort,PIN2,LOW);// EN falling edge//
    1b3a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b3c:	62 e0       	ldi	r22, 0x02	; 2
    1b3e:	40 e0       	ldi	r20, 0x00	; 0
    1b40:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_VidSetPinValue>
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	a0 e8       	ldi	r26, 0x80	; 128
    1b4a:	bf e3       	ldi	r27, 0x3F	; 63
    1b4c:	8b 87       	std	Y+11, r24	; 0x0b
    1b4e:	9c 87       	std	Y+12, r25	; 0x0c
    1b50:	ad 87       	std	Y+13, r26	; 0x0d
    1b52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b54:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b56:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	4a ef       	ldi	r20, 0xFA	; 250
    1b62:	54 e4       	ldi	r21, 0x44	; 68
    1b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	8f 83       	std	Y+7, r24	; 0x07
    1b6e:	98 87       	std	Y+8, r25	; 0x08
    1b70:	a9 87       	std	Y+9, r26	; 0x09
    1b72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b74:	6f 81       	ldd	r22, Y+7	; 0x07
    1b76:	78 85       	ldd	r23, Y+8	; 0x08
    1b78:	89 85       	ldd	r24, Y+9	; 0x09
    1b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	40 e8       	ldi	r20, 0x80	; 128
    1b82:	5f e3       	ldi	r21, 0x3F	; 63
    1b84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b88:	88 23       	and	r24, r24
    1b8a:	2c f4       	brge	.+10     	; 0x1b96 <LCD_VidWriteCommand+0x180>
		__ticks = 1;
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	9e 83       	std	Y+6, r25	; 0x06
    1b92:	8d 83       	std	Y+5, r24	; 0x05
    1b94:	3f c0       	rjmp	.+126    	; 0x1c14 <LCD_VidWriteCommand+0x1fe>
	else if (__tmp > 65535)
    1b96:	6f 81       	ldd	r22, Y+7	; 0x07
    1b98:	78 85       	ldd	r23, Y+8	; 0x08
    1b9a:	89 85       	ldd	r24, Y+9	; 0x09
    1b9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	3f ef       	ldi	r19, 0xFF	; 255
    1ba2:	4f e7       	ldi	r20, 0x7F	; 127
    1ba4:	57 e4       	ldi	r21, 0x47	; 71
    1ba6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1baa:	18 16       	cp	r1, r24
    1bac:	4c f5       	brge	.+82     	; 0x1c00 <LCD_VidWriteCommand+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	40 e2       	ldi	r20, 0x20	; 32
    1bbc:	51 e4       	ldi	r21, 0x41	; 65
    1bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	bc 01       	movw	r22, r24
    1bc8:	cd 01       	movw	r24, r26
    1bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	9e 83       	std	Y+6, r25	; 0x06
    1bd4:	8d 83       	std	Y+5, r24	; 0x05
    1bd6:	0f c0       	rjmp	.+30     	; 0x1bf6 <LCD_VidWriteCommand+0x1e0>
    1bd8:	88 ec       	ldi	r24, 0xC8	; 200
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	9c 83       	std	Y+4, r25	; 0x04
    1bde:	8b 83       	std	Y+3, r24	; 0x03
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	9c 81       	ldd	r25, Y+4	; 0x04
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <LCD_VidWriteCommand+0x1ce>
    1be8:	9c 83       	std	Y+4, r25	; 0x04
    1bea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bec:	8d 81       	ldd	r24, Y+5	; 0x05
    1bee:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	9e 83       	std	Y+6, r25	; 0x06
    1bf4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfa:	00 97       	sbiw	r24, 0x00	; 0
    1bfc:	69 f7       	brne	.-38     	; 0x1bd8 <LCD_VidWriteCommand+0x1c2>
    1bfe:	14 c0       	rjmp	.+40     	; 0x1c28 <LCD_VidWriteCommand+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c00:	6f 81       	ldd	r22, Y+7	; 0x07
    1c02:	78 85       	ldd	r23, Y+8	; 0x08
    1c04:	89 85       	ldd	r24, Y+9	; 0x09
    1c06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	9e 83       	std	Y+6, r25	; 0x06
    1c12:	8d 83       	std	Y+5, r24	; 0x05
    1c14:	8d 81       	ldd	r24, Y+5	; 0x05
    1c16:	9e 81       	ldd	r25, Y+6	; 0x06
    1c18:	9a 83       	std	Y+2, r25	; 0x02
    1c1a:	89 83       	std	Y+1, r24	; 0x01
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c20:	01 97       	sbiw	r24, 0x01	; 1
    1c22:	f1 f7       	brne	.-4      	; 0x1c20 <LCD_VidWriteCommand+0x20a>
    1c24:	9a 83       	std	Y+2, r25	; 0x02
    1c26:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);	
}
    1c28:	6f 96       	adiw	r28, 0x1f	; 31
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	f8 94       	cli
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	cd bf       	out	0x3d, r28	; 61
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	08 95       	ret

00001c3a <LCD_VidWriteData>:
void LCD_VidWriteData(u8 loc_u8DataPort,u8 loc_u8ControlPort,u8 loc_u8data){
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	6f 97       	sbiw	r28, 0x1f	; 31
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	f8 94       	cli
    1c48:	de bf       	out	0x3e, r29	; 62
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	cd bf       	out	0x3d, r28	; 61
    1c4e:	8d 8f       	std	Y+29, r24	; 0x1d
    1c50:	6e 8f       	std	Y+30, r22	; 0x1e
    1c52:	4f 8f       	std	Y+31, r20	; 0x1f
	
	DIO_VidSetPinValue(loc_u8ControlPort,PIN0,HIGH); //make the RS in data mode//
    1c54:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c56:	60 e0       	ldi	r22, 0x00	; 0
    1c58:	41 e0       	ldi	r20, 0x01	; 1
    1c5a:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_VidSetPinValue>
    DIO_VidSetPinValue(loc_u8ControlPort,PIN1,LOW);//make the RW in write mode//
    1c5e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c60:	61 e0       	ldi	r22, 0x01	; 1
    1c62:	40 e0       	ldi	r20, 0x00	; 0
    1c64:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_VidSetPinValue>
    DIO_VidSetPortValue(loc_u8DataPort,loc_u8data);//take the data from D0 to D7//
    1c68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c6a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c6c:	0e 94 41 0a 	call	0x1482	; 0x1482 <DIO_VidSetPortValue>
	
    DIO_VidSetPinValue(loc_u8ControlPort,PIN2,HIGH); // EN raising edge//
    1c70:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c72:	62 e0       	ldi	r22, 0x02	; 2
    1c74:	41 e0       	ldi	r20, 0x01	; 1
    1c76:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_VidSetPinValue>
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	a0 e8       	ldi	r26, 0x80	; 128
    1c80:	bf e3       	ldi	r27, 0x3F	; 63
    1c82:	89 8f       	std	Y+25, r24	; 0x19
    1c84:	9a 8f       	std	Y+26, r25	; 0x1a
    1c86:	ab 8f       	std	Y+27, r26	; 0x1b
    1c88:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	4a ef       	ldi	r20, 0xFA	; 250
    1c98:	54 e4       	ldi	r21, 0x44	; 68
    1c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	8d 8b       	std	Y+21, r24	; 0x15
    1ca4:	9e 8b       	std	Y+22, r25	; 0x16
    1ca6:	af 8b       	std	Y+23, r26	; 0x17
    1ca8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1caa:	6d 89       	ldd	r22, Y+21	; 0x15
    1cac:	7e 89       	ldd	r23, Y+22	; 0x16
    1cae:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb0:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	40 e8       	ldi	r20, 0x80	; 128
    1cb8:	5f e3       	ldi	r21, 0x3F	; 63
    1cba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cbe:	88 23       	and	r24, r24
    1cc0:	2c f4       	brge	.+10     	; 0x1ccc <LCD_VidWriteData+0x92>
		__ticks = 1;
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	9c 8b       	std	Y+20, r25	; 0x14
    1cc8:	8b 8b       	std	Y+19, r24	; 0x13
    1cca:	3f c0       	rjmp	.+126    	; 0x1d4a <LCD_VidWriteData+0x110>
	else if (__tmp > 65535)
    1ccc:	6d 89       	ldd	r22, Y+21	; 0x15
    1cce:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd0:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd2:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	3f ef       	ldi	r19, 0xFF	; 255
    1cd8:	4f e7       	ldi	r20, 0x7F	; 127
    1cda:	57 e4       	ldi	r21, 0x47	; 71
    1cdc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ce0:	18 16       	cp	r1, r24
    1ce2:	4c f5       	brge	.+82     	; 0x1d36 <LCD_VidWriteData+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ce6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ce8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	40 e2       	ldi	r20, 0x20	; 32
    1cf2:	51 e4       	ldi	r21, 0x41	; 65
    1cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	bc 01       	movw	r22, r24
    1cfe:	cd 01       	movw	r24, r26
    1d00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	9c 8b       	std	Y+20, r25	; 0x14
    1d0a:	8b 8b       	std	Y+19, r24	; 0x13
    1d0c:	0f c0       	rjmp	.+30     	; 0x1d2c <LCD_VidWriteData+0xf2>
    1d0e:	88 ec       	ldi	r24, 0xC8	; 200
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	9a 8b       	std	Y+18, r25	; 0x12
    1d14:	89 8b       	std	Y+17, r24	; 0x11
    1d16:	89 89       	ldd	r24, Y+17	; 0x11
    1d18:	9a 89       	ldd	r25, Y+18	; 0x12
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	f1 f7       	brne	.-4      	; 0x1d1a <LCD_VidWriteData+0xe0>
    1d1e:	9a 8b       	std	Y+18, r25	; 0x12
    1d20:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d22:	8b 89       	ldd	r24, Y+19	; 0x13
    1d24:	9c 89       	ldd	r25, Y+20	; 0x14
    1d26:	01 97       	sbiw	r24, 0x01	; 1
    1d28:	9c 8b       	std	Y+20, r25	; 0x14
    1d2a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d30:	00 97       	sbiw	r24, 0x00	; 0
    1d32:	69 f7       	brne	.-38     	; 0x1d0e <LCD_VidWriteData+0xd4>
    1d34:	14 c0       	rjmp	.+40     	; 0x1d5e <LCD_VidWriteData+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d36:	6d 89       	ldd	r22, Y+21	; 0x15
    1d38:	7e 89       	ldd	r23, Y+22	; 0x16
    1d3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	9c 8b       	std	Y+20, r25	; 0x14
    1d48:	8b 8b       	std	Y+19, r24	; 0x13
    1d4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d4e:	98 8b       	std	Y+16, r25	; 0x10
    1d50:	8f 87       	std	Y+15, r24	; 0x0f
    1d52:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d54:	98 89       	ldd	r25, Y+16	; 0x10
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	f1 f7       	brne	.-4      	; 0x1d56 <LCD_VidWriteData+0x11c>
    1d5a:	98 8b       	std	Y+16, r25	; 0x10
    1d5c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);     
    DIO_VidSetPinValue(loc_u8ControlPort,PIN2,LOW);// EN falling edge//
    1d5e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d60:	62 e0       	ldi	r22, 0x02	; 2
    1d62:	40 e0       	ldi	r20, 0x00	; 0
    1d64:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_VidSetPinValue>
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	a0 e8       	ldi	r26, 0x80	; 128
    1d6e:	bf e3       	ldi	r27, 0x3F	; 63
    1d70:	8b 87       	std	Y+11, r24	; 0x0b
    1d72:	9c 87       	std	Y+12, r25	; 0x0c
    1d74:	ad 87       	std	Y+13, r26	; 0x0d
    1d76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	4a ef       	ldi	r20, 0xFA	; 250
    1d86:	54 e4       	ldi	r21, 0x44	; 68
    1d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	8f 83       	std	Y+7, r24	; 0x07
    1d92:	98 87       	std	Y+8, r25	; 0x08
    1d94:	a9 87       	std	Y+9, r26	; 0x09
    1d96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d98:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9a:	78 85       	ldd	r23, Y+8	; 0x08
    1d9c:	89 85       	ldd	r24, Y+9	; 0x09
    1d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e8       	ldi	r20, 0x80	; 128
    1da6:	5f e3       	ldi	r21, 0x3F	; 63
    1da8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dac:	88 23       	and	r24, r24
    1dae:	2c f4       	brge	.+10     	; 0x1dba <LCD_VidWriteData+0x180>
		__ticks = 1;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	9e 83       	std	Y+6, r25	; 0x06
    1db6:	8d 83       	std	Y+5, r24	; 0x05
    1db8:	3f c0       	rjmp	.+126    	; 0x1e38 <LCD_VidWriteData+0x1fe>
	else if (__tmp > 65535)
    1dba:	6f 81       	ldd	r22, Y+7	; 0x07
    1dbc:	78 85       	ldd	r23, Y+8	; 0x08
    1dbe:	89 85       	ldd	r24, Y+9	; 0x09
    1dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	3f ef       	ldi	r19, 0xFF	; 255
    1dc6:	4f e7       	ldi	r20, 0x7F	; 127
    1dc8:	57 e4       	ldi	r21, 0x47	; 71
    1dca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dce:	18 16       	cp	r1, r24
    1dd0:	4c f5       	brge	.+82     	; 0x1e24 <LCD_VidWriteData+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e2       	ldi	r20, 0x20	; 32
    1de0:	51 e4       	ldi	r21, 0x41	; 65
    1de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	bc 01       	movw	r22, r24
    1dec:	cd 01       	movw	r24, r26
    1dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	9e 83       	std	Y+6, r25	; 0x06
    1df8:	8d 83       	std	Y+5, r24	; 0x05
    1dfa:	0f c0       	rjmp	.+30     	; 0x1e1a <LCD_VidWriteData+0x1e0>
    1dfc:	88 ec       	ldi	r24, 0xC8	; 200
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	9c 83       	std	Y+4, r25	; 0x04
    1e02:	8b 83       	std	Y+3, r24	; 0x03
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	9c 81       	ldd	r25, Y+4	; 0x04
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <LCD_VidWriteData+0x1ce>
    1e0c:	9c 83       	std	Y+4, r25	; 0x04
    1e0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e10:	8d 81       	ldd	r24, Y+5	; 0x05
    1e12:	9e 81       	ldd	r25, Y+6	; 0x06
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	9e 83       	std	Y+6, r25	; 0x06
    1e18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	69 f7       	brne	.-38     	; 0x1dfc <LCD_VidWriteData+0x1c2>
    1e22:	14 c0       	rjmp	.+40     	; 0x1e4c <LCD_VidWriteData+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e24:	6f 81       	ldd	r22, Y+7	; 0x07
    1e26:	78 85       	ldd	r23, Y+8	; 0x08
    1e28:	89 85       	ldd	r24, Y+9	; 0x09
    1e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	9e 83       	std	Y+6, r25	; 0x06
    1e36:	8d 83       	std	Y+5, r24	; 0x05
    1e38:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3c:	9a 83       	std	Y+2, r25	; 0x02
    1e3e:	89 83       	std	Y+1, r24	; 0x01
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	9a 81       	ldd	r25, Y+2	; 0x02
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	f1 f7       	brne	.-4      	; 0x1e44 <LCD_VidWriteData+0x20a>
    1e48:	9a 83       	std	Y+2, r25	; 0x02
    1e4a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);	
}
    1e4c:	6f 96       	adiw	r28, 0x1f	; 31
    1e4e:	0f b6       	in	r0, 0x3f	; 63
    1e50:	f8 94       	cli
    1e52:	de bf       	out	0x3e, r29	; 62
    1e54:	0f be       	out	0x3f, r0	; 63
    1e56:	cd bf       	out	0x3d, r28	; 61
    1e58:	cf 91       	pop	r28
    1e5a:	df 91       	pop	r29
    1e5c:	08 95       	ret

00001e5e <LCD_VidWriteString>:
void LCD_VidWriteString(u8 loc_u8DataPort,u8 loc_u8ControlPort,u8* loc_CharString){
    1e5e:	df 93       	push	r29
    1e60:	cf 93       	push	r28
    1e62:	00 d0       	rcall	.+0      	; 0x1e64 <LCD_VidWriteString+0x6>
    1e64:	00 d0       	rcall	.+0      	; 0x1e66 <LCD_VidWriteString+0x8>
    1e66:	0f 92       	push	r0
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
    1e6c:	8a 83       	std	Y+2, r24	; 0x02
    1e6e:	6b 83       	std	Y+3, r22	; 0x03
    1e70:	5d 83       	std	Y+5, r21	; 0x05
    1e72:	4c 83       	std	Y+4, r20	; 0x04
	u8 i=0;
    1e74:	19 82       	std	Y+1, r1	; 0x01
	for(i=0; loc_CharString[i]!=NULL;i++){
    1e76:	19 82       	std	Y+1, r1	; 0x01
    1e78:	11 c0       	rjmp	.+34     	; 0x1e9c <LCD_VidWriteString+0x3e>
	LCD_VidWriteData(loc_u8DataPort,loc_u8ControlPort,loc_CharString[i]);
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	28 2f       	mov	r18, r24
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	8c 81       	ldd	r24, Y+4	; 0x04
    1e82:	9d 81       	ldd	r25, Y+5	; 0x05
    1e84:	fc 01       	movw	r30, r24
    1e86:	e2 0f       	add	r30, r18
    1e88:	f3 1f       	adc	r31, r19
    1e8a:	90 81       	ld	r25, Z
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	6b 81       	ldd	r22, Y+3	; 0x03
    1e90:	49 2f       	mov	r20, r25
    1e92:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_VidWriteData>
    DIO_VidSetPinValue(loc_u8ControlPort,PIN2,LOW);// EN falling edge//
    _delay_ms(1);	
}
void LCD_VidWriteString(u8 loc_u8DataPort,u8 loc_u8ControlPort,u8* loc_CharString){
	u8 i=0;
	for(i=0; loc_CharString[i]!=NULL;i++){
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	8f 5f       	subi	r24, 0xFF	; 255
    1e9a:	89 83       	std	Y+1, r24	; 0x01
    1e9c:	89 81       	ldd	r24, Y+1	; 0x01
    1e9e:	28 2f       	mov	r18, r24
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea6:	fc 01       	movw	r30, r24
    1ea8:	e2 0f       	add	r30, r18
    1eaa:	f3 1f       	adc	r31, r19
    1eac:	80 81       	ld	r24, Z
    1eae:	88 23       	and	r24, r24
    1eb0:	21 f7       	brne	.-56     	; 0x1e7a <LCD_VidWriteString+0x1c>
	LCD_VidWriteData(loc_u8DataPort,loc_u8ControlPort,loc_CharString[i]);
    }
}
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	08 95       	ret

00001ec2 <LCD_VidWriteNumber>:
void LCD_VidWriteNumber(u8 loc_u8DataPort,u8 loc_u8ControlPort,s32 loc_s32number){
    1ec2:	ef 92       	push	r14
    1ec4:	ff 92       	push	r15
    1ec6:	0f 93       	push	r16
    1ec8:	1f 93       	push	r17
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
    1ed2:	63 97       	sbiw	r28, 0x13	; 19
    1ed4:	0f b6       	in	r0, 0x3f	; 63
    1ed6:	f8 94       	cli
    1ed8:	de bf       	out	0x3e, r29	; 62
    1eda:	0f be       	out	0x3f, r0	; 63
    1edc:	cd bf       	out	0x3d, r28	; 61
    1ede:	8e 87       	std	Y+14, r24	; 0x0e
    1ee0:	6f 87       	std	Y+15, r22	; 0x0f
    1ee2:	28 8b       	std	Y+16, r18	; 0x10
    1ee4:	39 8b       	std	Y+17, r19	; 0x11
    1ee6:	4a 8b       	std	Y+18, r20	; 0x12
    1ee8:	5b 8b       	std	Y+19, r21	; 0x13


 s32 x=loc_s32number;
    1eea:	88 89       	ldd	r24, Y+16	; 0x10
    1eec:	99 89       	ldd	r25, Y+17	; 0x11
    1eee:	aa 89       	ldd	r26, Y+18	; 0x12
    1ef0:	bb 89       	ldd	r27, Y+19	; 0x13
    1ef2:	8a 87       	std	Y+10, r24	; 0x0a
    1ef4:	9b 87       	std	Y+11, r25	; 0x0b
    1ef6:	ac 87       	std	Y+12, r26	; 0x0c
    1ef8:	bd 87       	std	Y+13, r27	; 0x0d
 s32 y=0;
    1efa:	1e 82       	std	Y+6, r1	; 0x06
    1efc:	1f 82       	std	Y+7, r1	; 0x07
    1efe:	18 86       	std	Y+8, r1	; 0x08
    1f00:	19 86       	std	Y+9, r1	; 0x09
 s32 reversed=1;
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	a0 e0       	ldi	r26, 0x00	; 0
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	8a 83       	std	Y+2, r24	; 0x02
    1f0c:	9b 83       	std	Y+3, r25	; 0x03
    1f0e:	ac 83       	std	Y+4, r26	; 0x04
    1f10:	bd 83       	std	Y+5, r27	; 0x05
 u8 negtive_flag=0;
    1f12:	19 82       	std	Y+1, r1	; 0x01
     if(loc_s32number<0){
    1f14:	88 89       	ldd	r24, Y+16	; 0x10
    1f16:	99 89       	ldd	r25, Y+17	; 0x11
    1f18:	aa 89       	ldd	r26, Y+18	; 0x12
    1f1a:	bb 89       	ldd	r27, Y+19	; 0x13
    1f1c:	bb 23       	and	r27, r27
    1f1e:	94 f4       	brge	.+36     	; 0x1f44 <LCD_VidWriteNumber+0x82>
    	         x=(loc_s32number*-1);
    1f20:	88 89       	ldd	r24, Y+16	; 0x10
    1f22:	99 89       	ldd	r25, Y+17	; 0x11
    1f24:	aa 89       	ldd	r26, Y+18	; 0x12
    1f26:	bb 89       	ldd	r27, Y+19	; 0x13
    1f28:	b0 95       	com	r27
    1f2a:	a0 95       	com	r26
    1f2c:	90 95       	com	r25
    1f2e:	81 95       	neg	r24
    1f30:	9f 4f       	sbci	r25, 0xFF	; 255
    1f32:	af 4f       	sbci	r26, 0xFF	; 255
    1f34:	bf 4f       	sbci	r27, 0xFF	; 255
    1f36:	8a 87       	std	Y+10, r24	; 0x0a
    1f38:	9b 87       	std	Y+11, r25	; 0x0b
    1f3a:	ac 87       	std	Y+12, r26	; 0x0c
    1f3c:	bd 87       	std	Y+13, r27	; 0x0d
    	         negtive_flag=1;
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	89 83       	std	Y+1, r24	; 0x01
    1f42:	44 c0       	rjmp	.+136    	; 0x1fcc <LCD_VidWriteNumber+0x10a>
         }

     else if(x==0){
    1f44:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f46:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f48:	ac 85       	ldd	r26, Y+12	; 0x0c
    1f4a:	bd 85       	ldd	r27, Y+13	; 0x0d
    1f4c:	00 97       	sbiw	r24, 0x00	; 0
    1f4e:	a1 05       	cpc	r26, r1
    1f50:	b1 05       	cpc	r27, r1
    1f52:	e1 f5       	brne	.+120    	; 0x1fcc <LCD_VidWriteNumber+0x10a>
		         LCD_VidWriteData(loc_u8DataPort,loc_u8ControlPort,48);
    1f54:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f56:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f58:	40 e3       	ldi	r20, 0x30	; 48
    1f5a:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_VidWriteData>
    1f5e:	36 c0       	rjmp	.+108    	; 0x1fcc <LCD_VidWriteNumber+0x10a>
			}
	 while(x>0){
		         reversed=(reversed*10)+(x%10);
    1f60:	8a 81       	ldd	r24, Y+2	; 0x02
    1f62:	9b 81       	ldd	r25, Y+3	; 0x03
    1f64:	ac 81       	ldd	r26, Y+4	; 0x04
    1f66:	bd 81       	ldd	r27, Y+5	; 0x05
    1f68:	2a e0       	ldi	r18, 0x0A	; 10
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	40 e0       	ldi	r20, 0x00	; 0
    1f6e:	50 e0       	ldi	r21, 0x00	; 0
    1f70:	bc 01       	movw	r22, r24
    1f72:	cd 01       	movw	r24, r26
    1f74:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__mulsi3>
    1f78:	7b 01       	movw	r14, r22
    1f7a:	8c 01       	movw	r16, r24
    1f7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f7e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f80:	ac 85       	ldd	r26, Y+12	; 0x0c
    1f82:	bd 85       	ldd	r27, Y+13	; 0x0d
    1f84:	2a e0       	ldi	r18, 0x0A	; 10
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e0       	ldi	r20, 0x00	; 0
    1f8a:	50 e0       	ldi	r21, 0x00	; 0
    1f8c:	bc 01       	movw	r22, r24
    1f8e:	cd 01       	movw	r24, r26
    1f90:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <__divmodsi4>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	8e 0d       	add	r24, r14
    1f9a:	9f 1d       	adc	r25, r15
    1f9c:	a0 1f       	adc	r26, r16
    1f9e:	b1 1f       	adc	r27, r17
    1fa0:	8a 83       	std	Y+2, r24	; 0x02
    1fa2:	9b 83       	std	Y+3, r25	; 0x03
    1fa4:	ac 83       	std	Y+4, r26	; 0x04
    1fa6:	bd 83       	std	Y+5, r27	; 0x05
				   x=x/10;
    1fa8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1faa:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fac:	ac 85       	ldd	r26, Y+12	; 0x0c
    1fae:	bd 85       	ldd	r27, Y+13	; 0x0d
    1fb0:	2a e0       	ldi	r18, 0x0A	; 10
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e0       	ldi	r20, 0x00	; 0
    1fb6:	50 e0       	ldi	r21, 0x00	; 0
    1fb8:	bc 01       	movw	r22, r24
    1fba:	cd 01       	movw	r24, r26
    1fbc:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <__divmodsi4>
    1fc0:	da 01       	movw	r26, r20
    1fc2:	c9 01       	movw	r24, r18
    1fc4:	8a 87       	std	Y+10, r24	; 0x0a
    1fc6:	9b 87       	std	Y+11, r25	; 0x0b
    1fc8:	ac 87       	std	Y+12, r26	; 0x0c
    1fca:	bd 87       	std	Y+13, r27	; 0x0d
         }

     else if(x==0){
		         LCD_VidWriteData(loc_u8DataPort,loc_u8ControlPort,48);
			}
	 while(x>0){
    1fcc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fce:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fd0:	ac 85       	ldd	r26, Y+12	; 0x0c
    1fd2:	bd 85       	ldd	r27, Y+13	; 0x0d
    1fd4:	18 16       	cp	r1, r24
    1fd6:	19 06       	cpc	r1, r25
    1fd8:	1a 06       	cpc	r1, r26
    1fda:	1b 06       	cpc	r1, r27
    1fdc:	0c f2       	brlt	.-126    	; 0x1f60 <LCD_VidWriteNumber+0x9e>
		         reversed=(reversed*10)+(x%10);
				   x=x/10;
			   }
     if(loc_s32number<0){
    1fde:	88 89       	ldd	r24, Y+16	; 0x10
    1fe0:	99 89       	ldd	r25, Y+17	; 0x11
    1fe2:	aa 89       	ldd	r26, Y+18	; 0x12
    1fe4:	bb 89       	ldd	r27, Y+19	; 0x13
    1fe6:	bb 23       	and	r27, r27
    1fe8:	84 f4       	brge	.+32     	; 0x200a <LCD_VidWriteNumber+0x148>
			     x=(loc_s32number*-1);
    1fea:	88 89       	ldd	r24, Y+16	; 0x10
    1fec:	99 89       	ldd	r25, Y+17	; 0x11
    1fee:	aa 89       	ldd	r26, Y+18	; 0x12
    1ff0:	bb 89       	ldd	r27, Y+19	; 0x13
    1ff2:	b0 95       	com	r27
    1ff4:	a0 95       	com	r26
    1ff6:	90 95       	com	r25
    1ff8:	81 95       	neg	r24
    1ffa:	9f 4f       	sbci	r25, 0xFF	; 255
    1ffc:	af 4f       	sbci	r26, 0xFF	; 255
    1ffe:	bf 4f       	sbci	r27, 0xFF	; 255
    2000:	8a 87       	std	Y+10, r24	; 0x0a
    2002:	9b 87       	std	Y+11, r25	; 0x0b
    2004:	ac 87       	std	Y+12, r26	; 0x0c
    2006:	bd 87       	std	Y+13, r27	; 0x0d
    2008:	50 c0       	rjmp	.+160    	; 0x20aa <LCD_VidWriteNumber+0x1e8>
     }
     else{
        	    x=loc_s32number;
    200a:	88 89       	ldd	r24, Y+16	; 0x10
    200c:	99 89       	ldd	r25, Y+17	; 0x11
    200e:	aa 89       	ldd	r26, Y+18	; 0x12
    2010:	bb 89       	ldd	r27, Y+19	; 0x13
    2012:	8a 87       	std	Y+10, r24	; 0x0a
    2014:	9b 87       	std	Y+11, r25	; 0x0b
    2016:	ac 87       	std	Y+12, r26	; 0x0c
    2018:	bd 87       	std	Y+13, r27	; 0x0d
    201a:	47 c0       	rjmp	.+142    	; 0x20aa <LCD_VidWriteNumber+0x1e8>
         }
     while(x>0){
				y=reversed%10;
    201c:	8a 81       	ldd	r24, Y+2	; 0x02
    201e:	9b 81       	ldd	r25, Y+3	; 0x03
    2020:	ac 81       	ldd	r26, Y+4	; 0x04
    2022:	bd 81       	ldd	r27, Y+5	; 0x05
    2024:	2a e0       	ldi	r18, 0x0A	; 10
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e0       	ldi	r20, 0x00	; 0
    202a:	50 e0       	ldi	r21, 0x00	; 0
    202c:	bc 01       	movw	r22, r24
    202e:	cd 01       	movw	r24, r26
    2030:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <__divmodsi4>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	8e 83       	std	Y+6, r24	; 0x06
    203a:	9f 83       	std	Y+7, r25	; 0x07
    203c:	a8 87       	std	Y+8, r26	; 0x08
    203e:	b9 87       	std	Y+9, r27	; 0x09
				if(negtive_flag==1){
    2040:	89 81       	ldd	r24, Y+1	; 0x01
    2042:	81 30       	cpi	r24, 0x01	; 1
    2044:	31 f4       	brne	.+12     	; 0x2052 <LCD_VidWriteNumber+0x190>
				 LCD_VidWriteData(loc_u8DataPort,loc_u8ControlPort,'-');
    2046:	8e 85       	ldd	r24, Y+14	; 0x0e
    2048:	6f 85       	ldd	r22, Y+15	; 0x0f
    204a:	4d e2       	ldi	r20, 0x2D	; 45
    204c:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_VidWriteData>
				  negtive_flag=0;
    2050:	19 82       	std	Y+1, r1	; 0x01
								}
				LCD_VidWriteData(loc_u8DataPort,loc_u8ControlPort,y+48);
    2052:	8e 81       	ldd	r24, Y+6	; 0x06
    2054:	98 2f       	mov	r25, r24
    2056:	90 5d       	subi	r25, 0xD0	; 208
    2058:	8e 85       	ldd	r24, Y+14	; 0x0e
    205a:	6f 85       	ldd	r22, Y+15	; 0x0f
    205c:	49 2f       	mov	r20, r25
    205e:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_VidWriteData>
				reversed=reversed/10;
    2062:	8a 81       	ldd	r24, Y+2	; 0x02
    2064:	9b 81       	ldd	r25, Y+3	; 0x03
    2066:	ac 81       	ldd	r26, Y+4	; 0x04
    2068:	bd 81       	ldd	r27, Y+5	; 0x05
    206a:	2a e0       	ldi	r18, 0x0A	; 10
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	40 e0       	ldi	r20, 0x00	; 0
    2070:	50 e0       	ldi	r21, 0x00	; 0
    2072:	bc 01       	movw	r22, r24
    2074:	cd 01       	movw	r24, r26
    2076:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <__divmodsi4>
    207a:	da 01       	movw	r26, r20
    207c:	c9 01       	movw	r24, r18
    207e:	8a 83       	std	Y+2, r24	; 0x02
    2080:	9b 83       	std	Y+3, r25	; 0x03
    2082:	ac 83       	std	Y+4, r26	; 0x04
    2084:	bd 83       	std	Y+5, r27	; 0x05
				x=x/10;
    2086:	8a 85       	ldd	r24, Y+10	; 0x0a
    2088:	9b 85       	ldd	r25, Y+11	; 0x0b
    208a:	ac 85       	ldd	r26, Y+12	; 0x0c
    208c:	bd 85       	ldd	r27, Y+13	; 0x0d
    208e:	2a e0       	ldi	r18, 0x0A	; 10
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	40 e0       	ldi	r20, 0x00	; 0
    2094:	50 e0       	ldi	r21, 0x00	; 0
    2096:	bc 01       	movw	r22, r24
    2098:	cd 01       	movw	r24, r26
    209a:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <__divmodsi4>
    209e:	da 01       	movw	r26, r20
    20a0:	c9 01       	movw	r24, r18
    20a2:	8a 87       	std	Y+10, r24	; 0x0a
    20a4:	9b 87       	std	Y+11, r25	; 0x0b
    20a6:	ac 87       	std	Y+12, r26	; 0x0c
    20a8:	bd 87       	std	Y+13, r27	; 0x0d
			     x=(loc_s32number*-1);
     }
     else{
        	    x=loc_s32number;
         }
     while(x>0){
    20aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    20ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    20ae:	ac 85       	ldd	r26, Y+12	; 0x0c
    20b0:	bd 85       	ldd	r27, Y+13	; 0x0d
    20b2:	18 16       	cp	r1, r24
    20b4:	19 06       	cpc	r1, r25
    20b6:	1a 06       	cpc	r1, r26
    20b8:	1b 06       	cpc	r1, r27
    20ba:	0c f4       	brge	.+2      	; 0x20be <LCD_VidWriteNumber+0x1fc>
    20bc:	af cf       	rjmp	.-162    	; 0x201c <LCD_VidWriteNumber+0x15a>
								}
				LCD_VidWriteData(loc_u8DataPort,loc_u8ControlPort,y+48);
				reversed=reversed/10;
				x=x/10;
     }
}
    20be:	63 96       	adiw	r28, 0x13	; 19
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	f8 94       	cli
    20c4:	de bf       	out	0x3e, r29	; 62
    20c6:	0f be       	out	0x3f, r0	; 63
    20c8:	cd bf       	out	0x3d, r28	; 61
    20ca:	cf 91       	pop	r28
    20cc:	df 91       	pop	r29
    20ce:	1f 91       	pop	r17
    20d0:	0f 91       	pop	r16
    20d2:	ff 90       	pop	r15
    20d4:	ef 90       	pop	r14
    20d6:	08 95       	ret

000020d8 <LCD_VidSetDdram>:


void LCD_VidSetDdram(u8 loc_u8DataPort,u8 loc_u8ControlPort,u8 loc_u8row,u8 loc_u8col){
    20d8:	df 93       	push	r29
    20da:	cf 93       	push	r28
    20dc:	00 d0       	rcall	.+0      	; 0x20de <LCD_VidSetDdram+0x6>
    20de:	00 d0       	rcall	.+0      	; 0x20e0 <LCD_VidSetDdram+0x8>
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
    20e4:	89 83       	std	Y+1, r24	; 0x01
    20e6:	6a 83       	std	Y+2, r22	; 0x02
    20e8:	4b 83       	std	Y+3, r20	; 0x03
    20ea:	2c 83       	std	Y+4, r18	; 0x04
	if(1==loc_u8row){
    20ec:	8b 81       	ldd	r24, Y+3	; 0x03
    20ee:	81 30       	cpi	r24, 0x01	; 1
    20f0:	49 f4       	brne	.+18     	; 0x2104 <LCD_VidSetDdram+0x2c>
		LCD_VidWriteCommand(loc_u8DataPort,loc_u8ControlPort,(127+loc_u8col));
    20f2:	8c 81       	ldd	r24, Y+4	; 0x04
    20f4:	98 2f       	mov	r25, r24
    20f6:	91 58       	subi	r25, 0x81	; 129
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	6a 81       	ldd	r22, Y+2	; 0x02
    20fc:	49 2f       	mov	r20, r25
    20fe:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LCD_VidWriteCommand>
    2102:	0b c0       	rjmp	.+22     	; 0x211a <LCD_VidSetDdram+0x42>
	}
	else if(2==loc_u8row){
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	82 30       	cpi	r24, 0x02	; 2
    2108:	41 f4       	brne	.+16     	; 0x211a <LCD_VidSetDdram+0x42>

		LCD_VidWriteCommand(loc_u8DataPort,loc_u8ControlPort,(127+64+loc_u8col));
    210a:	8c 81       	ldd	r24, Y+4	; 0x04
    210c:	98 2f       	mov	r25, r24
    210e:	91 54       	subi	r25, 0x41	; 65
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	6a 81       	ldd	r22, Y+2	; 0x02
    2114:	49 2f       	mov	r20, r25
    2116:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LCD_VidWriteCommand>
	}
}
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	0f 90       	pop	r0
    2122:	cf 91       	pop	r28
    2124:	df 91       	pop	r29
    2126:	08 95       	ret

00002128 <TIMER1_SetCallBackIcp>:
#include "TIMER1_interface.h"

// Icp mode//
static void (*GlobalPointerIcpTimer1)(void)=NULL;

void TIMER1_SetCallBackIcp(void (*LocalPointerIcpTimer1)(void)){
    2128:	df 93       	push	r29
    212a:	cf 93       	push	r28
    212c:	00 d0       	rcall	.+0      	; 0x212e <TIMER1_SetCallBackIcp+0x6>
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	9a 83       	std	Y+2, r25	; 0x02
    2134:	89 83       	std	Y+1, r24	; 0x01

  if(LocalPointerIcpTimer1!=NULL){
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	9a 81       	ldd	r25, Y+2	; 0x02
    213a:	00 97       	sbiw	r24, 0x00	; 0
    213c:	31 f0       	breq	.+12     	; 0x214a <TIMER1_SetCallBackIcp+0x22>


	  GlobalPointerIcpTimer1=LocalPointerIcpTimer1;
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	9a 81       	ldd	r25, Y+2	; 0x02
    2142:	90 93 8d 02 	sts	0x028D, r25
    2146:	80 93 8c 02 	sts	0x028C, r24
  }

}
    214a:	0f 90       	pop	r0
    214c:	0f 90       	pop	r0
    214e:	cf 91       	pop	r28
    2150:	df 91       	pop	r29
    2152:	08 95       	ret

00002154 <TIMER1_SetCallBack>:
// any mode//

static void (*GlobalPointerTimer1)(void)=NULL;

void TIMER1_SetCallBack(void (*LocalPointerTimer1)(void)){
    2154:	df 93       	push	r29
    2156:	cf 93       	push	r28
    2158:	00 d0       	rcall	.+0      	; 0x215a <TIMER1_SetCallBack+0x6>
    215a:	cd b7       	in	r28, 0x3d	; 61
    215c:	de b7       	in	r29, 0x3e	; 62
    215e:	9a 83       	std	Y+2, r25	; 0x02
    2160:	89 83       	std	Y+1, r24	; 0x01

  if(LocalPointerTimer1!=NULL){
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	9a 81       	ldd	r25, Y+2	; 0x02
    2166:	00 97       	sbiw	r24, 0x00	; 0
    2168:	31 f0       	breq	.+12     	; 0x2176 <TIMER1_SetCallBack+0x22>


	  GlobalPointerTimer1=LocalPointerTimer1;
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	9a 81       	ldd	r25, Y+2	; 0x02
    216e:	90 93 8f 02 	sts	0x028F, r25
    2172:	80 93 8e 02 	sts	0x028E, r24
  }

}
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	cf 91       	pop	r28
    217c:	df 91       	pop	r29
    217e:	08 95       	ret

00002180 <TIMER1_VidInit>:




void TIMER1_VidInit(void){
    2180:	df 93       	push	r29
    2182:	cf 93       	push	r28
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
CLR_BIT(TCCR1B,PIN0);// CS10//
CLR_BIT(TCCR1B,PIN1);// CS11//
SET_BIT(TCCR1B,PIN2);// CS12//
#elif TIMER1_PRE_SCALLER==TIMER1_PRE_1024 

SET_BIT(TCCR1B,PIN0);// CS10//
    2188:	ae e4       	ldi	r26, 0x4E	; 78
    218a:	b0 e0       	ldi	r27, 0x00	; 0
    218c:	ee e4       	ldi	r30, 0x4E	; 78
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	80 81       	ld	r24, Z
    2192:	81 60       	ori	r24, 0x01	; 1
    2194:	8c 93       	st	X, r24
CLR_BIT(TCCR1B,PIN1);// CS11//
    2196:	ae e4       	ldi	r26, 0x4E	; 78
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	ee e4       	ldi	r30, 0x4E	; 78
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	8d 7f       	andi	r24, 0xFD	; 253
    21a2:	8c 93       	st	X, r24
SET_BIT(TCCR1B,PIN2);// CS12//
    21a4:	ae e4       	ldi	r26, 0x4E	; 78
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	ee e4       	ldi	r30, 0x4E	; 78
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	84 60       	ori	r24, 0x04	; 4
    21b0:	8c 93       	st	X, r24
#endif	
	
	

#if TIMER1_MODE==OVER_FLOW
CLR_BIT(TCCR1A,PIN1);//WGM11//
    21b2:	af e4       	ldi	r26, 0x4F	; 79
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	ef e4       	ldi	r30, 0x4F	; 79
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	8d 7f       	andi	r24, 0xFD	; 253
    21be:	8c 93       	st	X, r24
CLR_BIT(TCCR1A,PIN0);//WGM10//
    21c0:	af e4       	ldi	r26, 0x4F	; 79
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	ef e4       	ldi	r30, 0x4F	; 79
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	8e 7f       	andi	r24, 0xFE	; 254
    21cc:	8c 93       	st	X, r24
CLR_BIT(TCCR1B,PIN3);//WGM12//
    21ce:	ae e4       	ldi	r26, 0x4E	; 78
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	ee e4       	ldi	r30, 0x4E	; 78
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	87 7f       	andi	r24, 0xF7	; 247
    21da:	8c 93       	st	X, r24
CLR_BIT(TCCR1B,PIN4);//WGM13//
    21dc:	ae e4       	ldi	r26, 0x4E	; 78
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	ee e4       	ldi	r30, 0x4E	; 78
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	8f 7e       	andi	r24, 0xEF	; 239
    21e8:	8c 93       	st	X, r24
SET_BIT(TIMSK,PIN2);// ENABLE THE OVER FLOW INTERRUPT//
    21ea:	a9 e5       	ldi	r26, 0x59	; 89
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	e9 e5       	ldi	r30, 0x59	; 89
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	84 60       	ori	r24, 0x04	; 4
    21f6:	8c 93       	st	X, r24

SET_BIT(TCCR1B,PIN6);//ICP 1 =1 rising  zero=falling//
    21f8:	ae e4       	ldi	r26, 0x4E	; 78
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	ee e4       	ldi	r30, 0x4E	; 78
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	80 64       	ori	r24, 0x40	; 64
    2204:	8c 93       	st	X, r24
SET_BIT(TIMSK,PIN5);// ENABLE THE ICU INTERRUPT//
    2206:	a9 e5       	ldi	r26, 0x59	; 89
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	e9 e5       	ldi	r30, 0x59	; 89
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	80 62       	ori	r24, 0x20	; 32
    2212:	8c 93       	st	X, r24

#if SELECT_CHANNEL==CHANNEL_A

CLR_BIT(TCCR1A,PIN7);
    2214:	af e4       	ldi	r26, 0x4F	; 79
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	ef e4       	ldi	r30, 0x4F	; 79
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	80 81       	ld	r24, Z
    221e:	8f 77       	andi	r24, 0x7F	; 127
    2220:	8c 93       	st	X, r24
CLR_BIT(TCCR1A,PIN6);
    2222:	af e4       	ldi	r26, 0x4F	; 79
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	ef e4       	ldi	r30, 0x4F	; 79
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	8f 7b       	andi	r24, 0xBF	; 191
    222e:	8c 93       	st	X, r24
	
	
   


}
    2230:	cf 91       	pop	r28
    2232:	df 91       	pop	r29
    2234:	08 95       	ret

00002236 <TIMER1_VidSenceControlIcp>:

void TIMER1_VidSenceControlIcp(u8 LOC_u8EdgeType){
    2236:	df 93       	push	r29
    2238:	cf 93       	push	r28
    223a:	00 d0       	rcall	.+0      	; 0x223c <TIMER1_VidSenceControlIcp+0x6>
    223c:	0f 92       	push	r0
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
    2242:	89 83       	std	Y+1, r24	; 0x01


switch(LOC_u8EdgeType){
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	28 2f       	mov	r18, r24
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	3b 83       	std	Y+3, r19	; 0x03
    224c:	2a 83       	std	Y+2, r18	; 0x02
    224e:	8a 81       	ldd	r24, Y+2	; 0x02
    2250:	9b 81       	ldd	r25, Y+3	; 0x03
    2252:	00 97       	sbiw	r24, 0x00	; 0
    2254:	31 f0       	breq	.+12     	; 0x2262 <TIMER1_VidSenceControlIcp+0x2c>
    2256:	2a 81       	ldd	r18, Y+2	; 0x02
    2258:	3b 81       	ldd	r19, Y+3	; 0x03
    225a:	21 30       	cpi	r18, 0x01	; 1
    225c:	31 05       	cpc	r19, r1
    225e:	49 f0       	breq	.+18     	; 0x2272 <TIMER1_VidSenceControlIcp+0x3c>
    2260:	0f c0       	rjmp	.+30     	; 0x2280 <TIMER1_VidSenceControlIcp+0x4a>

case 0:       CLR_BIT(TCCR1B,PIN6);        break;
    2262:	ae e4       	ldi	r26, 0x4E	; 78
    2264:	b0 e0       	ldi	r27, 0x00	; 0
    2266:	ee e4       	ldi	r30, 0x4E	; 78
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	8f 7b       	andi	r24, 0xBF	; 191
    226e:	8c 93       	st	X, r24
    2270:	07 c0       	rjmp	.+14     	; 0x2280 <TIMER1_VidSenceControlIcp+0x4a>

case 1:       SET_BIT(TCCR1B,PIN6);      break;
    2272:	ae e4       	ldi	r26, 0x4E	; 78
    2274:	b0 e0       	ldi	r27, 0x00	; 0
    2276:	ee e4       	ldi	r30, 0x4E	; 78
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	80 81       	ld	r24, Z
    227c:	80 64       	ori	r24, 0x40	; 64
    227e:	8c 93       	st	X, r24

   }
}
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	08 95       	ret

0000228c <TIMER1_VidSetDutyCycle>:



void TIMER1_VidSetDutyCycle(u16 LOC_u16OcrValue){
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	00 d0       	rcall	.+0      	; 0x2292 <TIMER1_VidSetDutyCycle+0x6>
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	9a 83       	std	Y+2, r25	; 0x02
    2298:	89 83       	std	Y+1, r24	; 0x01

    OCR1B=LOC_u16OcrValue;
    229a:	e8 e4       	ldi	r30, 0x48	; 72
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	89 81       	ldd	r24, Y+1	; 0x01
    22a0:	9a 81       	ldd	r25, Y+2	; 0x02
    22a2:	91 83       	std	Z+1, r25	; 0x01
    22a4:	80 83       	st	Z, r24

}
    22a6:	0f 90       	pop	r0
    22a8:	0f 90       	pop	r0
    22aa:	cf 91       	pop	r28
    22ac:	df 91       	pop	r29
    22ae:	08 95       	ret

000022b0 <__vector_6>:
//timer1 event capture//
void __vector_6(void){
    22b0:	1f 92       	push	r1
    22b2:	0f 92       	push	r0
    22b4:	0f b6       	in	r0, 0x3f	; 63
    22b6:	0f 92       	push	r0
    22b8:	11 24       	eor	r1, r1
    22ba:	2f 93       	push	r18
    22bc:	3f 93       	push	r19
    22be:	4f 93       	push	r20
    22c0:	5f 93       	push	r21
    22c2:	6f 93       	push	r22
    22c4:	7f 93       	push	r23
    22c6:	8f 93       	push	r24
    22c8:	9f 93       	push	r25
    22ca:	af 93       	push	r26
    22cc:	bf 93       	push	r27
    22ce:	ef 93       	push	r30
    22d0:	ff 93       	push	r31
    22d2:	df 93       	push	r29
    22d4:	cf 93       	push	r28
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62

	if(GlobalPointerIcpTimer1!=NULL){
    22da:	80 91 8c 02 	lds	r24, 0x028C
    22de:	90 91 8d 02 	lds	r25, 0x028D
    22e2:	00 97       	sbiw	r24, 0x00	; 0
    22e4:	29 f0       	breq	.+10     	; 0x22f0 <__vector_6+0x40>

		GlobalPointerIcpTimer1();
    22e6:	e0 91 8c 02 	lds	r30, 0x028C
    22ea:	f0 91 8d 02 	lds	r31, 0x028D
    22ee:	09 95       	icall
				}
}
    22f0:	cf 91       	pop	r28
    22f2:	df 91       	pop	r29
    22f4:	ff 91       	pop	r31
    22f6:	ef 91       	pop	r30
    22f8:	bf 91       	pop	r27
    22fa:	af 91       	pop	r26
    22fc:	9f 91       	pop	r25
    22fe:	8f 91       	pop	r24
    2300:	7f 91       	pop	r23
    2302:	6f 91       	pop	r22
    2304:	5f 91       	pop	r21
    2306:	4f 91       	pop	r20
    2308:	3f 91       	pop	r19
    230a:	2f 91       	pop	r18
    230c:	0f 90       	pop	r0
    230e:	0f be       	out	0x3f, r0	; 63
    2310:	0f 90       	pop	r0
    2312:	1f 90       	pop	r1
    2314:	18 95       	reti

00002316 <__vector_9>:

//timer1 overflow//	
void __vector_9(void){
    2316:	1f 92       	push	r1
    2318:	0f 92       	push	r0
    231a:	0f b6       	in	r0, 0x3f	; 63
    231c:	0f 92       	push	r0
    231e:	11 24       	eor	r1, r1
    2320:	2f 93       	push	r18
    2322:	3f 93       	push	r19
    2324:	4f 93       	push	r20
    2326:	5f 93       	push	r21
    2328:	6f 93       	push	r22
    232a:	7f 93       	push	r23
    232c:	8f 93       	push	r24
    232e:	9f 93       	push	r25
    2330:	af 93       	push	r26
    2332:	bf 93       	push	r27
    2334:	ef 93       	push	r30
    2336:	ff 93       	push	r31
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
	
	if(GlobalPointerTimer1!=NULL){
    2340:	80 91 8e 02 	lds	r24, 0x028E
    2344:	90 91 8f 02 	lds	r25, 0x028F
    2348:	00 97       	sbiw	r24, 0x00	; 0
    234a:	29 f0       	breq	.+10     	; 0x2356 <__vector_9+0x40>

				GlobalPointerTimer1();
    234c:	e0 91 8e 02 	lds	r30, 0x028E
    2350:	f0 91 8f 02 	lds	r31, 0x028F
    2354:	09 95       	icall
			}
	
}
    2356:	cf 91       	pop	r28
    2358:	df 91       	pop	r29
    235a:	ff 91       	pop	r31
    235c:	ef 91       	pop	r30
    235e:	bf 91       	pop	r27
    2360:	af 91       	pop	r26
    2362:	9f 91       	pop	r25
    2364:	8f 91       	pop	r24
    2366:	7f 91       	pop	r23
    2368:	6f 91       	pop	r22
    236a:	5f 91       	pop	r21
    236c:	4f 91       	pop	r20
    236e:	3f 91       	pop	r19
    2370:	2f 91       	pop	r18
    2372:	0f 90       	pop	r0
    2374:	0f be       	out	0x3f, r0	; 63
    2376:	0f 90       	pop	r0
    2378:	1f 90       	pop	r1
    237a:	18 95       	reti

0000237c <TIMER_VidSetCallBack>:
#include "BIT_MATH.h"
#include "TIMER_register.h"
#include "TIMER_interface.h"

static void (*GLOBAL_VidPointer)(void);
void TIMER_VidSetCallBack(void(*LOCAL_VidPointer)(void)){
    237c:	df 93       	push	r29
    237e:	cf 93       	push	r28
    2380:	00 d0       	rcall	.+0      	; 0x2382 <TIMER_VidSetCallBack+0x6>
    2382:	cd b7       	in	r28, 0x3d	; 61
    2384:	de b7       	in	r29, 0x3e	; 62
    2386:	9a 83       	std	Y+2, r25	; 0x02
    2388:	89 83       	std	Y+1, r24	; 0x01
	
	if(LOCAL_VidPointer!=NULL){
    238a:	89 81       	ldd	r24, Y+1	; 0x01
    238c:	9a 81       	ldd	r25, Y+2	; 0x02
    238e:	00 97       	sbiw	r24, 0x00	; 0
    2390:	31 f0       	breq	.+12     	; 0x239e <TIMER_VidSetCallBack+0x22>
		GLOBAL_VidPointer=LOCAL_VidPointer;
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	9a 81       	ldd	r25, Y+2	; 0x02
    2396:	90 93 91 02 	sts	0x0291, r25
    239a:	80 93 90 02 	sts	0x0290, r24
	}
}
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	cf 91       	pop	r28
    23a4:	df 91       	pop	r29
    23a6:	08 95       	ret

000023a8 <TIMER_VidInit>:


void TIMER_VidInit(void){
    23a8:	df 93       	push	r29
    23aa:	cf 93       	push	r28
    23ac:	cd b7       	in	r28, 0x3d	; 61
    23ae:	de b7       	in	r29, 0x3e	; 62
#elif TIMER0_PRE_SCALLER==TIMER0_PRE_64
	CLR_BIT(TCCR0,PIN2);
	SET_BIT(TCCR0,PIN1);
	SET_BIT(TCCR0,PIN0);
#elif TIMER0_PRE_SCALLER==TIMER0_PRE_256
	SET_BIT(TCCR0,PIN2);
    23b0:	a3 e5       	ldi	r26, 0x53	; 83
    23b2:	b0 e0       	ldi	r27, 0x00	; 0
    23b4:	e3 e5       	ldi	r30, 0x53	; 83
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	80 81       	ld	r24, Z
    23ba:	84 60       	ori	r24, 0x04	; 4
    23bc:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,PIN1);
    23be:	a3 e5       	ldi	r26, 0x53	; 83
    23c0:	b0 e0       	ldi	r27, 0x00	; 0
    23c2:	e3 e5       	ldi	r30, 0x53	; 83
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	80 81       	ld	r24, Z
    23c8:	8d 7f       	andi	r24, 0xFD	; 253
    23ca:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,PIN0);
    23cc:	a3 e5       	ldi	r26, 0x53	; 83
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	e3 e5       	ldi	r30, 0x53	; 83
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	80 81       	ld	r24, Z
    23d6:	8e 7f       	andi	r24, 0xFE	; 254
    23d8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,PIN5);
	CLR_BIT(TCCR0,PIN4);
	OCR0=125;
#elif TIMER0_MODE==TIMER0_FAST_PWM
	//interrupt Disable //
	CLR_BIT(TIMSK,PIN0);
    23da:	a9 e5       	ldi	r26, 0x59	; 89
    23dc:	b0 e0       	ldi	r27, 0x00	; 0
    23de:	e9 e5       	ldi	r30, 0x59	; 89
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	8e 7f       	andi	r24, 0xFE	; 254
    23e6:	8c 93       	st	X, r24
	CLR_BIT(TIMSK,PIN1);
    23e8:	a9 e5       	ldi	r26, 0x59	; 89
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	e9 e5       	ldi	r30, 0x59	; 89
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	8d 7f       	andi	r24, 0xFD	; 253
    23f4:	8c 93       	st	X, r24
   //SELECT fast_PWM mode//
	SET_BIT(TCCR0,PIN6);
    23f6:	a3 e5       	ldi	r26, 0x53	; 83
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	e3 e5       	ldi	r30, 0x53	; 83
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	80 64       	ori	r24, 0x40	; 64
    2402:	8c 93       	st	X, r24
	SET_BIT(TCCR0,PIN3);
    2404:	a3 e5       	ldi	r26, 0x53	; 83
    2406:	b0 e0       	ldi	r27, 0x00	; 0
    2408:	e3 e5       	ldi	r30, 0x53	; 83
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	88 60       	ori	r24, 0x08	; 8
    2410:	8c 93       	st	X, r24
  //SELECT Non inverted mode//
	CLR_BIT(TCCR0,PIN4);
    2412:	a3 e5       	ldi	r26, 0x53	; 83
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	e3 e5       	ldi	r30, 0x53	; 83
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	8f 7e       	andi	r24, 0xEF	; 239
    241e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,PIN5);
    2420:	a3 e5       	ldi	r26, 0x53	; 83
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	e3 e5       	ldi	r30, 0x53	; 83
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	80 62       	ori	r24, 0x20	; 32
    242c:	8c 93       	st	X, r24
	OCR0=120;//ton will 128 mean the duty cyle equal 50% //
    242e:	ec e5       	ldi	r30, 0x5C	; 92
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	88 e7       	ldi	r24, 0x78	; 120
    2434:	80 83       	st	Z, r24

#endif

}
    2436:	cf 91       	pop	r28
    2438:	df 91       	pop	r29
    243a:	08 95       	ret

0000243c <TIMER0_VidSetDutyCycle>:


void TIMER0_VidSetDutyCycle(u8 LOC_u8Volt){
    243c:	df 93       	push	r29
    243e:	cf 93       	push	r28
    2440:	0f 92       	push	r0
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
    2446:	89 83       	std	Y+1, r24	; 0x01
//pinB 3//


    OCR0=LOC_u8Volt;
    2448:	ec e5       	ldi	r30, 0x5C	; 92
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	89 81       	ldd	r24, Y+1	; 0x01
    244e:	80 83       	st	Z, r24
	//take the volt//

}
    2450:	0f 90       	pop	r0
    2452:	cf 91       	pop	r28
    2454:	df 91       	pop	r29
    2456:	08 95       	ret

00002458 <__vector_11>:
//OVER_FLOW//
void __vector_11(void){
    2458:	1f 92       	push	r1
    245a:	0f 92       	push	r0
    245c:	0f b6       	in	r0, 0x3f	; 63
    245e:	0f 92       	push	r0
    2460:	11 24       	eor	r1, r1
    2462:	2f 93       	push	r18
    2464:	3f 93       	push	r19
    2466:	4f 93       	push	r20
    2468:	5f 93       	push	r21
    246a:	6f 93       	push	r22
    246c:	7f 93       	push	r23
    246e:	8f 93       	push	r24
    2470:	9f 93       	push	r25
    2472:	af 93       	push	r26
    2474:	bf 93       	push	r27
    2476:	ef 93       	push	r30
    2478:	ff 93       	push	r31
    247a:	df 93       	push	r29
    247c:	cf 93       	push	r28
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
	if(GLOBAL_VidPointer!=NULL){
    2482:	80 91 90 02 	lds	r24, 0x0290
    2486:	90 91 91 02 	lds	r25, 0x0291
    248a:	00 97       	sbiw	r24, 0x00	; 0
    248c:	29 f0       	breq	.+10     	; 0x2498 <__vector_11+0x40>
		
		  GLOBAL_VidPointer();
    248e:	e0 91 90 02 	lds	r30, 0x0290
    2492:	f0 91 91 02 	lds	r31, 0x0291
    2496:	09 95       	icall
	}	
}
    2498:	cf 91       	pop	r28
    249a:	df 91       	pop	r29
    249c:	ff 91       	pop	r31
    249e:	ef 91       	pop	r30
    24a0:	bf 91       	pop	r27
    24a2:	af 91       	pop	r26
    24a4:	9f 91       	pop	r25
    24a6:	8f 91       	pop	r24
    24a8:	7f 91       	pop	r23
    24aa:	6f 91       	pop	r22
    24ac:	5f 91       	pop	r21
    24ae:	4f 91       	pop	r20
    24b0:	3f 91       	pop	r19
    24b2:	2f 91       	pop	r18
    24b4:	0f 90       	pop	r0
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	0f 90       	pop	r0
    24ba:	1f 90       	pop	r1
    24bc:	18 95       	reti

000024be <__vector_10>:
//CTC//
void __vector_10(void){
    24be:	1f 92       	push	r1
    24c0:	0f 92       	push	r0
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	0f 92       	push	r0
    24c6:	11 24       	eor	r1, r1
    24c8:	2f 93       	push	r18
    24ca:	3f 93       	push	r19
    24cc:	4f 93       	push	r20
    24ce:	5f 93       	push	r21
    24d0:	6f 93       	push	r22
    24d2:	7f 93       	push	r23
    24d4:	8f 93       	push	r24
    24d6:	9f 93       	push	r25
    24d8:	af 93       	push	r26
    24da:	bf 93       	push	r27
    24dc:	ef 93       	push	r30
    24de:	ff 93       	push	r31
    24e0:	df 93       	push	r29
    24e2:	cf 93       	push	r28
    24e4:	cd b7       	in	r28, 0x3d	; 61
    24e6:	de b7       	in	r29, 0x3e	; 62
	if(GLOBAL_VidPointer!=NULL){
    24e8:	80 91 90 02 	lds	r24, 0x0290
    24ec:	90 91 91 02 	lds	r25, 0x0291
    24f0:	00 97       	sbiw	r24, 0x00	; 0
    24f2:	29 f0       	breq	.+10     	; 0x24fe <__vector_10+0x40>
		
		GLOBAL_VidPointer();
    24f4:	e0 91 90 02 	lds	r30, 0x0290
    24f8:	f0 91 91 02 	lds	r31, 0x0291
    24fc:	09 95       	icall
	}	
}
    24fe:	cf 91       	pop	r28
    2500:	df 91       	pop	r29
    2502:	ff 91       	pop	r31
    2504:	ef 91       	pop	r30
    2506:	bf 91       	pop	r27
    2508:	af 91       	pop	r26
    250a:	9f 91       	pop	r25
    250c:	8f 91       	pop	r24
    250e:	7f 91       	pop	r23
    2510:	6f 91       	pop	r22
    2512:	5f 91       	pop	r21
    2514:	4f 91       	pop	r20
    2516:	3f 91       	pop	r19
    2518:	2f 91       	pop	r18
    251a:	0f 90       	pop	r0
    251c:	0f be       	out	0x3f, r0	; 63
    251e:	0f 90       	pop	r0
    2520:	1f 90       	pop	r1
    2522:	18 95       	reti

00002524 <main>:
                                                                                             *                                  
location 5 to draw on the bits before first wave start and secand wave start  ---- in line 1
location 6 to draw X axis line 2
*/

void main(void){
    2524:	af 92       	push	r10
    2526:	cf 92       	push	r12
    2528:	df 92       	push	r13
    252a:	ef 92       	push	r14
    252c:	ff 92       	push	r15
    252e:	0f 93       	push	r16
    2530:	1f 93       	push	r17
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
    253a:	e3 97       	sbiw	r28, 0x33	; 51
    253c:	0f b6       	in	r0, 0x3f	; 63
    253e:	f8 94       	cli
    2540:	de bf       	out	0x3e, r29	; 62
    2542:	0f be       	out	0x3f, r0	; 63
    2544:	cd bf       	out	0x3d, r28	; 61
    u16 Freq=0;
    2546:	1b aa       	std	Y+51, r1	; 0x33
    2548:	1a aa       	std	Y+50, r1	; 0x32
	u8 Veff=0;
    254a:	19 aa       	std	Y+49, r1	; 0x31
    f32 Ton,Ttotal,Dudty=0,ANALOG=0,Duty_square;
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	a0 e0       	ldi	r26, 0x00	; 0
    2552:	b0 e0       	ldi	r27, 0x00	; 0
    2554:	8d a3       	std	Y+37, r24	; 0x25
    2556:	9e a3       	std	Y+38, r25	; 0x26
    2558:	af a3       	std	Y+39, r26	; 0x27
    255a:	b8 a7       	std	Y+40, r27	; 0x28
    255c:	80 e0       	ldi	r24, 0x00	; 0
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	a0 e0       	ldi	r26, 0x00	; 0
    2562:	b0 e0       	ldi	r27, 0x00	; 0
    2564:	89 a3       	std	Y+33, r24	; 0x21
    2566:	9a a3       	std	Y+34, r25	; 0x22
    2568:	ab a3       	std	Y+35, r26	; 0x23
    256a:	bc a3       	std	Y+36, r27	; 0x24
       ADC_VidInit(); 
    256c:	0e 94 2d 07 	call	0xe5a	; 0xe5a <ADC_VidInit>
       LCD_VidInit(PORTC,PORTD);
    2570:	82 e0       	ldi	r24, 0x02	; 2
    2572:	63 e0       	ldi	r22, 0x03	; 3
    2574:	0e 94 17 0b 	call	0x162e	; 0x162e <LCD_VidInit>
    	GIE_VidEnable();
    2578:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <GIE_VidEnable>
	DIO_VidSetPinDirection(PORTD,PIN6,INPUT);//TIMER1 ICP//
    257c:	83 e0       	ldi	r24, 0x03	; 3
    257e:	66 e0       	ldi	r22, 0x06	; 6
    2580:	40 e0       	ldi	r20, 0x00	; 0
    2582:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(PORTB,PIN3,OUTPUT);// FOR TIMER0 A PWM//
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	63 e0       	ldi	r22, 0x03	; 3
    258a:	41 e0       	ldi	r20, 0x01	; 1
    258c:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_VidSetPinDirection>
	TIMER1_SetCallBackIcp(TIMER1_VidIsrIcp); //ICP inerrupt//
    2590:	8b e9       	ldi	r24, 0x9B	; 155
    2592:	94 e1       	ldi	r25, 0x14	; 20
    2594:	0e 94 94 10 	call	0x2128	; 0x2128 <TIMER1_SetCallBackIcp>
	TIMER1_SetCallBack(TIMER1_VidIsrOverFlow);// over flow interrupt//
    2598:	81 ef       	ldi	r24, 0xF1	; 241
    259a:	94 e1       	ldi	r25, 0x14	; 20
    259c:	0e 94 aa 10 	call	0x2154	; 0x2154 <TIMER1_SetCallBack>
	TIMER1_VidInit();//init timer1//
    25a0:	0e 94 c0 10 	call	0x2180	; 0x2180 <TIMER1_VidInit>
	TIMER_VidInit();//init timer0//
    25a4:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <TIMER_VidInit>
	while(1){
       if(flag==3){
    25a8:	80 91 92 02 	lds	r24, 0x0292
    25ac:	83 30       	cpi	r24, 0x03	; 3
    25ae:	e1 f7       	brne	.-8      	; 0x25a8 <main+0x84>
    	    Ton=(snap2-snap1);
    25b0:	20 91 96 02 	lds	r18, 0x0296
    25b4:	30 91 97 02 	lds	r19, 0x0297
    25b8:	80 91 94 02 	lds	r24, 0x0294
    25bc:	90 91 95 02 	lds	r25, 0x0295
    25c0:	a9 01       	movw	r20, r18
    25c2:	48 1b       	sub	r20, r24
    25c4:	59 0b       	sbc	r21, r25
    25c6:	ca 01       	movw	r24, r20
    25c8:	cc 01       	movw	r24, r24
    25ca:	a0 e0       	ldi	r26, 0x00	; 0
    25cc:	b0 e0       	ldi	r27, 0x00	; 0
    25ce:	bc 01       	movw	r22, r24
    25d0:	cd 01       	movw	r24, r26
    25d2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	8d a7       	std	Y+45, r24	; 0x2d
    25dc:	9e a7       	std	Y+46, r25	; 0x2e
    25de:	af a7       	std	Y+47, r26	; 0x2f
    25e0:	b8 ab       	std	Y+48, r27	; 0x30
		    Ttotal=snap3-snap1;
    25e2:	20 91 98 02 	lds	r18, 0x0298
    25e6:	30 91 99 02 	lds	r19, 0x0299
    25ea:	80 91 94 02 	lds	r24, 0x0294
    25ee:	90 91 95 02 	lds	r25, 0x0295
    25f2:	a9 01       	movw	r20, r18
    25f4:	48 1b       	sub	r20, r24
    25f6:	59 0b       	sbc	r21, r25
    25f8:	ca 01       	movw	r24, r20
    25fa:	cc 01       	movw	r24, r24
    25fc:	a0 e0       	ldi	r26, 0x00	; 0
    25fe:	b0 e0       	ldi	r27, 0x00	; 0
    2600:	bc 01       	movw	r22, r24
    2602:	cd 01       	movw	r24, r26
    2604:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	89 a7       	std	Y+41, r24	; 0x29
    260e:	9a a7       	std	Y+42, r25	; 0x2a
    2610:	ab a7       	std	Y+43, r26	; 0x2b
    2612:	bc a7       	std	Y+44, r27	; 0x2c
			Dudty= (Ton/Ttotal)*100;
    2614:	6d a5       	ldd	r22, Y+45	; 0x2d
    2616:	7e a5       	ldd	r23, Y+46	; 0x2e
    2618:	8f a5       	ldd	r24, Y+47	; 0x2f
    261a:	98 a9       	ldd	r25, Y+48	; 0x30
    261c:	29 a5       	ldd	r18, Y+41	; 0x29
    261e:	3a a5       	ldd	r19, Y+42	; 0x2a
    2620:	4b a5       	ldd	r20, Y+43	; 0x2b
    2622:	5c a5       	ldd	r21, Y+44	; 0x2c
    2624:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	bc 01       	movw	r22, r24
    262e:	cd 01       	movw	r24, r26
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	48 ec       	ldi	r20, 0xC8	; 200
    2636:	52 e4       	ldi	r21, 0x42	; 66
    2638:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	8d a3       	std	Y+37, r24	; 0x25
    2642:	9e a3       	std	Y+38, r25	; 0x26
    2644:	af a3       	std	Y+39, r26	; 0x27
    2646:	b8 a7       	std	Y+40, r27	; 0x28
		    Freq=1/(Ttotal*0.0000005);
    2648:	69 a5       	ldd	r22, Y+41	; 0x29
    264a:	7a a5       	ldd	r23, Y+42	; 0x2a
    264c:	8b a5       	ldd	r24, Y+43	; 0x2b
    264e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2650:	2d eb       	ldi	r18, 0xBD	; 189
    2652:	37 e3       	ldi	r19, 0x37	; 55
    2654:	46 e0       	ldi	r20, 0x06	; 6
    2656:	55 e3       	ldi	r21, 0x35	; 53
    2658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	9c 01       	movw	r18, r24
    2662:	ad 01       	movw	r20, r26
    2664:	60 e0       	ldi	r22, 0x00	; 0
    2666:	70 e0       	ldi	r23, 0x00	; 0
    2668:	80 e8       	ldi	r24, 0x80	; 128
    266a:	9f e3       	ldi	r25, 0x3F	; 63
    266c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	bc 01       	movw	r22, r24
    2676:	cd 01       	movw	r24, r26
    2678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	9b ab       	std	Y+51, r25	; 0x33
    2682:	8a ab       	std	Y+50, r24	; 0x32
		    Duty_square=sqrt((Ton/Ttotal));
    2684:	6d a5       	ldd	r22, Y+45	; 0x2d
    2686:	7e a5       	ldd	r23, Y+46	; 0x2e
    2688:	8f a5       	ldd	r24, Y+47	; 0x2f
    268a:	98 a9       	ldd	r25, Y+48	; 0x30
    268c:	29 a5       	ldd	r18, Y+41	; 0x29
    268e:	3a a5       	ldd	r19, Y+42	; 0x2a
    2690:	4b a5       	ldd	r20, Y+43	; 0x2b
    2692:	5c a5       	ldd	r21, Y+44	; 0x2c
    2694:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	bc 01       	movw	r22, r24
    269e:	cd 01       	movw	r24, r26
    26a0:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <sqrt>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	8d 8f       	std	Y+29, r24	; 0x1d
    26aa:	9e 8f       	std	Y+30, r25	; 0x1e
    26ac:	af 8f       	std	Y+31, r26	; 0x1f
    26ae:	b8 a3       	std	Y+32, r27	; 0x20
		    Veff=5*(Duty_square);
    26b0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    26b2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    26b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26b6:	98 a1       	ldd	r25, Y+32	; 0x20
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	40 ea       	ldi	r20, 0xA0	; 160
    26be:	50 e4       	ldi	r21, 0x40	; 64
    26c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	bc 01       	movw	r22, r24
    26ca:	cd 01       	movw	r24, r26
    26cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	89 ab       	std	Y+49, r24	; 0x31
			LCD_VidDisplayNumber(Ton,Ttotal,Dudty,Freq,Veff);
    26d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    26d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    26da:	af a5       	ldd	r26, Y+47	; 0x2f
    26dc:	b8 a9       	ldd	r27, Y+48	; 0x30
    26de:	29 a5       	ldd	r18, Y+41	; 0x29
    26e0:	3a a5       	ldd	r19, Y+42	; 0x2a
    26e2:	4b a5       	ldd	r20, Y+43	; 0x2b
    26e4:	5c a5       	ldd	r21, Y+44	; 0x2c
    26e6:	ed a0       	ldd	r14, Y+37	; 0x25
    26e8:	fe a0       	ldd	r15, Y+38	; 0x26
    26ea:	0f a1       	ldd	r16, Y+39	; 0x27
    26ec:	18 a5       	ldd	r17, Y+40	; 0x28
    26ee:	ea a9       	ldd	r30, Y+50	; 0x32
    26f0:	fb a9       	ldd	r31, Y+51	; 0x33
    26f2:	bc 01       	movw	r22, r24
    26f4:	cd 01       	movw	r24, r26
    26f6:	6f 01       	movw	r12, r30
    26f8:	a9 a8       	ldd	r10, Y+49	; 0x31
    26fa:	0e 94 fd 14 	call	0x29fa	; 0x29fa <LCD_VidDisplayNumber>
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	90 e8       	ldi	r25, 0x80	; 128
    2702:	ab e3       	ldi	r26, 0x3B	; 59
    2704:	b5 e4       	ldi	r27, 0x45	; 69
    2706:	89 8f       	std	Y+25, r24	; 0x19
    2708:	9a 8f       	std	Y+26, r25	; 0x1a
    270a:	ab 8f       	std	Y+27, r26	; 0x1b
    270c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    270e:	69 8d       	ldd	r22, Y+25	; 0x19
    2710:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2712:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2714:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	4a ef       	ldi	r20, 0xFA	; 250
    271c:	54 e4       	ldi	r21, 0x44	; 68
    271e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2722:	dc 01       	movw	r26, r24
    2724:	cb 01       	movw	r24, r22
    2726:	8d 8b       	std	Y+21, r24	; 0x15
    2728:	9e 8b       	std	Y+22, r25	; 0x16
    272a:	af 8b       	std	Y+23, r26	; 0x17
    272c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    272e:	6d 89       	ldd	r22, Y+21	; 0x15
    2730:	7e 89       	ldd	r23, Y+22	; 0x16
    2732:	8f 89       	ldd	r24, Y+23	; 0x17
    2734:	98 8d       	ldd	r25, Y+24	; 0x18
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	40 e8       	ldi	r20, 0x80	; 128
    273c:	5f e3       	ldi	r21, 0x3F	; 63
    273e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2742:	88 23       	and	r24, r24
    2744:	2c f4       	brge	.+10     	; 0x2750 <main+0x22c>
		__ticks = 1;
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	9c 8b       	std	Y+20, r25	; 0x14
    274c:	8b 8b       	std	Y+19, r24	; 0x13
    274e:	3f c0       	rjmp	.+126    	; 0x27ce <main+0x2aa>
	else if (__tmp > 65535)
    2750:	6d 89       	ldd	r22, Y+21	; 0x15
    2752:	7e 89       	ldd	r23, Y+22	; 0x16
    2754:	8f 89       	ldd	r24, Y+23	; 0x17
    2756:	98 8d       	ldd	r25, Y+24	; 0x18
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	3f ef       	ldi	r19, 0xFF	; 255
    275c:	4f e7       	ldi	r20, 0x7F	; 127
    275e:	57 e4       	ldi	r21, 0x47	; 71
    2760:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2764:	18 16       	cp	r1, r24
    2766:	4c f5       	brge	.+82     	; 0x27ba <main+0x296>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2768:	69 8d       	ldd	r22, Y+25	; 0x19
    276a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    276c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    276e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	40 e2       	ldi	r20, 0x20	; 32
    2776:	51 e4       	ldi	r21, 0x41	; 65
    2778:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	bc 01       	movw	r22, r24
    2782:	cd 01       	movw	r24, r26
    2784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	9c 8b       	std	Y+20, r25	; 0x14
    278e:	8b 8b       	std	Y+19, r24	; 0x13
    2790:	0f c0       	rjmp	.+30     	; 0x27b0 <main+0x28c>
    2792:	88 ec       	ldi	r24, 0xC8	; 200
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	9a 8b       	std	Y+18, r25	; 0x12
    2798:	89 8b       	std	Y+17, r24	; 0x11
    279a:	89 89       	ldd	r24, Y+17	; 0x11
    279c:	9a 89       	ldd	r25, Y+18	; 0x12
    279e:	01 97       	sbiw	r24, 0x01	; 1
    27a0:	f1 f7       	brne	.-4      	; 0x279e <main+0x27a>
    27a2:	9a 8b       	std	Y+18, r25	; 0x12
    27a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a6:	8b 89       	ldd	r24, Y+19	; 0x13
    27a8:	9c 89       	ldd	r25, Y+20	; 0x14
    27aa:	01 97       	sbiw	r24, 0x01	; 1
    27ac:	9c 8b       	std	Y+20, r25	; 0x14
    27ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b0:	8b 89       	ldd	r24, Y+19	; 0x13
    27b2:	9c 89       	ldd	r25, Y+20	; 0x14
    27b4:	00 97       	sbiw	r24, 0x00	; 0
    27b6:	69 f7       	brne	.-38     	; 0x2792 <main+0x26e>
    27b8:	14 c0       	rjmp	.+40     	; 0x27e2 <main+0x2be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ba:	6d 89       	ldd	r22, Y+21	; 0x15
    27bc:	7e 89       	ldd	r23, Y+22	; 0x16
    27be:	8f 89       	ldd	r24, Y+23	; 0x17
    27c0:	98 8d       	ldd	r25, Y+24	; 0x18
    27c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	9c 8b       	std	Y+20, r25	; 0x14
    27cc:	8b 8b       	std	Y+19, r24	; 0x13
    27ce:	8b 89       	ldd	r24, Y+19	; 0x13
    27d0:	9c 89       	ldd	r25, Y+20	; 0x14
    27d2:	98 8b       	std	Y+16, r25	; 0x10
    27d4:	8f 87       	std	Y+15, r24	; 0x0f
    27d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    27d8:	98 89       	ldd	r25, Y+16	; 0x10
    27da:	01 97       	sbiw	r24, 0x01	; 1
    27dc:	f1 f7       	brne	.-4      	; 0x27da <main+0x2b6>
    27de:	98 8b       	std	Y+16, r25	; 0x10
    27e0:	8f 87       	std	Y+15, r24	; 0x0f
		   _delay_ms(3000);
			LCD_VidDisplay(Dudty,Veff);
    27e2:	6d a1       	ldd	r22, Y+37	; 0x25
    27e4:	7e a1       	ldd	r23, Y+38	; 0x26
    27e6:	8f a1       	ldd	r24, Y+39	; 0x27
    27e8:	98 a5       	ldd	r25, Y+40	; 0x28
    27ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	69 a9       	ldd	r22, Y+49	; 0x31
    27f4:	0e 94 77 19 	call	0x32ee	; 0x32ee <LCD_VidDisplay>
    27f8:	80 e0       	ldi	r24, 0x00	; 0
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	aa e7       	ldi	r26, 0x7A	; 122
    27fe:	b4 e4       	ldi	r27, 0x44	; 68
    2800:	8b 87       	std	Y+11, r24	; 0x0b
    2802:	9c 87       	std	Y+12, r25	; 0x0c
    2804:	ad 87       	std	Y+13, r26	; 0x0d
    2806:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2808:	6b 85       	ldd	r22, Y+11	; 0x0b
    280a:	7c 85       	ldd	r23, Y+12	; 0x0c
    280c:	8d 85       	ldd	r24, Y+13	; 0x0d
    280e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	4a ef       	ldi	r20, 0xFA	; 250
    2816:	54 e4       	ldi	r21, 0x44	; 68
    2818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	8f 83       	std	Y+7, r24	; 0x07
    2822:	98 87       	std	Y+8, r25	; 0x08
    2824:	a9 87       	std	Y+9, r26	; 0x09
    2826:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2828:	6f 81       	ldd	r22, Y+7	; 0x07
    282a:	78 85       	ldd	r23, Y+8	; 0x08
    282c:	89 85       	ldd	r24, Y+9	; 0x09
    282e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	40 e8       	ldi	r20, 0x80	; 128
    2836:	5f e3       	ldi	r21, 0x3F	; 63
    2838:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    283c:	88 23       	and	r24, r24
    283e:	2c f4       	brge	.+10     	; 0x284a <main+0x326>
		__ticks = 1;
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	9e 83       	std	Y+6, r25	; 0x06
    2846:	8d 83       	std	Y+5, r24	; 0x05
    2848:	3f c0       	rjmp	.+126    	; 0x28c8 <main+0x3a4>
	else if (__tmp > 65535)
    284a:	6f 81       	ldd	r22, Y+7	; 0x07
    284c:	78 85       	ldd	r23, Y+8	; 0x08
    284e:	89 85       	ldd	r24, Y+9	; 0x09
    2850:	9a 85       	ldd	r25, Y+10	; 0x0a
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	3f ef       	ldi	r19, 0xFF	; 255
    2856:	4f e7       	ldi	r20, 0x7F	; 127
    2858:	57 e4       	ldi	r21, 0x47	; 71
    285a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    285e:	18 16       	cp	r1, r24
    2860:	4c f5       	brge	.+82     	; 0x28b4 <main+0x390>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2862:	6b 85       	ldd	r22, Y+11	; 0x0b
    2864:	7c 85       	ldd	r23, Y+12	; 0x0c
    2866:	8d 85       	ldd	r24, Y+13	; 0x0d
    2868:	9e 85       	ldd	r25, Y+14	; 0x0e
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	40 e2       	ldi	r20, 0x20	; 32
    2870:	51 e4       	ldi	r21, 0x41	; 65
    2872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	bc 01       	movw	r22, r24
    287c:	cd 01       	movw	r24, r26
    287e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	9e 83       	std	Y+6, r25	; 0x06
    2888:	8d 83       	std	Y+5, r24	; 0x05
    288a:	0f c0       	rjmp	.+30     	; 0x28aa <main+0x386>
    288c:	88 ec       	ldi	r24, 0xC8	; 200
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	9c 83       	std	Y+4, r25	; 0x04
    2892:	8b 83       	std	Y+3, r24	; 0x03
    2894:	8b 81       	ldd	r24, Y+3	; 0x03
    2896:	9c 81       	ldd	r25, Y+4	; 0x04
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	f1 f7       	brne	.-4      	; 0x2898 <main+0x374>
    289c:	9c 83       	std	Y+4, r25	; 0x04
    289e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a0:	8d 81       	ldd	r24, Y+5	; 0x05
    28a2:	9e 81       	ldd	r25, Y+6	; 0x06
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	9e 83       	std	Y+6, r25	; 0x06
    28a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28aa:	8d 81       	ldd	r24, Y+5	; 0x05
    28ac:	9e 81       	ldd	r25, Y+6	; 0x06
    28ae:	00 97       	sbiw	r24, 0x00	; 0
    28b0:	69 f7       	brne	.-38     	; 0x288c <main+0x368>
    28b2:	14 c0       	rjmp	.+40     	; 0x28dc <main+0x3b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b4:	6f 81       	ldd	r22, Y+7	; 0x07
    28b6:	78 85       	ldd	r23, Y+8	; 0x08
    28b8:	89 85       	ldd	r24, Y+9	; 0x09
    28ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    28bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	9e 83       	std	Y+6, r25	; 0x06
    28c6:	8d 83       	std	Y+5, r24	; 0x05
    28c8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ca:	9e 81       	ldd	r25, Y+6	; 0x06
    28cc:	9a 83       	std	Y+2, r25	; 0x02
    28ce:	89 83       	std	Y+1, r24	; 0x01
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	9a 81       	ldd	r25, Y+2	; 0x02
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	f1 f7       	brne	.-4      	; 0x28d4 <main+0x3b0>
    28d8:	9a 83       	std	Y+2, r25	; 0x02
    28da:	89 83       	std	Y+1, r24	; 0x01
			 _delay_ms(1000);

		    ANALOG=ADC_VidGetReadingPooling(ADC0);
    28dc:	80 e0       	ldi	r24, 0x00	; 0
    28de:	0e 94 6c 07 	call	0xed8	; 0xed8 <ADC_VidGetReadingPooling>
    28e2:	cc 01       	movw	r24, r24
    28e4:	a0 e0       	ldi	r26, 0x00	; 0
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	bc 01       	movw	r22, r24
    28ea:	cd 01       	movw	r24, r26
    28ec:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	89 a3       	std	Y+33, r24	; 0x21
    28f6:	9a a3       	std	Y+34, r25	; 0x22
    28f8:	ab a3       	std	Y+35, r26	; 0x23
    28fa:	bc a3       	std	Y+36, r27	; 0x24
		    ANALOG*=0.25;
    28fc:	69 a1       	ldd	r22, Y+33	; 0x21
    28fe:	7a a1       	ldd	r23, Y+34	; 0x22
    2900:	8b a1       	ldd	r24, Y+35	; 0x23
    2902:	9c a1       	ldd	r25, Y+36	; 0x24
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	40 e8       	ldi	r20, 0x80	; 128
    290a:	5e e3       	ldi	r21, 0x3E	; 62
    290c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	89 a3       	std	Y+33, r24	; 0x21
    2916:	9a a3       	std	Y+34, r25	; 0x22
    2918:	ab a3       	std	Y+35, r26	; 0x23
    291a:	bc a3       	std	Y+36, r27	; 0x24
		    TIMER0_VidSetDutyCycle(ANALOG);
    291c:	69 a1       	ldd	r22, Y+33	; 0x21
    291e:	7a a1       	ldd	r23, Y+34	; 0x22
    2920:	8b a1       	ldd	r24, Y+35	; 0x23
    2922:	9c a1       	ldd	r25, Y+36	; 0x24
    2924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	0e 94 1e 12 	call	0x243c	; 0x243c <TIMER0_VidSetDutyCycle>
    	             flag=0;
    2930:	10 92 92 02 	sts	0x0292, r1
    2934:	39 ce       	rjmp	.-910    	; 0x25a8 <main+0x84>

00002936 <TIMER1_VidIsrIcp>:
	       }
      }
}
void TIMER1_VidIsrIcp(void){
    2936:	df 93       	push	r29
    2938:	cf 93       	push	r28
    293a:	cd b7       	in	r28, 0x3d	; 61
    293c:	de b7       	in	r29, 0x3e	; 62
	if(flag==0){
    293e:	80 91 92 02 	lds	r24, 0x0292
    2942:	88 23       	and	r24, r24
    2944:	89 f4       	brne	.+34     	; 0x2968 <TIMER1_VidIsrIcp+0x32>
		snap1=ICR1;
    2946:	e6 e4       	ldi	r30, 0x46	; 70
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	80 81       	ld	r24, Z
    294c:	91 81       	ldd	r25, Z+1	; 0x01
    294e:	90 93 95 02 	sts	0x0295, r25
    2952:	80 93 94 02 	sts	0x0294, r24
		over_flow=0;
    2956:	10 92 93 02 	sts	0x0293, r1
		TIMER1_VidSenceControlIcp(FALLING);
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	0e 94 1b 11 	call	0x2236	; 0x2236 <TIMER1_VidSenceControlIcp>
		flag=1;
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	80 93 92 02 	sts	0x0292, r24
    2966:	3a c0       	rjmp	.+116    	; 0x29dc <TIMER1_VidIsrIcp+0xa6>
	}
	else if(flag==1){
    2968:	80 91 92 02 	lds	r24, 0x0292
    296c:	81 30       	cpi	r24, 0x01	; 1
    296e:	d1 f4       	brne	.+52     	; 0x29a4 <TIMER1_VidIsrIcp+0x6e>
        snap2=ICR1+(over_flow*65536);
    2970:	e6 e4       	ldi	r30, 0x46	; 70
    2972:	f0 e0       	ldi	r31, 0x00	; 0
    2974:	20 81       	ld	r18, Z
    2976:	31 81       	ldd	r19, Z+1	; 0x01
    2978:	80 91 93 02 	lds	r24, 0x0293
    297c:	88 2f       	mov	r24, r24
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	a0 e0       	ldi	r26, 0x00	; 0
    2982:	b0 e0       	ldi	r27, 0x00	; 0
    2984:	dc 01       	movw	r26, r24
    2986:	99 27       	eor	r25, r25
    2988:	88 27       	eor	r24, r24
    298a:	82 0f       	add	r24, r18
    298c:	93 1f       	adc	r25, r19
    298e:	90 93 97 02 	sts	0x0297, r25
    2992:	80 93 96 02 	sts	0x0296, r24
        TIMER1_VidSenceControlIcp(RISING);
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	0e 94 1b 11 	call	0x2236	; 0x2236 <TIMER1_VidSenceControlIcp>
        flag=2;
    299c:	82 e0       	ldi	r24, 0x02	; 2
    299e:	80 93 92 02 	sts	0x0292, r24
    29a2:	1c c0       	rjmp	.+56     	; 0x29dc <TIMER1_VidIsrIcp+0xa6>
	}
	else if(flag==2){
    29a4:	80 91 92 02 	lds	r24, 0x0292
    29a8:	82 30       	cpi	r24, 0x02	; 2
    29aa:	c1 f4       	brne	.+48     	; 0x29dc <TIMER1_VidIsrIcp+0xa6>
        snap3=ICR1+(over_flow*65536);
    29ac:	e6 e4       	ldi	r30, 0x46	; 70
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	20 81       	ld	r18, Z
    29b2:	31 81       	ldd	r19, Z+1	; 0x01
    29b4:	80 91 93 02 	lds	r24, 0x0293
    29b8:	88 2f       	mov	r24, r24
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	a0 e0       	ldi	r26, 0x00	; 0
    29be:	b0 e0       	ldi	r27, 0x00	; 0
    29c0:	dc 01       	movw	r26, r24
    29c2:	99 27       	eor	r25, r25
    29c4:	88 27       	eor	r24, r24
    29c6:	82 0f       	add	r24, r18
    29c8:	93 1f       	adc	r25, r19
    29ca:	90 93 99 02 	sts	0x0299, r25
    29ce:	80 93 98 02 	sts	0x0298, r24
        over_flow=0;
    29d2:	10 92 93 02 	sts	0x0293, r1
        flag=3;
    29d6:	83 e0       	ldi	r24, 0x03	; 3
    29d8:	80 93 92 02 	sts	0x0292, r24
	}
}
    29dc:	cf 91       	pop	r28
    29de:	df 91       	pop	r29
    29e0:	08 95       	ret

000029e2 <TIMER1_VidIsrOverFlow>:
void TIMER1_VidIsrOverFlow(void)
{
    29e2:	df 93       	push	r29
    29e4:	cf 93       	push	r28
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
	over_flow++;
    29ea:	80 91 93 02 	lds	r24, 0x0293
    29ee:	8f 5f       	subi	r24, 0xFF	; 255
    29f0:	80 93 93 02 	sts	0x0293, r24
}
    29f4:	cf 91       	pop	r28
    29f6:	df 91       	pop	r29
    29f8:	08 95       	ret

000029fa <LCD_VidDisplayNumber>:



void LCD_VidDisplayNumber(f32 LOC_f32Ton,f32 LOC_f32Ttotal,f32 LOC_f32Duty,u16 LOC_u16freq,u8 LOC_u8Veff){
    29fa:	af 92       	push	r10
    29fc:	cf 92       	push	r12
    29fe:	df 92       	push	r13
    2a00:	ef 92       	push	r14
    2a02:	ff 92       	push	r15
    2a04:	0f 93       	push	r16
    2a06:	1f 93       	push	r17
    2a08:	df 93       	push	r29
    2a0a:	cf 93       	push	r28
    2a0c:	cd b7       	in	r28, 0x3d	; 61
    2a0e:	de b7       	in	r29, 0x3e	; 62
    2a10:	c5 54       	subi	r28, 0x45	; 69
    2a12:	d0 40       	sbci	r29, 0x00	; 0
    2a14:	0f b6       	in	r0, 0x3f	; 63
    2a16:	f8 94       	cli
    2a18:	de bf       	out	0x3e, r29	; 62
    2a1a:	0f be       	out	0x3f, r0	; 63
    2a1c:	cd bf       	out	0x3d, r28	; 61
    2a1e:	6d a7       	std	Y+45, r22	; 0x2d
    2a20:	7e a7       	std	Y+46, r23	; 0x2e
    2a22:	8f a7       	std	Y+47, r24	; 0x2f
    2a24:	98 ab       	std	Y+48, r25	; 0x30
    2a26:	29 ab       	std	Y+49, r18	; 0x31
    2a28:	3a ab       	std	Y+50, r19	; 0x32
    2a2a:	4b ab       	std	Y+51, r20	; 0x33
    2a2c:	5c ab       	std	Y+52, r21	; 0x34
    2a2e:	ed aa       	std	Y+53, r14	; 0x35
    2a30:	fe aa       	std	Y+54, r15	; 0x36
    2a32:	0f ab       	std	Y+55, r16	; 0x37
    2a34:	18 af       	std	Y+56, r17	; 0x38
    2a36:	da ae       	std	Y+58, r13	; 0x3a
    2a38:	c9 ae       	std	Y+57, r12	; 0x39
    2a3a:	ab ae       	std	Y+59, r10	; 0x3b
	u8 i=0;
    2a3c:	19 82       	std	Y+1, r1	; 0x01
	u8 value_array[]={LOC_u16freq,LOC_f32Duty,LOC_f32Ton,LOC_f32Ttotal,LOC_u8Veff};
    2a3e:	f9 ac       	ldd	r15, Y+57	; 0x39
    2a40:	6d a9       	ldd	r22, Y+53	; 0x35
    2a42:	7e a9       	ldd	r23, Y+54	; 0x36
    2a44:	8f a9       	ldd	r24, Y+55	; 0x37
    2a46:	98 ad       	ldd	r25, Y+56	; 0x38
    2a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	cb 01       	movw	r24, r22
    2a50:	18 2f       	mov	r17, r24
    2a52:	6d a5       	ldd	r22, Y+45	; 0x2d
    2a54:	7e a5       	ldd	r23, Y+46	; 0x2e
    2a56:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a58:	98 a9       	ldd	r25, Y+48	; 0x30
    2a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	08 2f       	mov	r16, r24
    2a64:	69 a9       	ldd	r22, Y+49	; 0x31
    2a66:	7a a9       	ldd	r23, Y+50	; 0x32
    2a68:	8b a9       	ldd	r24, Y+51	; 0x33
    2a6a:	9c a9       	ldd	r25, Y+52	; 0x34
    2a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	fa 82       	std	Y+2, r15	; 0x02
    2a76:	1b 83       	std	Y+3, r17	; 0x03
    2a78:	0c 83       	std	Y+4, r16	; 0x04
    2a7a:	8d 83       	std	Y+5, r24	; 0x05
    2a7c:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a7e:	8e 83       	std	Y+6, r24	; 0x06
	u8 character_array[][6]={"F=","D=","On=","HZ T=","V="};
    2a80:	8e e1       	ldi	r24, 0x1E	; 30
    2a82:	fe 01       	movw	r30, r28
    2a84:	37 96       	adiw	r30, 0x07	; 7
    2a86:	df 01       	movw	r26, r30
    2a88:	98 2f       	mov	r25, r24
    2a8a:	1d 92       	st	X+, r1
    2a8c:	9a 95       	dec	r25
    2a8e:	e9 f7       	brne	.-6      	; 0x2a8a <LCD_VidDisplayNumber+0x90>
    2a90:	86 e4       	ldi	r24, 0x46	; 70
    2a92:	9d e3       	ldi	r25, 0x3D	; 61
    2a94:	a0 e0       	ldi	r26, 0x00	; 0
    2a96:	b0 e0       	ldi	r27, 0x00	; 0
    2a98:	8f 83       	std	Y+7, r24	; 0x07
    2a9a:	98 87       	std	Y+8, r25	; 0x08
    2a9c:	a9 87       	std	Y+9, r26	; 0x09
    2a9e:	ba 87       	std	Y+10, r27	; 0x0a
    2aa0:	1c 86       	std	Y+12, r1	; 0x0c
    2aa2:	1b 86       	std	Y+11, r1	; 0x0b
    2aa4:	84 e4       	ldi	r24, 0x44	; 68
    2aa6:	9d e3       	ldi	r25, 0x3D	; 61
    2aa8:	a0 e0       	ldi	r26, 0x00	; 0
    2aaa:	b0 e0       	ldi	r27, 0x00	; 0
    2aac:	8d 87       	std	Y+13, r24	; 0x0d
    2aae:	9e 87       	std	Y+14, r25	; 0x0e
    2ab0:	af 87       	std	Y+15, r26	; 0x0f
    2ab2:	b8 8b       	std	Y+16, r27	; 0x10
    2ab4:	1a 8a       	std	Y+18, r1	; 0x12
    2ab6:	19 8a       	std	Y+17, r1	; 0x11
    2ab8:	8f e4       	ldi	r24, 0x4F	; 79
    2aba:	9e e6       	ldi	r25, 0x6E	; 110
    2abc:	ad e3       	ldi	r26, 0x3D	; 61
    2abe:	b0 e0       	ldi	r27, 0x00	; 0
    2ac0:	8b 8b       	std	Y+19, r24	; 0x13
    2ac2:	9c 8b       	std	Y+20, r25	; 0x14
    2ac4:	ad 8b       	std	Y+21, r26	; 0x15
    2ac6:	be 8b       	std	Y+22, r27	; 0x16
    2ac8:	18 8e       	std	Y+24, r1	; 0x18
    2aca:	1f 8a       	std	Y+23, r1	; 0x17
    2acc:	de 01       	movw	r26, r28
    2ace:	59 96       	adiw	r26, 0x19	; 25
    2ad0:	bd af       	std	Y+61, r27	; 0x3d
    2ad2:	ac af       	std	Y+60, r26	; 0x3c
    2ad4:	e0 e6       	ldi	r30, 0x60	; 96
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	ff af       	std	Y+63, r31	; 0x3f
    2ada:	ee af       	std	Y+62, r30	; 0x3e
    2adc:	f6 e0       	ldi	r31, 0x06	; 6
    2ade:	21 96       	adiw	r28, 0x01	; 1
    2ae0:	ff af       	std	Y+63, r31	; 0x3f
    2ae2:	21 97       	sbiw	r28, 0x01	; 1
    2ae4:	ae ad       	ldd	r26, Y+62	; 0x3e
    2ae6:	bf ad       	ldd	r27, Y+63	; 0x3f
    2ae8:	0c 90       	ld	r0, X
    2aea:	ee ad       	ldd	r30, Y+62	; 0x3e
    2aec:	ff ad       	ldd	r31, Y+63	; 0x3f
    2aee:	31 96       	adiw	r30, 0x01	; 1
    2af0:	ff af       	std	Y+63, r31	; 0x3f
    2af2:	ee af       	std	Y+62, r30	; 0x3e
    2af4:	ac ad       	ldd	r26, Y+60	; 0x3c
    2af6:	bd ad       	ldd	r27, Y+61	; 0x3d
    2af8:	0c 92       	st	X, r0
    2afa:	ec ad       	ldd	r30, Y+60	; 0x3c
    2afc:	fd ad       	ldd	r31, Y+61	; 0x3d
    2afe:	31 96       	adiw	r30, 0x01	; 1
    2b00:	fd af       	std	Y+61, r31	; 0x3d
    2b02:	ec af       	std	Y+60, r30	; 0x3c
    2b04:	21 96       	adiw	r28, 0x01	; 1
    2b06:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b08:	21 97       	sbiw	r28, 0x01	; 1
    2b0a:	f1 50       	subi	r31, 0x01	; 1
    2b0c:	21 96       	adiw	r28, 0x01	; 1
    2b0e:	ff af       	std	Y+63, r31	; 0x3f
    2b10:	21 97       	sbiw	r28, 0x01	; 1
    2b12:	21 96       	adiw	r28, 0x01	; 1
    2b14:	8f ad       	ldd	r24, Y+63	; 0x3f
    2b16:	21 97       	sbiw	r28, 0x01	; 1
    2b18:	88 23       	and	r24, r24
    2b1a:	21 f7       	brne	.-56     	; 0x2ae4 <LCD_VidDisplayNumber+0xea>
    2b1c:	86 e5       	ldi	r24, 0x56	; 86
    2b1e:	9d e3       	ldi	r25, 0x3D	; 61
    2b20:	a0 e0       	ldi	r26, 0x00	; 0
    2b22:	b0 e0       	ldi	r27, 0x00	; 0
    2b24:	8f 8f       	std	Y+31, r24	; 0x1f
    2b26:	98 a3       	std	Y+32, r25	; 0x20
    2b28:	a9 a3       	std	Y+33, r26	; 0x21
    2b2a:	ba a3       	std	Y+34, r27	; 0x22
    2b2c:	1c a2       	std	Y+36, r1	; 0x24
    2b2e:	1b a2       	std	Y+35, r1	; 0x23
	u8 index[][2]={
		{2,1},
		{2,7},
		{1,8},
		{2,14}
		};
    2b30:	de 01       	movw	r26, r28
    2b32:	95 96       	adiw	r26, 0x25	; 37
    2b34:	23 96       	adiw	r28, 0x03	; 3
    2b36:	bf af       	std	Y+63, r27	; 0x3f
    2b38:	ae af       	std	Y+62, r26	; 0x3e
    2b3a:	23 97       	sbiw	r28, 0x03	; 3
    2b3c:	ee e4       	ldi	r30, 0x4E	; 78
    2b3e:	f2 e0       	ldi	r31, 0x02	; 2
    2b40:	25 96       	adiw	r28, 0x05	; 5
    2b42:	ff af       	std	Y+63, r31	; 0x3f
    2b44:	ee af       	std	Y+62, r30	; 0x3e
    2b46:	25 97       	sbiw	r28, 0x05	; 5
    2b48:	f8 e0       	ldi	r31, 0x08	; 8
    2b4a:	26 96       	adiw	r28, 0x06	; 6
    2b4c:	ff af       	std	Y+63, r31	; 0x3f
    2b4e:	26 97       	sbiw	r28, 0x06	; 6
    2b50:	25 96       	adiw	r28, 0x05	; 5
    2b52:	ae ad       	ldd	r26, Y+62	; 0x3e
    2b54:	bf ad       	ldd	r27, Y+63	; 0x3f
    2b56:	25 97       	sbiw	r28, 0x05	; 5
    2b58:	0c 90       	ld	r0, X
    2b5a:	25 96       	adiw	r28, 0x05	; 5
    2b5c:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b5e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b60:	25 97       	sbiw	r28, 0x05	; 5
    2b62:	31 96       	adiw	r30, 0x01	; 1
    2b64:	25 96       	adiw	r28, 0x05	; 5
    2b66:	ff af       	std	Y+63, r31	; 0x3f
    2b68:	ee af       	std	Y+62, r30	; 0x3e
    2b6a:	25 97       	sbiw	r28, 0x05	; 5
    2b6c:	23 96       	adiw	r28, 0x03	; 3
    2b6e:	ae ad       	ldd	r26, Y+62	; 0x3e
    2b70:	bf ad       	ldd	r27, Y+63	; 0x3f
    2b72:	23 97       	sbiw	r28, 0x03	; 3
    2b74:	0c 92       	st	X, r0
    2b76:	23 96       	adiw	r28, 0x03	; 3
    2b78:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b7a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b7c:	23 97       	sbiw	r28, 0x03	; 3
    2b7e:	31 96       	adiw	r30, 0x01	; 1
    2b80:	23 96       	adiw	r28, 0x03	; 3
    2b82:	ff af       	std	Y+63, r31	; 0x3f
    2b84:	ee af       	std	Y+62, r30	; 0x3e
    2b86:	23 97       	sbiw	r28, 0x03	; 3
    2b88:	26 96       	adiw	r28, 0x06	; 6
    2b8a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b8c:	26 97       	sbiw	r28, 0x06	; 6
    2b8e:	f1 50       	subi	r31, 0x01	; 1
    2b90:	26 96       	adiw	r28, 0x06	; 6
    2b92:	ff af       	std	Y+63, r31	; 0x3f
    2b94:	26 97       	sbiw	r28, 0x06	; 6
    2b96:	26 96       	adiw	r28, 0x06	; 6
    2b98:	8f ad       	ldd	r24, Y+63	; 0x3f
    2b9a:	26 97       	sbiw	r28, 0x06	; 6
    2b9c:	88 23       	and	r24, r24
    2b9e:	c1 f6       	brne	.-80     	; 0x2b50 <LCD_VidDisplayNumber+0x156>
	 LCD_VidWriteCommand(PORTC,PORTD,CLR);
    2ba0:	82 e0       	ldi	r24, 0x02	; 2
    2ba2:	63 e0       	ldi	r22, 0x03	; 3
    2ba4:	41 e0       	ldi	r20, 0x01	; 1
    2ba6:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LCD_VidWriteCommand>
	for(i=0;i<5;i++){
    2baa:	19 82       	std	Y+1, r1	; 0x01
    2bac:	48 c0       	rjmp	.+144    	; 0x2c3e <LCD_VidDisplayNumber+0x244>
		LCD_VidWriteString(PORTC,PORTD,character_array[i]);
    2bae:	ae 01       	movw	r20, r28
    2bb0:	49 5f       	subi	r20, 0xF9	; 249
    2bb2:	5f 4f       	sbci	r21, 0xFF	; 255
    2bb4:	89 81       	ldd	r24, Y+1	; 0x01
    2bb6:	28 2f       	mov	r18, r24
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	c9 01       	movw	r24, r18
    2bbc:	88 0f       	add	r24, r24
    2bbe:	99 1f       	adc	r25, r25
    2bc0:	82 0f       	add	r24, r18
    2bc2:	93 1f       	adc	r25, r19
    2bc4:	88 0f       	add	r24, r24
    2bc6:	99 1f       	adc	r25, r25
    2bc8:	9a 01       	movw	r18, r20
    2bca:	28 0f       	add	r18, r24
    2bcc:	39 1f       	adc	r19, r25
    2bce:	82 e0       	ldi	r24, 0x02	; 2
    2bd0:	63 e0       	ldi	r22, 0x03	; 3
    2bd2:	a9 01       	movw	r20, r18
    2bd4:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_VidWriteString>
	    LCD_VidWriteNumber(PORTC,PORTD,value_array[i]);
    2bd8:	89 81       	ldd	r24, Y+1	; 0x01
    2bda:	28 2f       	mov	r18, r24
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	ce 01       	movw	r24, r28
    2be0:	02 96       	adiw	r24, 0x02	; 2
    2be2:	fc 01       	movw	r30, r24
    2be4:	e2 0f       	add	r30, r18
    2be6:	f3 1f       	adc	r31, r19
    2be8:	80 81       	ld	r24, Z
    2bea:	28 2f       	mov	r18, r24
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	40 e0       	ldi	r20, 0x00	; 0
    2bf0:	50 e0       	ldi	r21, 0x00	; 0
    2bf2:	82 e0       	ldi	r24, 0x02	; 2
    2bf4:	63 e0       	ldi	r22, 0x03	; 3
    2bf6:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <LCD_VidWriteNumber>
		LCD_VidSetDdram(PORTC,PORTD,index[i][0],index[i][1]);
    2bfa:	89 81       	ldd	r24, Y+1	; 0x01
    2bfc:	88 2f       	mov	r24, r24
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	9c 01       	movw	r18, r24
    2c02:	22 0f       	add	r18, r18
    2c04:	33 1f       	adc	r19, r19
    2c06:	ce 01       	movw	r24, r28
    2c08:	01 96       	adiw	r24, 0x01	; 1
    2c0a:	82 0f       	add	r24, r18
    2c0c:	93 1f       	adc	r25, r19
    2c0e:	fc 01       	movw	r30, r24
    2c10:	b4 96       	adiw	r30, 0x24	; 36
    2c12:	40 81       	ld	r20, Z
    2c14:	89 81       	ldd	r24, Y+1	; 0x01
    2c16:	88 2f       	mov	r24, r24
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	9c 01       	movw	r18, r24
    2c1c:	22 0f       	add	r18, r18
    2c1e:	33 1f       	adc	r19, r19
    2c20:	ce 01       	movw	r24, r28
    2c22:	01 96       	adiw	r24, 0x01	; 1
    2c24:	82 0f       	add	r24, r18
    2c26:	93 1f       	adc	r25, r19
    2c28:	fc 01       	movw	r30, r24
    2c2a:	b5 96       	adiw	r30, 0x25	; 37
    2c2c:	90 81       	ld	r25, Z
    2c2e:	82 e0       	ldi	r24, 0x02	; 2
    2c30:	63 e0       	ldi	r22, 0x03	; 3
    2c32:	29 2f       	mov	r18, r25
    2c34:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <LCD_VidSetDdram>
		{2,7},
		{1,8},
		{2,14}
		};
	 LCD_VidWriteCommand(PORTC,PORTD,CLR);
	for(i=0;i<5;i++){
    2c38:	89 81       	ldd	r24, Y+1	; 0x01
    2c3a:	8f 5f       	subi	r24, 0xFF	; 255
    2c3c:	89 83       	std	Y+1, r24	; 0x01
    2c3e:	89 81       	ldd	r24, Y+1	; 0x01
    2c40:	85 30       	cpi	r24, 0x05	; 5
    2c42:	08 f4       	brcc	.+2      	; 0x2c46 <LCD_VidDisplayNumber+0x24c>
    2c44:	b4 cf       	rjmp	.-152    	; 0x2bae <LCD_VidDisplayNumber+0x1b4>
		    LCD_VidWriteString(PORTC,PORTD,"Hz T=");
		    LCD_VidWriteNumber(PORTC,PORTD,LOC_f32Ttotal);
		    LCD_VidSetDdram(PORTC,PORTD,2,14);
		    LCD_VidWriteString(PORTC,PORTD,"V=");
		    LCD_VidWriteNumber(PORTC,PORTD,LOC_u8Veff);*/
}
    2c46:	cb 5b       	subi	r28, 0xBB	; 187
    2c48:	df 4f       	sbci	r29, 0xFF	; 255
    2c4a:	0f b6       	in	r0, 0x3f	; 63
    2c4c:	f8 94       	cli
    2c4e:	de bf       	out	0x3e, r29	; 62
    2c50:	0f be       	out	0x3f, r0	; 63
    2c52:	cd bf       	out	0x3d, r28	; 61
    2c54:	cf 91       	pop	r28
    2c56:	df 91       	pop	r29
    2c58:	1f 91       	pop	r17
    2c5a:	0f 91       	pop	r16
    2c5c:	ff 90       	pop	r15
    2c5e:	ef 90       	pop	r14
    2c60:	df 90       	pop	r13
    2c62:	cf 90       	pop	r12
    2c64:	af 90       	pop	r10
    2c66:	08 95       	ret

00002c68 <LCD_VidCheckVolt>:


void LCD_VidCheckVolt(u8 LOC_u8Ton,u8 LOC_u8Toff,u8 LOC_u8Vertical,u8 LOC_u8Veff){
    2c68:	df 93       	push	r29
    2c6a:	cf 93       	push	r28
    2c6c:	cd b7       	in	r28, 0x3d	; 61
    2c6e:	de b7       	in	r29, 0x3e	; 62
    2c70:	e3 97       	sbiw	r28, 0x33	; 51
    2c72:	0f b6       	in	r0, 0x3f	; 63
    2c74:	f8 94       	cli
    2c76:	de bf       	out	0x3e, r29	; 62
    2c78:	0f be       	out	0x3f, r0	; 63
    2c7a:	cd bf       	out	0x3d, r28	; 61
    2c7c:	8b a7       	std	Y+43, r24	; 0x2b
    2c7e:	6c a7       	std	Y+44, r22	; 0x2c
    2c80:	4d a7       	std	Y+45, r20	; 0x2d
    2c82:	2e a7       	std	Y+46, r18	; 0x2e

u8 volt_array[]={1,2,3,4};
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	8b 83       	std	Y+3, r24	; 0x03
    2c88:	82 e0       	ldi	r24, 0x02	; 2
    2c8a:	8c 83       	std	Y+4, r24	; 0x04
    2c8c:	83 e0       	ldi	r24, 0x03	; 3
    2c8e:	8d 83       	std	Y+5, r24	; 0x05
    2c90:	84 e0       	ldi	r24, 0x04	; 4
    2c92:	8e 83       	std	Y+6, r24	; 0x06
this function is used to rearrange the places of the TON_width,vertical,Toff
according to the the quantity of the Veff 

*/

u8 i=0,row=0;
    2c94:	1a 82       	std	Y+2, r1	; 0x02
    2c96:	19 82       	std	Y+1, r1	; 0x01
   //0 1 2  3  4  5  6  7  8//
	{4,5,4,11,19,27,44,27,36},	
	{3,4,5,12,20,28,43,28,35},
	{2,3,6,13,21,29,42,29,34},	
	{1,2,7,14,22,30,41,30,33}	
	};
    2c98:	ce 01       	movw	r24, r28
    2c9a:	07 96       	adiw	r24, 0x07	; 7
    2c9c:	98 ab       	std	Y+48, r25	; 0x30
    2c9e:	8f a7       	std	Y+47, r24	; 0x2f
    2ca0:	e6 e5       	ldi	r30, 0x56	; 86
    2ca2:	f2 e0       	ldi	r31, 0x02	; 2
    2ca4:	fa ab       	std	Y+50, r31	; 0x32
    2ca6:	e9 ab       	std	Y+49, r30	; 0x31
    2ca8:	f4 e2       	ldi	r31, 0x24	; 36
    2caa:	fb ab       	std	Y+51, r31	; 0x33
    2cac:	e9 a9       	ldd	r30, Y+49	; 0x31
    2cae:	fa a9       	ldd	r31, Y+50	; 0x32
    2cb0:	00 80       	ld	r0, Z
    2cb2:	89 a9       	ldd	r24, Y+49	; 0x31
    2cb4:	9a a9       	ldd	r25, Y+50	; 0x32
    2cb6:	01 96       	adiw	r24, 0x01	; 1
    2cb8:	9a ab       	std	Y+50, r25	; 0x32
    2cba:	89 ab       	std	Y+49, r24	; 0x31
    2cbc:	ef a5       	ldd	r30, Y+47	; 0x2f
    2cbe:	f8 a9       	ldd	r31, Y+48	; 0x30
    2cc0:	00 82       	st	Z, r0
    2cc2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cc4:	98 a9       	ldd	r25, Y+48	; 0x30
    2cc6:	01 96       	adiw	r24, 0x01	; 1
    2cc8:	98 ab       	std	Y+48, r25	; 0x30
    2cca:	8f a7       	std	Y+47, r24	; 0x2f
    2ccc:	9b a9       	ldd	r25, Y+51	; 0x33
    2cce:	91 50       	subi	r25, 0x01	; 1
    2cd0:	9b ab       	std	Y+51, r25	; 0x33
    2cd2:	eb a9       	ldd	r30, Y+51	; 0x33
    2cd4:	ee 23       	and	r30, r30
    2cd6:	51 f7       	brne	.-44     	; 0x2cac <LCD_VidCheckVolt+0x44>
for(row=0;row<4;row++){
    2cd8:	19 82       	std	Y+1, r1	; 0x01
    2cda:	89 c1       	rjmp	.+786    	; 0x2fee <LCD_VidCheckVolt+0x386>
	if(LOC_u8Veff==volt_array[row]){
    2cdc:	89 81       	ldd	r24, Y+1	; 0x01
    2cde:	28 2f       	mov	r18, r24
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	ce 01       	movw	r24, r28
    2ce4:	03 96       	adiw	r24, 0x03	; 3
    2ce6:	fc 01       	movw	r30, r24
    2ce8:	e2 0f       	add	r30, r18
    2cea:	f3 1f       	adc	r31, r19
    2cec:	90 81       	ld	r25, Z
    2cee:	8e a5       	ldd	r24, Y+46	; 0x2e
    2cf0:	98 17       	cp	r25, r24
    2cf2:	09 f0       	breq	.+2      	; 0x2cf6 <LCD_VidCheckVolt+0x8e>
    2cf4:	79 c1       	rjmp	.+754    	; 0x2fe8 <LCD_VidCheckVolt+0x380>
			 animation[index[row][0]]=LOC_u8Ton;
    2cf6:	89 81       	ldd	r24, Y+1	; 0x01
    2cf8:	28 2f       	mov	r18, r24
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	c9 01       	movw	r24, r18
    2cfe:	88 0f       	add	r24, r24
    2d00:	99 1f       	adc	r25, r25
    2d02:	88 0f       	add	r24, r24
    2d04:	99 1f       	adc	r25, r25
    2d06:	88 0f       	add	r24, r24
    2d08:	99 1f       	adc	r25, r25
    2d0a:	82 0f       	add	r24, r18
    2d0c:	93 1f       	adc	r25, r19
    2d0e:	9e 01       	movw	r18, r28
    2d10:	2f 5f       	subi	r18, 0xFF	; 255
    2d12:	3f 4f       	sbci	r19, 0xFF	; 255
    2d14:	82 0f       	add	r24, r18
    2d16:	93 1f       	adc	r25, r19
    2d18:	fc 01       	movw	r30, r24
    2d1a:	36 96       	adiw	r30, 0x06	; 6
    2d1c:	80 81       	ld	r24, Z
    2d1e:	68 2f       	mov	r22, r24
    2d20:	70 e0       	ldi	r23, 0x00	; 0
    2d22:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d24:	28 2f       	mov	r18, r24
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	40 e0       	ldi	r20, 0x00	; 0
    2d2a:	50 e0       	ldi	r21, 0x00	; 0
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	88 0f       	add	r24, r24
    2d30:	99 1f       	adc	r25, r25
    2d32:	88 0f       	add	r24, r24
    2d34:	99 1f       	adc	r25, r25
    2d36:	fc 01       	movw	r30, r24
    2d38:	e2 59       	subi	r30, 0x92	; 146
    2d3a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d3c:	20 83       	st	Z, r18
    2d3e:	31 83       	std	Z+1, r19	; 0x01
    2d40:	42 83       	std	Z+2, r20	; 0x02
    2d42:	53 83       	std	Z+3, r21	; 0x03
			 i=index[row][1];
    2d44:	89 81       	ldd	r24, Y+1	; 0x01
    2d46:	28 2f       	mov	r18, r24
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	c9 01       	movw	r24, r18
    2d4c:	88 0f       	add	r24, r24
    2d4e:	99 1f       	adc	r25, r25
    2d50:	88 0f       	add	r24, r24
    2d52:	99 1f       	adc	r25, r25
    2d54:	88 0f       	add	r24, r24
    2d56:	99 1f       	adc	r25, r25
    2d58:	82 0f       	add	r24, r18
    2d5a:	93 1f       	adc	r25, r19
    2d5c:	9e 01       	movw	r18, r28
    2d5e:	2f 5f       	subi	r18, 0xFF	; 255
    2d60:	3f 4f       	sbci	r19, 0xFF	; 255
    2d62:	82 0f       	add	r24, r18
    2d64:	93 1f       	adc	r25, r19
    2d66:	fc 01       	movw	r30, r24
    2d68:	37 96       	adiw	r30, 0x07	; 7
    2d6a:	80 81       	ld	r24, Z
    2d6c:	8a 83       	std	Y+2, r24	; 0x02
    2d6e:	44 c0       	rjmp	.+136    	; 0x2df8 <LCD_VidCheckVolt+0x190>
			 while(i<8){
			 animation[i]=LOC_u8Vertical;
    2d70:	8a 81       	ldd	r24, Y+2	; 0x02
    2d72:	68 2f       	mov	r22, r24
    2d74:	70 e0       	ldi	r23, 0x00	; 0
    2d76:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d78:	28 2f       	mov	r18, r24
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	40 e0       	ldi	r20, 0x00	; 0
    2d7e:	50 e0       	ldi	r21, 0x00	; 0
    2d80:	cb 01       	movw	r24, r22
    2d82:	88 0f       	add	r24, r24
    2d84:	99 1f       	adc	r25, r25
    2d86:	88 0f       	add	r24, r24
    2d88:	99 1f       	adc	r25, r25
    2d8a:	fc 01       	movw	r30, r24
    2d8c:	e2 59       	subi	r30, 0x92	; 146
    2d8e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d90:	20 83       	st	Z, r18
    2d92:	31 83       	std	Z+1, r19	; 0x01
    2d94:	42 83       	std	Z+2, r20	; 0x02
    2d96:	53 83       	std	Z+3, r21	; 0x03
			 animation[i+index[row][2]]=LOC_u8Vertical; //index 9,10,11//
    2d98:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9a:	48 2f       	mov	r20, r24
    2d9c:	50 e0       	ldi	r21, 0x00	; 0
    2d9e:	89 81       	ldd	r24, Y+1	; 0x01
    2da0:	28 2f       	mov	r18, r24
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	c9 01       	movw	r24, r18
    2da6:	88 0f       	add	r24, r24
    2da8:	99 1f       	adc	r25, r25
    2daa:	88 0f       	add	r24, r24
    2dac:	99 1f       	adc	r25, r25
    2dae:	88 0f       	add	r24, r24
    2db0:	99 1f       	adc	r25, r25
    2db2:	82 0f       	add	r24, r18
    2db4:	93 1f       	adc	r25, r19
    2db6:	9e 01       	movw	r18, r28
    2db8:	2f 5f       	subi	r18, 0xFF	; 255
    2dba:	3f 4f       	sbci	r19, 0xFF	; 255
    2dbc:	82 0f       	add	r24, r18
    2dbe:	93 1f       	adc	r25, r19
    2dc0:	fc 01       	movw	r30, r24
    2dc2:	38 96       	adiw	r30, 0x08	; 8
    2dc4:	80 81       	ld	r24, Z
    2dc6:	88 2f       	mov	r24, r24
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	ba 01       	movw	r22, r20
    2dcc:	68 0f       	add	r22, r24
    2dce:	79 1f       	adc	r23, r25
    2dd0:	8d a5       	ldd	r24, Y+45	; 0x2d
    2dd2:	28 2f       	mov	r18, r24
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	40 e0       	ldi	r20, 0x00	; 0
    2dd8:	50 e0       	ldi	r21, 0x00	; 0
    2dda:	cb 01       	movw	r24, r22
    2ddc:	88 0f       	add	r24, r24
    2dde:	99 1f       	adc	r25, r25
    2de0:	88 0f       	add	r24, r24
    2de2:	99 1f       	adc	r25, r25
    2de4:	fc 01       	movw	r30, r24
    2de6:	e2 59       	subi	r30, 0x92	; 146
    2de8:	fe 4f       	sbci	r31, 0xFE	; 254
    2dea:	20 83       	st	Z, r18
    2dec:	31 83       	std	Z+1, r19	; 0x01
    2dee:	42 83       	std	Z+2, r20	; 0x02
    2df0:	53 83       	std	Z+3, r21	; 0x03
			 i++;
    2df2:	8a 81       	ldd	r24, Y+2	; 0x02
    2df4:	8f 5f       	subi	r24, 0xFF	; 255
    2df6:	8a 83       	std	Y+2, r24	; 0x02
	};
for(row=0;row<4;row++){
	if(LOC_u8Veff==volt_array[row]){
			 animation[index[row][0]]=LOC_u8Ton;
			 i=index[row][1];
			 while(i<8){
    2df8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfa:	88 30       	cpi	r24, 0x08	; 8
    2dfc:	08 f4       	brcc	.+2      	; 0x2e00 <LCD_VidCheckVolt+0x198>
    2dfe:	b8 cf       	rjmp	.-144    	; 0x2d70 <LCD_VidCheckVolt+0x108>
			 animation[i]=LOC_u8Vertical;
			 animation[i+index[row][2]]=LOC_u8Vertical; //index 9,10,11//
			 i++;
			 }
			 animation[index[row][3]]=LOC_u8Toff;
    2e00:	89 81       	ldd	r24, Y+1	; 0x01
    2e02:	28 2f       	mov	r18, r24
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	c9 01       	movw	r24, r18
    2e08:	88 0f       	add	r24, r24
    2e0a:	99 1f       	adc	r25, r25
    2e0c:	88 0f       	add	r24, r24
    2e0e:	99 1f       	adc	r25, r25
    2e10:	88 0f       	add	r24, r24
    2e12:	99 1f       	adc	r25, r25
    2e14:	82 0f       	add	r24, r18
    2e16:	93 1f       	adc	r25, r19
    2e18:	9e 01       	movw	r18, r28
    2e1a:	2f 5f       	subi	r18, 0xFF	; 255
    2e1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e1e:	82 0f       	add	r24, r18
    2e20:	93 1f       	adc	r25, r19
    2e22:	fc 01       	movw	r30, r24
    2e24:	39 96       	adiw	r30, 0x09	; 9
    2e26:	80 81       	ld	r24, Z
    2e28:	68 2f       	mov	r22, r24
    2e2a:	70 e0       	ldi	r23, 0x00	; 0
    2e2c:	8c a5       	ldd	r24, Y+44	; 0x2c
    2e2e:	28 2f       	mov	r18, r24
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	40 e0       	ldi	r20, 0x00	; 0
    2e34:	50 e0       	ldi	r21, 0x00	; 0
    2e36:	cb 01       	movw	r24, r22
    2e38:	88 0f       	add	r24, r24
    2e3a:	99 1f       	adc	r25, r25
    2e3c:	88 0f       	add	r24, r24
    2e3e:	99 1f       	adc	r25, r25
    2e40:	fc 01       	movw	r30, r24
    2e42:	e2 59       	subi	r30, 0x92	; 146
    2e44:	fe 4f       	sbci	r31, 0xFE	; 254
    2e46:	20 83       	st	Z, r18
    2e48:	31 83       	std	Z+1, r19	; 0x01
    2e4a:	42 83       	std	Z+2, r20	; 0x02
    2e4c:	53 83       	std	Z+3, r21	; 0x03
			 animation[index[row][4]]=0b00011111;
    2e4e:	89 81       	ldd	r24, Y+1	; 0x01
    2e50:	28 2f       	mov	r18, r24
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	c9 01       	movw	r24, r18
    2e56:	88 0f       	add	r24, r24
    2e58:	99 1f       	adc	r25, r25
    2e5a:	88 0f       	add	r24, r24
    2e5c:	99 1f       	adc	r25, r25
    2e5e:	88 0f       	add	r24, r24
    2e60:	99 1f       	adc	r25, r25
    2e62:	82 0f       	add	r24, r18
    2e64:	93 1f       	adc	r25, r19
    2e66:	9e 01       	movw	r18, r28
    2e68:	2f 5f       	subi	r18, 0xFF	; 255
    2e6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e6c:	82 0f       	add	r24, r18
    2e6e:	93 1f       	adc	r25, r19
    2e70:	fc 01       	movw	r30, r24
    2e72:	3a 96       	adiw	r30, 0x0a	; 10
    2e74:	80 81       	ld	r24, Z
    2e76:	88 2f       	mov	r24, r24
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	88 0f       	add	r24, r24
    2e7c:	99 1f       	adc	r25, r25
    2e7e:	88 0f       	add	r24, r24
    2e80:	99 1f       	adc	r25, r25
    2e82:	fc 01       	movw	r30, r24
    2e84:	e2 59       	subi	r30, 0x92	; 146
    2e86:	fe 4f       	sbci	r31, 0xFE	; 254
    2e88:	8f e1       	ldi	r24, 0x1F	; 31
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	a0 e0       	ldi	r26, 0x00	; 0
    2e8e:	b0 e0       	ldi	r27, 0x00	; 0
    2e90:	80 83       	st	Z, r24
    2e92:	91 83       	std	Z+1, r25	; 0x01
    2e94:	a2 83       	std	Z+2, r26	; 0x02
    2e96:	b3 83       	std	Z+3, r27	; 0x03
			 animation[index[row][5]]=0b00011111;
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
    2e9a:	28 2f       	mov	r18, r24
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	c9 01       	movw	r24, r18
    2ea0:	88 0f       	add	r24, r24
    2ea2:	99 1f       	adc	r25, r25
    2ea4:	88 0f       	add	r24, r24
    2ea6:	99 1f       	adc	r25, r25
    2ea8:	88 0f       	add	r24, r24
    2eaa:	99 1f       	adc	r25, r25
    2eac:	82 0f       	add	r24, r18
    2eae:	93 1f       	adc	r25, r19
    2eb0:	9e 01       	movw	r18, r28
    2eb2:	2f 5f       	subi	r18, 0xFF	; 255
    2eb4:	3f 4f       	sbci	r19, 0xFF	; 255
    2eb6:	82 0f       	add	r24, r18
    2eb8:	93 1f       	adc	r25, r19
    2eba:	fc 01       	movw	r30, r24
    2ebc:	3b 96       	adiw	r30, 0x0b	; 11
    2ebe:	80 81       	ld	r24, Z
    2ec0:	88 2f       	mov	r24, r24
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	88 0f       	add	r24, r24
    2ec6:	99 1f       	adc	r25, r25
    2ec8:	88 0f       	add	r24, r24
    2eca:	99 1f       	adc	r25, r25
    2ecc:	fc 01       	movw	r30, r24
    2ece:	e2 59       	subi	r30, 0x92	; 146
    2ed0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ed2:	8f e1       	ldi	r24, 0x1F	; 31
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	a0 e0       	ldi	r26, 0x00	; 0
    2ed8:	b0 e0       	ldi	r27, 0x00	; 0
    2eda:	80 83       	st	Z, r24
    2edc:	91 83       	std	Z+1, r25	; 0x01
    2ede:	a2 83       	std	Z+2, r26	; 0x02
    2ee0:	b3 83       	std	Z+3, r27	; 0x03
			 animation[index[row][6]]=0b00011111;
    2ee2:	89 81       	ldd	r24, Y+1	; 0x01
    2ee4:	28 2f       	mov	r18, r24
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	c9 01       	movw	r24, r18
    2eea:	88 0f       	add	r24, r24
    2eec:	99 1f       	adc	r25, r25
    2eee:	88 0f       	add	r24, r24
    2ef0:	99 1f       	adc	r25, r25
    2ef2:	88 0f       	add	r24, r24
    2ef4:	99 1f       	adc	r25, r25
    2ef6:	82 0f       	add	r24, r18
    2ef8:	93 1f       	adc	r25, r19
    2efa:	9e 01       	movw	r18, r28
    2efc:	2f 5f       	subi	r18, 0xFF	; 255
    2efe:	3f 4f       	sbci	r19, 0xFF	; 255
    2f00:	82 0f       	add	r24, r18
    2f02:	93 1f       	adc	r25, r19
    2f04:	fc 01       	movw	r30, r24
    2f06:	3c 96       	adiw	r30, 0x0c	; 12
    2f08:	80 81       	ld	r24, Z
    2f0a:	88 2f       	mov	r24, r24
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	88 0f       	add	r24, r24
    2f10:	99 1f       	adc	r25, r25
    2f12:	88 0f       	add	r24, r24
    2f14:	99 1f       	adc	r25, r25
    2f16:	fc 01       	movw	r30, r24
    2f18:	e2 59       	subi	r30, 0x92	; 146
    2f1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f1c:	8f e1       	ldi	r24, 0x1F	; 31
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	a0 e0       	ldi	r26, 0x00	; 0
    2f22:	b0 e0       	ldi	r27, 0x00	; 0
    2f24:	80 83       	st	Z, r24
    2f26:	91 83       	std	Z+1, r25	; 0x01
    2f28:	a2 83       	std	Z+2, r26	; 0x02
    2f2a:	b3 83       	std	Z+3, r27	; 0x03
			 for(i=25;i<index[row][7];i++){
    2f2c:	89 e1       	ldi	r24, 0x19	; 25
    2f2e:	8a 83       	std	Y+2, r24	; 0x02
    2f30:	15 c0       	rjmp	.+42     	; 0x2f5c <LCD_VidCheckVolt+0x2f4>
			 animation[i]=0b00010000;
    2f32:	8a 81       	ldd	r24, Y+2	; 0x02
    2f34:	88 2f       	mov	r24, r24
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	88 0f       	add	r24, r24
    2f3a:	99 1f       	adc	r25, r25
    2f3c:	88 0f       	add	r24, r24
    2f3e:	99 1f       	adc	r25, r25
    2f40:	fc 01       	movw	r30, r24
    2f42:	e2 59       	subi	r30, 0x92	; 146
    2f44:	fe 4f       	sbci	r31, 0xFE	; 254
    2f46:	80 e1       	ldi	r24, 0x10	; 16
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	a0 e0       	ldi	r26, 0x00	; 0
    2f4c:	b0 e0       	ldi	r27, 0x00	; 0
    2f4e:	80 83       	st	Z, r24
    2f50:	91 83       	std	Z+1, r25	; 0x01
    2f52:	a2 83       	std	Z+2, r26	; 0x02
    2f54:	b3 83       	std	Z+3, r27	; 0x03
			 }
			 animation[index[row][3]]=LOC_u8Toff;
			 animation[index[row][4]]=0b00011111;
			 animation[index[row][5]]=0b00011111;
			 animation[index[row][6]]=0b00011111;
			 for(i=25;i<index[row][7];i++){
    2f56:	8a 81       	ldd	r24, Y+2	; 0x02
    2f58:	8f 5f       	subi	r24, 0xFF	; 255
    2f5a:	8a 83       	std	Y+2, r24	; 0x02
    2f5c:	89 81       	ldd	r24, Y+1	; 0x01
    2f5e:	28 2f       	mov	r18, r24
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	c9 01       	movw	r24, r18
    2f64:	88 0f       	add	r24, r24
    2f66:	99 1f       	adc	r25, r25
    2f68:	88 0f       	add	r24, r24
    2f6a:	99 1f       	adc	r25, r25
    2f6c:	88 0f       	add	r24, r24
    2f6e:	99 1f       	adc	r25, r25
    2f70:	82 0f       	add	r24, r18
    2f72:	93 1f       	adc	r25, r19
    2f74:	9e 01       	movw	r18, r28
    2f76:	2f 5f       	subi	r18, 0xFF	; 255
    2f78:	3f 4f       	sbci	r19, 0xFF	; 255
    2f7a:	82 0f       	add	r24, r18
    2f7c:	93 1f       	adc	r25, r19
    2f7e:	fc 01       	movw	r30, r24
    2f80:	3d 96       	adiw	r30, 0x0d	; 13
    2f82:	90 81       	ld	r25, Z
    2f84:	8a 81       	ldd	r24, Y+2	; 0x02
    2f86:	89 17       	cp	r24, r25
    2f88:	a0 f2       	brcs	.-88     	; 0x2f32 <LCD_VidCheckVolt+0x2ca>
			 animation[i]=0b00010000;
			 }
			 for(i=index[row][8];i<40;i++){
    2f8a:	89 81       	ldd	r24, Y+1	; 0x01
    2f8c:	28 2f       	mov	r18, r24
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	c9 01       	movw	r24, r18
    2f92:	88 0f       	add	r24, r24
    2f94:	99 1f       	adc	r25, r25
    2f96:	88 0f       	add	r24, r24
    2f98:	99 1f       	adc	r25, r25
    2f9a:	88 0f       	add	r24, r24
    2f9c:	99 1f       	adc	r25, r25
    2f9e:	82 0f       	add	r24, r18
    2fa0:	93 1f       	adc	r25, r19
    2fa2:	9e 01       	movw	r18, r28
    2fa4:	2f 5f       	subi	r18, 0xFF	; 255
    2fa6:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa8:	82 0f       	add	r24, r18
    2faa:	93 1f       	adc	r25, r19
    2fac:	fc 01       	movw	r30, r24
    2fae:	3e 96       	adiw	r30, 0x0e	; 14
    2fb0:	80 81       	ld	r24, Z
    2fb2:	8a 83       	std	Y+2, r24	; 0x02
    2fb4:	15 c0       	rjmp	.+42     	; 0x2fe0 <LCD_VidCheckVolt+0x378>
			 animation[i]=0b00010000;    //36,37,38,39//
    2fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb8:	88 2f       	mov	r24, r24
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	88 0f       	add	r24, r24
    2fbe:	99 1f       	adc	r25, r25
    2fc0:	88 0f       	add	r24, r24
    2fc2:	99 1f       	adc	r25, r25
    2fc4:	fc 01       	movw	r30, r24
    2fc6:	e2 59       	subi	r30, 0x92	; 146
    2fc8:	fe 4f       	sbci	r31, 0xFE	; 254
    2fca:	80 e1       	ldi	r24, 0x10	; 16
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	a0 e0       	ldi	r26, 0x00	; 0
    2fd0:	b0 e0       	ldi	r27, 0x00	; 0
    2fd2:	80 83       	st	Z, r24
    2fd4:	91 83       	std	Z+1, r25	; 0x01
    2fd6:	a2 83       	std	Z+2, r26	; 0x02
    2fd8:	b3 83       	std	Z+3, r27	; 0x03
			 animation[index[row][5]]=0b00011111;
			 animation[index[row][6]]=0b00011111;
			 for(i=25;i<index[row][7];i++){
			 animation[i]=0b00010000;
			 }
			 for(i=index[row][8];i<40;i++){
    2fda:	8a 81       	ldd	r24, Y+2	; 0x02
    2fdc:	8f 5f       	subi	r24, 0xFF	; 255
    2fde:	8a 83       	std	Y+2, r24	; 0x02
    2fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe2:	88 32       	cpi	r24, 0x28	; 40
    2fe4:	40 f3       	brcs	.-48     	; 0x2fb6 <LCD_VidCheckVolt+0x34e>
    2fe6:	07 c0       	rjmp	.+14     	; 0x2ff6 <LCD_VidCheckVolt+0x38e>
	{4,5,4,11,19,27,44,27,36},	
	{3,4,5,12,20,28,43,28,35},
	{2,3,6,13,21,29,42,29,34},	
	{1,2,7,14,22,30,41,30,33}	
	};
for(row=0;row<4;row++){
    2fe8:	89 81       	ldd	r24, Y+1	; 0x01
    2fea:	8f 5f       	subi	r24, 0xFF	; 255
    2fec:	89 83       	std	Y+1, r24	; 0x01
    2fee:	89 81       	ldd	r24, Y+1	; 0x01
    2ff0:	84 30       	cpi	r24, 0x04	; 4
    2ff2:	08 f4       	brcc	.+2      	; 0x2ff6 <LCD_VidCheckVolt+0x38e>
    2ff4:	73 ce       	rjmp	.-794    	; 0x2cdc <LCD_VidCheckVolt+0x74>
			 }
			 break;
	     } 
}

LCD_VidWriteCommand(PORTC,PORTD,64);
    2ff6:	82 e0       	ldi	r24, 0x02	; 2
    2ff8:	63 e0       	ldi	r22, 0x03	; 3
    2ffa:	40 e4       	ldi	r20, 0x40	; 64
    2ffc:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LCD_VidWriteCommand>
 for(i=0;i<56;i++){
    3000:	1a 82       	std	Y+2, r1	; 0x02
    3002:	17 c0       	rjmp	.+46     	; 0x3032 <LCD_VidCheckVolt+0x3ca>
    LCD_VidWriteData(PORTC,PORTD,animation[i]);
    3004:	8a 81       	ldd	r24, Y+2	; 0x02
    3006:	88 2f       	mov	r24, r24
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	88 0f       	add	r24, r24
    300c:	99 1f       	adc	r25, r25
    300e:	88 0f       	add	r24, r24
    3010:	99 1f       	adc	r25, r25
    3012:	fc 01       	movw	r30, r24
    3014:	e2 59       	subi	r30, 0x92	; 146
    3016:	fe 4f       	sbci	r31, 0xFE	; 254
    3018:	80 81       	ld	r24, Z
    301a:	91 81       	ldd	r25, Z+1	; 0x01
    301c:	a2 81       	ldd	r26, Z+2	; 0x02
    301e:	b3 81       	ldd	r27, Z+3	; 0x03
    3020:	98 2f       	mov	r25, r24
    3022:	82 e0       	ldi	r24, 0x02	; 2
    3024:	63 e0       	ldi	r22, 0x03	; 3
    3026:	49 2f       	mov	r20, r25
    3028:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_VidWriteData>
			 break;
	     } 
}

LCD_VidWriteCommand(PORTC,PORTD,64);
 for(i=0;i<56;i++){
    302c:	8a 81       	ldd	r24, Y+2	; 0x02
    302e:	8f 5f       	subi	r24, 0xFF	; 255
    3030:	8a 83       	std	Y+2, r24	; 0x02
    3032:	8a 81       	ldd	r24, Y+2	; 0x02
    3034:	88 33       	cpi	r24, 0x38	; 56
    3036:	30 f3       	brcs	.-52     	; 0x3004 <LCD_VidCheckVolt+0x39c>
    LCD_VidWriteData(PORTC,PORTD,animation[i]);
    }

 }
    3038:	e3 96       	adiw	r28, 0x33	; 51
    303a:	0f b6       	in	r0, 0x3f	; 63
    303c:	f8 94       	cli
    303e:	de bf       	out	0x3e, r29	; 62
    3040:	0f be       	out	0x3f, r0	; 63
    3042:	cd bf       	out	0x3d, r28	; 61
    3044:	cf 91       	pop	r28
    3046:	df 91       	pop	r29
    3048:	08 95       	ret

0000304a <LCD_VidCheckDuty>:

void LCD_VidCheckDuty(u8 LOC_u8Duty,u8*LOC_u8Pointer1stStart,u8*LOC_u8Pointer2ndStart,u8*LOC_u8PointerRowSize){
    304a:	df 93       	push	r29
    304c:	cf 93       	push	r28
    304e:	cd b7       	in	r28, 0x3d	; 61
    3050:	de b7       	in	r29, 0x3e	; 62
    3052:	6f 97       	sbiw	r28, 0x1f	; 31
    3054:	0f b6       	in	r0, 0x3f	; 63
    3056:	f8 94       	cli
    3058:	de bf       	out	0x3e, r29	; 62
    305a:	0f be       	out	0x3f, r0	; 63
    305c:	cd bf       	out	0x3d, r28	; 61
    305e:	8c 8b       	std	Y+20, r24	; 0x14
    3060:	7e 8b       	std	Y+22, r23	; 0x16
    3062:	6d 8b       	std	Y+21, r22	; 0x15
    3064:	58 8f       	std	Y+24, r21	; 0x18
    3066:	4f 8b       	std	Y+23, r20	; 0x17
    3068:	3a 8f       	std	Y+26, r19	; 0x1a
    306a:	29 8f       	std	Y+25, r18	; 0x19
this function is used to select the LCD bit number or the place which the square wave 
is going to start according to the Duty Cycle
*/
	
	
	u8 start[]={16,8,15,7,14,6,13,5,12,4,11,3,10,2,9,1};	
    306c:	ce 01       	movw	r24, r28
    306e:	04 96       	adiw	r24, 0x04	; 4
    3070:	9c 8f       	std	Y+28, r25	; 0x1c
    3072:	8b 8f       	std	Y+27, r24	; 0x1b
    3074:	ea e7       	ldi	r30, 0x7A	; 122
    3076:	f2 e0       	ldi	r31, 0x02	; 2
    3078:	fe 8f       	std	Y+30, r31	; 0x1e
    307a:	ed 8f       	std	Y+29, r30	; 0x1d
    307c:	f0 e1       	ldi	r31, 0x10	; 16
    307e:	ff 8f       	std	Y+31, r31	; 0x1f
    3080:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3082:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3084:	00 80       	ld	r0, Z
    3086:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3088:	9e 8d       	ldd	r25, Y+30	; 0x1e
    308a:	01 96       	adiw	r24, 0x01	; 1
    308c:	9e 8f       	std	Y+30, r25	; 0x1e
    308e:	8d 8f       	std	Y+29, r24	; 0x1d
    3090:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3092:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3094:	00 82       	st	Z, r0
    3096:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3098:	9c 8d       	ldd	r25, Y+28	; 0x1c
    309a:	01 96       	adiw	r24, 0x01	; 1
    309c:	9c 8f       	std	Y+28, r25	; 0x1c
    309e:	8b 8f       	std	Y+27, r24	; 0x1b
    30a0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    30a2:	91 50       	subi	r25, 0x01	; 1
    30a4:	9f 8f       	std	Y+31, r25	; 0x1f
    30a6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    30a8:	ee 23       	and	r30, r30
    30aa:	51 f7       	brne	.-44     	; 0x3080 <LCD_VidCheckDuty+0x36>
	u8 i=0,x=5,y=10;
    30ac:	1b 82       	std	Y+3, r1	; 0x03
    30ae:	85 e0       	ldi	r24, 0x05	; 5
    30b0:	8a 83       	std	Y+2, r24	; 0x02
    30b2:	8a e0       	ldi	r24, 0x0A	; 10
    30b4:	89 83       	std	Y+1, r24	; 0x01
    30b6:	39 c0       	rjmp	.+114    	; 0x312a <LCD_VidCheckDuty+0xe0>
	while(i<16){
		
		if(LOC_u8Duty<=x ||LOC_u8Duty<=y){
    30b8:	9c 89       	ldd	r25, Y+20	; 0x14
    30ba:	8a 81       	ldd	r24, Y+2	; 0x02
    30bc:	89 17       	cp	r24, r25
    30be:	20 f4       	brcc	.+8      	; 0x30c8 <LCD_VidCheckDuty+0x7e>
    30c0:	9c 89       	ldd	r25, Y+20	; 0x14
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
    30c4:	89 17       	cp	r24, r25
    30c6:	40 f1       	brcs	.+80     	; 0x3118 <LCD_VidCheckDuty+0xce>
			*LOC_u8Pointer1stStart=start[i];
    30c8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ca:	28 2f       	mov	r18, r24
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	ce 01       	movw	r24, r28
    30d0:	04 96       	adiw	r24, 0x04	; 4
    30d2:	fc 01       	movw	r30, r24
    30d4:	e2 0f       	add	r30, r18
    30d6:	f3 1f       	adc	r31, r19
    30d8:	80 81       	ld	r24, Z
    30da:	ed 89       	ldd	r30, Y+21	; 0x15
    30dc:	fe 89       	ldd	r31, Y+22	; 0x16
    30de:	80 83       	st	Z, r24
	        *LOC_u8Pointer2ndStart=start[i+1];
    30e0:	8b 81       	ldd	r24, Y+3	; 0x03
    30e2:	88 2f       	mov	r24, r24
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	9c 01       	movw	r18, r24
    30e8:	2f 5f       	subi	r18, 0xFF	; 255
    30ea:	3f 4f       	sbci	r19, 0xFF	; 255
    30ec:	ce 01       	movw	r24, r28
    30ee:	04 96       	adiw	r24, 0x04	; 4
    30f0:	fc 01       	movw	r30, r24
    30f2:	e2 0f       	add	r30, r18
    30f4:	f3 1f       	adc	r31, r19
    30f6:	80 81       	ld	r24, Z
    30f8:	ef 89       	ldd	r30, Y+23	; 0x17
    30fa:	f8 8d       	ldd	r31, Y+24	; 0x18
    30fc:	80 83       	st	Z, r24
            *LOC_u8PointerRowSize=start[i];
    30fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3100:	28 2f       	mov	r18, r24
    3102:	30 e0       	ldi	r19, 0x00	; 0
    3104:	ce 01       	movw	r24, r28
    3106:	04 96       	adiw	r24, 0x04	; 4
    3108:	fc 01       	movw	r30, r24
    310a:	e2 0f       	add	r30, r18
    310c:	f3 1f       	adc	r31, r19
    310e:	80 81       	ld	r24, Z
    3110:	e9 8d       	ldd	r30, Y+25	; 0x19
    3112:	fa 8d       	ldd	r31, Y+26	; 0x1a
    3114:	80 83       	st	Z, r24
    3116:	0c c0       	rjmp	.+24     	; 0x3130 <LCD_VidCheckDuty+0xe6>
			break;
		}
		x+=10;
    3118:	8a 81       	ldd	r24, Y+2	; 0x02
    311a:	86 5f       	subi	r24, 0xF6	; 246
    311c:	8a 83       	std	Y+2, r24	; 0x02
		y+=10;
    311e:	89 81       	ldd	r24, Y+1	; 0x01
    3120:	86 5f       	subi	r24, 0xF6	; 246
    3122:	89 83       	std	Y+1, r24	; 0x01
		i+=2;
    3124:	8b 81       	ldd	r24, Y+3	; 0x03
    3126:	8e 5f       	subi	r24, 0xFE	; 254
    3128:	8b 83       	std	Y+3, r24	; 0x03
*/
	
	
	u8 start[]={16,8,15,7,14,6,13,5,12,4,11,3,10,2,9,1};	
	u8 i=0,x=5,y=10;
	while(i<16){
    312a:	8b 81       	ldd	r24, Y+3	; 0x03
    312c:	80 31       	cpi	r24, 0x10	; 16
    312e:	20 f2       	brcs	.-120    	; 0x30b8 <LCD_VidCheckDuty+0x6e>
		}
		x+=10;
		y+=10;
		i+=2;
	}
}
    3130:	6f 96       	adiw	r28, 0x1f	; 31
    3132:	0f b6       	in	r0, 0x3f	; 63
    3134:	f8 94       	cli
    3136:	de bf       	out	0x3e, r29	; 62
    3138:	0f be       	out	0x3f, r0	; 63
    313a:	cd bf       	out	0x3d, r28	; 61
    313c:	cf 91       	pop	r28
    313e:	df 91       	pop	r29
    3140:	08 95       	ret

00003142 <LCD_vidDraw>:


void LCD_vidDraw(u8 first_wave_start,u8 Secand_wave_start,u8 ROW_size){
    3142:	df 93       	push	r29
    3144:	cf 93       	push	r28
    3146:	cd b7       	in	r28, 0x3d	; 61
    3148:	de b7       	in	r29, 0x3e	; 62
    314a:	29 97       	sbiw	r28, 0x09	; 9
    314c:	0f b6       	in	r0, 0x3f	; 63
    314e:	f8 94       	cli
    3150:	de bf       	out	0x3e, r29	; 62
    3152:	0f be       	out	0x3f, r0	; 63
    3154:	cd bf       	out	0x3d, r28	; 61
    3156:	8f 83       	std	Y+7, r24	; 0x07
    3158:	68 87       	std	Y+8, r22	; 0x08
    315a:	49 87       	std	Y+9, r20	; 0x09
	

	u8 i=0,j;
    315c:	1a 82       	std	Y+2, r1	; 0x02

  for(i=0;i<16;i++){
    315e:	1a 82       	std	Y+2, r1	; 0x02
    3160:	11 c0       	rjmp	.+34     	; 0x3184 <LCD_vidDraw+0x42>
		LCD_VidSetDdram(PORTC,PORTD,2,i+1);
    3162:	8a 81       	ldd	r24, Y+2	; 0x02
    3164:	98 2f       	mov	r25, r24
    3166:	9f 5f       	subi	r25, 0xFF	; 255
    3168:	82 e0       	ldi	r24, 0x02	; 2
    316a:	63 e0       	ldi	r22, 0x03	; 3
    316c:	42 e0       	ldi	r20, 0x02	; 2
    316e:	29 2f       	mov	r18, r25
    3170:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <LCD_VidSetDdram>
		LCD_VidWriteData(PORTC,PORTD,6);    //X Axis// 
    3174:	82 e0       	ldi	r24, 0x02	; 2
    3176:	63 e0       	ldi	r22, 0x03	; 3
    3178:	46 e0       	ldi	r20, 0x06	; 6
    317a:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_VidWriteData>
void LCD_vidDraw(u8 first_wave_start,u8 Secand_wave_start,u8 ROW_size){
	

	u8 i=0,j;

  for(i=0;i<16;i++){
    317e:	8a 81       	ldd	r24, Y+2	; 0x02
    3180:	8f 5f       	subi	r24, 0xFF	; 255
    3182:	8a 83       	std	Y+2, r24	; 0x02
    3184:	8a 81       	ldd	r24, Y+2	; 0x02
    3186:	80 31       	cpi	r24, 0x10	; 16
    3188:	60 f3       	brcs	.-40     	; 0x3162 <LCD_vidDraw+0x20>
		LCD_VidSetDdram(PORTC,PORTD,2,i+1);
		LCD_VidWriteData(PORTC,PORTD,6);    //X Axis// 
		}
		
 for(i=16;i>ROW_size;i--){
    318a:	80 e1       	ldi	r24, 0x10	; 16
    318c:	8a 83       	std	Y+2, r24	; 0x02
    318e:	1c c0       	rjmp	.+56     	; 0x31c8 <LCD_vidDraw+0x86>
	LCD_VidSetDdram(PORTC,PORTD,1,i);
    3190:	82 e0       	ldi	r24, 0x02	; 2
    3192:	63 e0       	ldi	r22, 0x03	; 3
    3194:	41 e0       	ldi	r20, 0x01	; 1
    3196:	2a 81       	ldd	r18, Y+2	; 0x02
    3198:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <LCD_VidSetDdram>
	LCD_VidWriteData(PORTC,PORTD,5);
    319c:	82 e0       	ldi	r24, 0x02	; 2
    319e:	63 e0       	ldi	r22, 0x03	; 3
    31a0:	45 e0       	ldi	r20, 0x05	; 5
    31a2:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_VidWriteData>
	LCD_VidSetDdram(PORTC,PORTD,1,i-8);
    31a6:	8a 81       	ldd	r24, Y+2	; 0x02
    31a8:	98 2f       	mov	r25, r24
    31aa:	98 50       	subi	r25, 0x08	; 8
    31ac:	82 e0       	ldi	r24, 0x02	; 2
    31ae:	63 e0       	ldi	r22, 0x03	; 3
    31b0:	41 e0       	ldi	r20, 0x01	; 1
    31b2:	29 2f       	mov	r18, r25
    31b4:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <LCD_VidSetDdram>
	LCD_VidWriteData(PORTC,PORTD,5);
    31b8:	82 e0       	ldi	r24, 0x02	; 2
    31ba:	63 e0       	ldi	r22, 0x03	; 3
    31bc:	45 e0       	ldi	r20, 0x05	; 5
    31be:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_VidWriteData>
  for(i=0;i<16;i++){
		LCD_VidSetDdram(PORTC,PORTD,2,i+1);
		LCD_VidWriteData(PORTC,PORTD,6);    //X Axis// 
		}
		
 for(i=16;i>ROW_size;i--){
    31c2:	8a 81       	ldd	r24, Y+2	; 0x02
    31c4:	81 50       	subi	r24, 0x01	; 1
    31c6:	8a 83       	std	Y+2, r24	; 0x02
    31c8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ca:	89 85       	ldd	r24, Y+9	; 0x09
    31cc:	89 17       	cp	r24, r25
    31ce:	00 f3       	brcs	.-64     	; 0x3190 <LCD_vidDraw+0x4e>
	LCD_VidWriteData(PORTC,PORTD,5);
	LCD_VidSetDdram(PORTC,PORTD,1,i-8);
	LCD_VidWriteData(PORTC,PORTD,5);
   }

u8 ARRAY_WAVE[]={first_wave_start,Secand_wave_start,first_wave_end,secand_wave_end};
    31d0:	8f 81       	ldd	r24, Y+7	; 0x07
    31d2:	8b 83       	std	Y+3, r24	; 0x03
    31d4:	88 85       	ldd	r24, Y+8	; 0x08
    31d6:	8c 83       	std	Y+4, r24	; 0x04
    31d8:	89 e0       	ldi	r24, 0x09	; 9
    31da:	8d 83       	std	Y+5, r24	; 0x05
    31dc:	81 e0       	ldi	r24, 0x01	; 1
    31de:	8e 83       	std	Y+6, r24	; 0x06
i=10;
    31e0:	8a e0       	ldi	r24, 0x0A	; 10
    31e2:	8a 83       	std	Y+2, r24	; 0x02
for(j=0;j<2;j++){
    31e4:	19 82       	std	Y+1, r1	; 0x01
    31e6:	76 c0       	rjmp	.+236    	; 0x32d4 <LCD_vidDraw+0x192>
	LCD_VidSetDdram(PORTC,PORTD,1,ARRAY_WAVE[j]);
    31e8:	89 81       	ldd	r24, Y+1	; 0x01
    31ea:	28 2f       	mov	r18, r24
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	ce 01       	movw	r24, r28
    31f0:	03 96       	adiw	r24, 0x03	; 3
    31f2:	fc 01       	movw	r30, r24
    31f4:	e2 0f       	add	r30, r18
    31f6:	f3 1f       	adc	r31, r19
    31f8:	90 81       	ld	r25, Z
    31fa:	82 e0       	ldi	r24, 0x02	; 2
    31fc:	63 e0       	ldi	r22, 0x03	; 3
    31fe:	41 e0       	ldi	r20, 0x01	; 1
    3200:	29 2f       	mov	r18, r25
    3202:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <LCD_VidSetDdram>
	LCD_VidWriteData(PORTC,PORTD,0);   //ton         the size of ton from right         ---//
    3206:	82 e0       	ldi	r24, 0x02	; 2
    3208:	63 e0       	ldi	r22, 0x03	; 3
    320a:	40 e0       	ldi	r20, 0x00	; 0
    320c:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_VidWriteData>
	LCD_VidSetDdram(PORTC,PORTD,2,ARRAY_WAVE[j]);
    3210:	89 81       	ldd	r24, Y+1	; 0x01
    3212:	28 2f       	mov	r18, r24
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	ce 01       	movw	r24, r28
    3218:	03 96       	adiw	r24, 0x03	; 3
    321a:	fc 01       	movw	r30, r24
    321c:	e2 0f       	add	r30, r18
    321e:	f3 1f       	adc	r31, r19
    3220:	90 81       	ld	r25, Z
    3222:	82 e0       	ldi	r24, 0x02	; 2
    3224:	63 e0       	ldi	r22, 0x03	; 3
    3226:	42 e0       	ldi	r20, 0x02	; 2
    3228:	29 2f       	mov	r18, r25
    322a:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <LCD_VidSetDdram>
	LCD_VidWriteData(PORTC,PORTD,1);//        ---  toff  wave row 2 goes to  left               //
    322e:	82 e0       	ldi	r24, 0x02	; 2
    3230:	63 e0       	ldi	r22, 0x03	; 3
    3232:	41 e0       	ldi	r20, 0x01	; 1
    3234:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_VidWriteData>
	LCD_VidSetDdram(PORTC,PORTD,1,ARRAY_WAVE[j+2]);
    3238:	89 81       	ldd	r24, Y+1	; 0x01
    323a:	88 2f       	mov	r24, r24
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	9c 01       	movw	r18, r24
    3240:	2e 5f       	subi	r18, 0xFE	; 254
    3242:	3f 4f       	sbci	r19, 0xFF	; 255
    3244:	ce 01       	movw	r24, r28
    3246:	03 96       	adiw	r24, 0x03	; 3
    3248:	fc 01       	movw	r30, r24
    324a:	e2 0f       	add	r30, r18
    324c:	f3 1f       	adc	r31, r19
    324e:	90 81       	ld	r25, Z
    3250:	82 e0       	ldi	r24, 0x02	; 2
    3252:	63 e0       	ldi	r22, 0x03	; 3
    3254:	41 e0       	ldi	r20, 0x01	; 1
    3256:	29 2f       	mov	r18, r25
    3258:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <LCD_VidSetDdram>
	LCD_VidWriteData(PORTC,PORTD,4);// row 1  col 1  *//
    325c:	82 e0       	ldi	r24, 0x02	; 2
    325e:	63 e0       	ldi	r22, 0x03	; 3
    3260:	44 e0       	ldi	r20, 0x04	; 4
    3262:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_VidWriteData>
	LCD_VidSetDdram(PORTC,PORTD,2,ARRAY_WAVE[j+2]);
    3266:	89 81       	ldd	r24, Y+1	; 0x01
    3268:	88 2f       	mov	r24, r24
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	9c 01       	movw	r18, r24
    326e:	2e 5f       	subi	r18, 0xFE	; 254
    3270:	3f 4f       	sbci	r19, 0xFF	; 255
    3272:	ce 01       	movw	r24, r28
    3274:	03 96       	adiw	r24, 0x03	; 3
    3276:	fc 01       	movw	r30, r24
    3278:	e2 0f       	add	r30, r18
    327a:	f3 1f       	adc	r31, r19
    327c:	90 81       	ld	r25, Z
    327e:	82 e0       	ldi	r24, 0x02	; 2
    3280:	63 e0       	ldi	r22, 0x03	; 3
    3282:	42 e0       	ldi	r20, 0x02	; 2
    3284:	29 2f       	mov	r18, r25
    3286:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <LCD_VidSetDdram>
	LCD_VidWriteData(PORTC,PORTD,3);// row2 col 2  *----  //
    328a:	82 e0       	ldi	r24, 0x02	; 2
    328c:	63 e0       	ldi	r22, 0x03	; 3
    328e:	43 e0       	ldi	r20, 0x03	; 3
    3290:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_VidWriteData>
    3294:	0e c0       	rjmp	.+28     	; 0x32b2 <LCD_vidDraw+0x170>
	   for(;i<ARRAY_WAVE[j];i++){
	      LCD_VidSetDdram(PORTC,PORTD,2,i);
    3296:	82 e0       	ldi	r24, 0x02	; 2
    3298:	63 e0       	ldi	r22, 0x03	; 3
    329a:	42 e0       	ldi	r20, 0x02	; 2
    329c:	2a 81       	ldd	r18, Y+2	; 0x02
    329e:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <LCD_VidSetDdram>
	      LCD_VidWriteData(PORTC,PORTD,2);
    32a2:	82 e0       	ldi	r24, 0x02	; 2
    32a4:	63 e0       	ldi	r22, 0x03	; 3
    32a6:	42 e0       	ldi	r20, 0x02	; 2
    32a8:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_VidWriteData>
	LCD_VidWriteData(PORTC,PORTD,1);//        ---  toff  wave row 2 goes to  left               //
	LCD_VidSetDdram(PORTC,PORTD,1,ARRAY_WAVE[j+2]);
	LCD_VidWriteData(PORTC,PORTD,4);// row 1  col 1  *//
	LCD_VidSetDdram(PORTC,PORTD,2,ARRAY_WAVE[j+2]);
	LCD_VidWriteData(PORTC,PORTD,3);// row2 col 2  *----  //
	   for(;i<ARRAY_WAVE[j];i++){
    32ac:	8a 81       	ldd	r24, Y+2	; 0x02
    32ae:	8f 5f       	subi	r24, 0xFF	; 255
    32b0:	8a 83       	std	Y+2, r24	; 0x02
    32b2:	89 81       	ldd	r24, Y+1	; 0x01
    32b4:	28 2f       	mov	r18, r24
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	ce 01       	movw	r24, r28
    32ba:	03 96       	adiw	r24, 0x03	; 3
    32bc:	fc 01       	movw	r30, r24
    32be:	e2 0f       	add	r30, r18
    32c0:	f3 1f       	adc	r31, r19
    32c2:	90 81       	ld	r25, Z
    32c4:	8a 81       	ldd	r24, Y+2	; 0x02
    32c6:	89 17       	cp	r24, r25
    32c8:	30 f3       	brcs	.-52     	; 0x3296 <LCD_vidDraw+0x154>
	      LCD_VidSetDdram(PORTC,PORTD,2,i);
	      LCD_VidWriteData(PORTC,PORTD,2);
        }
	   i=2;
    32ca:	82 e0       	ldi	r24, 0x02	; 2
    32cc:	8a 83       	std	Y+2, r24	; 0x02
	LCD_VidWriteData(PORTC,PORTD,5);
   }

u8 ARRAY_WAVE[]={first_wave_start,Secand_wave_start,first_wave_end,secand_wave_end};
i=10;
for(j=0;j<2;j++){
    32ce:	89 81       	ldd	r24, Y+1	; 0x01
    32d0:	8f 5f       	subi	r24, 0xFF	; 255
    32d2:	89 83       	std	Y+1, r24	; 0x01
    32d4:	89 81       	ldd	r24, Y+1	; 0x01
    32d6:	82 30       	cpi	r24, 0x02	; 2
    32d8:	08 f4       	brcc	.+2      	; 0x32dc <LCD_vidDraw+0x19a>
    32da:	86 cf       	rjmp	.-244    	; 0x31e8 <LCD_vidDraw+0xa6>
	      LCD_VidWriteData(PORTC,PORTD,2);
        }
	   i=2;
 }
		
}
    32dc:	29 96       	adiw	r28, 0x09	; 9
    32de:	0f b6       	in	r0, 0x3f	; 63
    32e0:	f8 94       	cli
    32e2:	de bf       	out	0x3e, r29	; 62
    32e4:	0f be       	out	0x3f, r0	; 63
    32e6:	cd bf       	out	0x3d, r28	; 61
    32e8:	cf 91       	pop	r28
    32ea:	df 91       	pop	r29
    32ec:	08 95       	ret

000032ee <LCD_VidDisplay>:

void LCD_VidDisplay(u8 LOC_u8DutyCycle,u8 LOC_u8Veff){
    32ee:	df 93       	push	r29
    32f0:	cf 93       	push	r28
    32f2:	00 d0       	rcall	.+0      	; 0x32f4 <LCD_VidDisplay+0x6>
    32f4:	00 d0       	rcall	.+0      	; 0x32f6 <LCD_VidDisplay+0x8>
    32f6:	0f 92       	push	r0
    32f8:	cd b7       	in	r28, 0x3d	; 61
    32fa:	de b7       	in	r29, 0x3e	; 62
    32fc:	8c 83       	std	Y+4, r24	; 0x04
    32fe:	6d 83       	std	Y+5, r22	; 0x05

u8 x=0,y=0,z=0;
    3300:	1b 82       	std	Y+3, r1	; 0x03
    3302:	1a 82       	std	Y+2, r1	; 0x02
    3304:	19 82       	std	Y+1, r1	; 0x01
LCD_VidWriteCommand(PORTC,PORTD,CLR);
    3306:	82 e0       	ldi	r24, 0x02	; 2
    3308:	63 e0       	ldi	r22, 0x03	; 3
    330a:	41 e0       	ldi	r20, 0x01	; 1
    330c:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LCD_VidWriteCommand>
   
if( (LOC_u8DutyCycle>0 && LOC_u8DutyCycle<=5)||(LOC_u8DutyCycle>10 && LOC_u8DutyCycle<=15)||(LOC_u8DutyCycle>20 && LOC_u8DutyCycle<=25)||(LOC_u8DutyCycle>30 && LOC_u8DutyCycle<=35)||(LOC_u8DutyCycle>40 && LOC_u8DutyCycle<=45)||(LOC_u8DutyCycle>50 && LOC_u8DutyCycle<=55)||(LOC_u8DutyCycle>60 && LOC_u8DutyCycle<=65)||(LOC_u8DutyCycle>70 && LOC_u8DutyCycle<=75)||(LOC_u8DutyCycle>80 && LOC_u8DutyCycle<=85)||(LOC_u8DutyCycle>90 && LOC_u8DutyCycle<=95) ){
    3310:	8c 81       	ldd	r24, Y+4	; 0x04
    3312:	88 23       	and	r24, r24
    3314:	19 f0       	breq	.+6      	; 0x331c <LCD_VidDisplay+0x2e>
    3316:	8c 81       	ldd	r24, Y+4	; 0x04
    3318:	86 30       	cpi	r24, 0x06	; 6
    331a:	b0 f1       	brcs	.+108    	; 0x3388 <LCD_VidDisplay+0x9a>
    331c:	8c 81       	ldd	r24, Y+4	; 0x04
    331e:	8b 30       	cpi	r24, 0x0B	; 11
    3320:	18 f0       	brcs	.+6      	; 0x3328 <LCD_VidDisplay+0x3a>
    3322:	8c 81       	ldd	r24, Y+4	; 0x04
    3324:	80 31       	cpi	r24, 0x10	; 16
    3326:	80 f1       	brcs	.+96     	; 0x3388 <LCD_VidDisplay+0x9a>
    3328:	8c 81       	ldd	r24, Y+4	; 0x04
    332a:	85 31       	cpi	r24, 0x15	; 21
    332c:	18 f0       	brcs	.+6      	; 0x3334 <LCD_VidDisplay+0x46>
    332e:	8c 81       	ldd	r24, Y+4	; 0x04
    3330:	8a 31       	cpi	r24, 0x1A	; 26
    3332:	50 f1       	brcs	.+84     	; 0x3388 <LCD_VidDisplay+0x9a>
    3334:	8c 81       	ldd	r24, Y+4	; 0x04
    3336:	8f 31       	cpi	r24, 0x1F	; 31
    3338:	18 f0       	brcs	.+6      	; 0x3340 <LCD_VidDisplay+0x52>
    333a:	8c 81       	ldd	r24, Y+4	; 0x04
    333c:	84 32       	cpi	r24, 0x24	; 36
    333e:	20 f1       	brcs	.+72     	; 0x3388 <LCD_VidDisplay+0x9a>
    3340:	8c 81       	ldd	r24, Y+4	; 0x04
    3342:	89 32       	cpi	r24, 0x29	; 41
    3344:	18 f0       	brcs	.+6      	; 0x334c <LCD_VidDisplay+0x5e>
    3346:	8c 81       	ldd	r24, Y+4	; 0x04
    3348:	8e 32       	cpi	r24, 0x2E	; 46
    334a:	f0 f0       	brcs	.+60     	; 0x3388 <LCD_VidDisplay+0x9a>
    334c:	8c 81       	ldd	r24, Y+4	; 0x04
    334e:	83 33       	cpi	r24, 0x33	; 51
    3350:	18 f0       	brcs	.+6      	; 0x3358 <LCD_VidDisplay+0x6a>
    3352:	8c 81       	ldd	r24, Y+4	; 0x04
    3354:	88 33       	cpi	r24, 0x38	; 56
    3356:	c0 f0       	brcs	.+48     	; 0x3388 <LCD_VidDisplay+0x9a>
    3358:	8c 81       	ldd	r24, Y+4	; 0x04
    335a:	8d 33       	cpi	r24, 0x3D	; 61
    335c:	18 f0       	brcs	.+6      	; 0x3364 <LCD_VidDisplay+0x76>
    335e:	8c 81       	ldd	r24, Y+4	; 0x04
    3360:	82 34       	cpi	r24, 0x42	; 66
    3362:	90 f0       	brcs	.+36     	; 0x3388 <LCD_VidDisplay+0x9a>
    3364:	8c 81       	ldd	r24, Y+4	; 0x04
    3366:	87 34       	cpi	r24, 0x47	; 71
    3368:	18 f0       	brcs	.+6      	; 0x3370 <LCD_VidDisplay+0x82>
    336a:	8c 81       	ldd	r24, Y+4	; 0x04
    336c:	8c 34       	cpi	r24, 0x4C	; 76
    336e:	60 f0       	brcs	.+24     	; 0x3388 <LCD_VidDisplay+0x9a>
    3370:	8c 81       	ldd	r24, Y+4	; 0x04
    3372:	81 35       	cpi	r24, 0x51	; 81
    3374:	18 f0       	brcs	.+6      	; 0x337c <LCD_VidDisplay+0x8e>
    3376:	8c 81       	ldd	r24, Y+4	; 0x04
    3378:	86 35       	cpi	r24, 0x56	; 86
    337a:	30 f0       	brcs	.+12     	; 0x3388 <LCD_VidDisplay+0x9a>
    337c:	8c 81       	ldd	r24, Y+4	; 0x04
    337e:	8b 35       	cpi	r24, 0x5B	; 91
    3380:	50 f0       	brcs	.+20     	; 0x3396 <LCD_VidDisplay+0xa8>
    3382:	8c 81       	ldd	r24, Y+4	; 0x04
    3384:	80 36       	cpi	r24, 0x60	; 96
    3386:	38 f4       	brcc	.+14     	; 0x3396 <LCD_VidDisplay+0xa8>

	   	  Ton_WIDTH=0b00000111;//row 3ard--//
    3388:	87 e0       	ldi	r24, 0x07	; 7
    338a:	8b 83       	std	Y+3, r24	; 0x03
      Vertical_line=0b00000100;//col tool  *//
    338c:	84 e0       	ldi	r24, 0x04	; 4
    338e:	8a 83       	std	Y+2, r24	; 0x02
            Ton_END=0b00011100;//--toff row 3ard//
    3390:	8c e1       	ldi	r24, 0x1C	; 28
    3392:	89 83       	std	Y+1, r24	; 0x01
    3394:	06 c0       	rjmp	.+12     	; 0x33a2 <LCD_VidDisplay+0xb4>
     }
else {
	      Ton_WIDTH=0b00011111;
    3396:	8f e1       	ldi	r24, 0x1F	; 31
    3398:	8b 83       	std	Y+3, r24	; 0x03
      Vertical_line=0b00010000;
    339a:	80 e1       	ldi	r24, 0x10	; 16
    339c:	8a 83       	std	Y+2, r24	; 0x02
            Ton_END=0b00010000;
    339e:	80 e1       	ldi	r24, 0x10	; 16
    33a0:	89 83       	std	Y+1, r24	; 0x01
}


LCD_VidAnimationDelete();
    33a2:	0e 94 f6 19 	call	0x33ec	; 0x33ec <LCD_VidAnimationDelete>
LCD_VidCheckVolt(Ton_WIDTH,Ton_END,Vertical_line,LOC_u8Veff); 
    33a6:	8b 81       	ldd	r24, Y+3	; 0x03
    33a8:	69 81       	ldd	r22, Y+1	; 0x01
    33aa:	4a 81       	ldd	r20, Y+2	; 0x02
    33ac:	2d 81       	ldd	r18, Y+5	; 0x05
    33ae:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_VidCheckVolt>

LCD_VidCheckDuty(LOC_u8DutyCycle,&first_wave_start,&Secand_wave_start,&ROW_size); 
    33b2:	2c e9       	ldi	r18, 0x9C	; 156
    33b4:	32 e0       	ldi	r19, 0x02	; 2
    33b6:	4b e9       	ldi	r20, 0x9B	; 155
    33b8:	52 e0       	ldi	r21, 0x02	; 2
    33ba:	ea e9       	ldi	r30, 0x9A	; 154
    33bc:	f2 e0       	ldi	r31, 0x02	; 2
    33be:	8c 81       	ldd	r24, Y+4	; 0x04
    33c0:	b9 01       	movw	r22, r18
    33c2:	9f 01       	movw	r18, r30
    33c4:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_VidCheckDuty>
 
LCD_vidDraw(first_wave_start,Secand_wave_start,ROW_size);
    33c8:	80 91 9c 02 	lds	r24, 0x029C
    33cc:	90 91 9b 02 	lds	r25, 0x029B
    33d0:	20 91 9a 02 	lds	r18, 0x029A
    33d4:	69 2f       	mov	r22, r25
    33d6:	42 2f       	mov	r20, r18
    33d8:	0e 94 a1 18 	call	0x3142	; 0x3142 <LCD_vidDraw>

 
}
    33dc:	0f 90       	pop	r0
    33de:	0f 90       	pop	r0
    33e0:	0f 90       	pop	r0
    33e2:	0f 90       	pop	r0
    33e4:	0f 90       	pop	r0
    33e6:	cf 91       	pop	r28
    33e8:	df 91       	pop	r29
    33ea:	08 95       	ret

000033ec <LCD_VidAnimationDelete>:

void LCD_VidAnimationDelete(void){
    33ec:	df 93       	push	r29
    33ee:	cf 93       	push	r28
    33f0:	0f 92       	push	r0
    33f2:	cd b7       	in	r28, 0x3d	; 61
    33f4:	de b7       	in	r29, 0x3e	; 62
	u8 i=0;
    33f6:	19 82       	std	Y+1, r1	; 0x01
	
	for(i=0;i<48;i++){
    33f8:	19 82       	std	Y+1, r1	; 0x01
    33fa:	11 c0       	rjmp	.+34     	; 0x341e <LCD_VidAnimationDelete+0x32>
		
		animation[i]=0x00;
    33fc:	89 81       	ldd	r24, Y+1	; 0x01
    33fe:	88 2f       	mov	r24, r24
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	88 0f       	add	r24, r24
    3404:	99 1f       	adc	r25, r25
    3406:	88 0f       	add	r24, r24
    3408:	99 1f       	adc	r25, r25
    340a:	fc 01       	movw	r30, r24
    340c:	e2 59       	subi	r30, 0x92	; 146
    340e:	fe 4f       	sbci	r31, 0xFE	; 254
    3410:	10 82       	st	Z, r1
    3412:	11 82       	std	Z+1, r1	; 0x01
    3414:	12 82       	std	Z+2, r1	; 0x02
    3416:	13 82       	std	Z+3, r1	; 0x03
}

void LCD_VidAnimationDelete(void){
	u8 i=0;
	
	for(i=0;i<48;i++){
    3418:	89 81       	ldd	r24, Y+1	; 0x01
    341a:	8f 5f       	subi	r24, 0xFF	; 255
    341c:	89 83       	std	Y+1, r24	; 0x01
    341e:	89 81       	ldd	r24, Y+1	; 0x01
    3420:	80 33       	cpi	r24, 0x30	; 48
    3422:	60 f3       	brcs	.-40     	; 0x33fc <LCD_VidAnimationDelete+0x10>
		
		animation[i]=0x00;
	}
	animation[8] =0b00011111;
    3424:	8f e1       	ldi	r24, 0x1F	; 31
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	a0 e0       	ldi	r26, 0x00	; 0
    342a:	b0 e0       	ldi	r27, 0x00	; 0
    342c:	80 93 8e 01 	sts	0x018E, r24
    3430:	90 93 8f 01 	sts	0x018F, r25
    3434:	a0 93 90 01 	sts	0x0190, r26
    3438:	b0 93 91 01 	sts	0x0191, r27
	animation[16]=0b00011111;
    343c:	8f e1       	ldi	r24, 0x1F	; 31
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	a0 e0       	ldi	r26, 0x00	; 0
    3442:	b0 e0       	ldi	r27, 0x00	; 0
    3444:	80 93 ae 01 	sts	0x01AE, r24
    3448:	90 93 af 01 	sts	0x01AF, r25
    344c:	a0 93 b0 01 	sts	0x01B0, r26
    3450:	b0 93 b1 01 	sts	0x01B1, r27
	animation[24]=0b00011111;
    3454:	8f e1       	ldi	r24, 0x1F	; 31
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	a0 e0       	ldi	r26, 0x00	; 0
    345a:	b0 e0       	ldi	r27, 0x00	; 0
    345c:	80 93 ce 01 	sts	0x01CE, r24
    3460:	90 93 cf 01 	sts	0x01CF, r25
    3464:	a0 93 d0 01 	sts	0x01D0, r26
    3468:	b0 93 d1 01 	sts	0x01D1, r27

}
    346c:	0f 90       	pop	r0
    346e:	cf 91       	pop	r28
    3470:	df 91       	pop	r29
    3472:	08 95       	ret

00003474 <__mulsi3>:
    3474:	62 9f       	mul	r22, r18
    3476:	d0 01       	movw	r26, r0
    3478:	73 9f       	mul	r23, r19
    347a:	f0 01       	movw	r30, r0
    347c:	82 9f       	mul	r24, r18
    347e:	e0 0d       	add	r30, r0
    3480:	f1 1d       	adc	r31, r1
    3482:	64 9f       	mul	r22, r20
    3484:	e0 0d       	add	r30, r0
    3486:	f1 1d       	adc	r31, r1
    3488:	92 9f       	mul	r25, r18
    348a:	f0 0d       	add	r31, r0
    348c:	83 9f       	mul	r24, r19
    348e:	f0 0d       	add	r31, r0
    3490:	74 9f       	mul	r23, r20
    3492:	f0 0d       	add	r31, r0
    3494:	65 9f       	mul	r22, r21
    3496:	f0 0d       	add	r31, r0
    3498:	99 27       	eor	r25, r25
    349a:	72 9f       	mul	r23, r18
    349c:	b0 0d       	add	r27, r0
    349e:	e1 1d       	adc	r30, r1
    34a0:	f9 1f       	adc	r31, r25
    34a2:	63 9f       	mul	r22, r19
    34a4:	b0 0d       	add	r27, r0
    34a6:	e1 1d       	adc	r30, r1
    34a8:	f9 1f       	adc	r31, r25
    34aa:	bd 01       	movw	r22, r26
    34ac:	cf 01       	movw	r24, r30
    34ae:	11 24       	eor	r1, r1
    34b0:	08 95       	ret

000034b2 <__divmodsi4>:
    34b2:	97 fb       	bst	r25, 7
    34b4:	09 2e       	mov	r0, r25
    34b6:	05 26       	eor	r0, r21
    34b8:	0e d0       	rcall	.+28     	; 0x34d6 <__divmodsi4_neg1>
    34ba:	57 fd       	sbrc	r21, 7
    34bc:	04 d0       	rcall	.+8      	; 0x34c6 <__divmodsi4_neg2>
    34be:	14 d0       	rcall	.+40     	; 0x34e8 <__udivmodsi4>
    34c0:	0a d0       	rcall	.+20     	; 0x34d6 <__divmodsi4_neg1>
    34c2:	00 1c       	adc	r0, r0
    34c4:	38 f4       	brcc	.+14     	; 0x34d4 <__divmodsi4_exit>

000034c6 <__divmodsi4_neg2>:
    34c6:	50 95       	com	r21
    34c8:	40 95       	com	r20
    34ca:	30 95       	com	r19
    34cc:	21 95       	neg	r18
    34ce:	3f 4f       	sbci	r19, 0xFF	; 255
    34d0:	4f 4f       	sbci	r20, 0xFF	; 255
    34d2:	5f 4f       	sbci	r21, 0xFF	; 255

000034d4 <__divmodsi4_exit>:
    34d4:	08 95       	ret

000034d6 <__divmodsi4_neg1>:
    34d6:	f6 f7       	brtc	.-4      	; 0x34d4 <__divmodsi4_exit>
    34d8:	90 95       	com	r25
    34da:	80 95       	com	r24
    34dc:	70 95       	com	r23
    34de:	61 95       	neg	r22
    34e0:	7f 4f       	sbci	r23, 0xFF	; 255
    34e2:	8f 4f       	sbci	r24, 0xFF	; 255
    34e4:	9f 4f       	sbci	r25, 0xFF	; 255
    34e6:	08 95       	ret

000034e8 <__udivmodsi4>:
    34e8:	a1 e2       	ldi	r26, 0x21	; 33
    34ea:	1a 2e       	mov	r1, r26
    34ec:	aa 1b       	sub	r26, r26
    34ee:	bb 1b       	sub	r27, r27
    34f0:	fd 01       	movw	r30, r26
    34f2:	0d c0       	rjmp	.+26     	; 0x350e <__udivmodsi4_ep>

000034f4 <__udivmodsi4_loop>:
    34f4:	aa 1f       	adc	r26, r26
    34f6:	bb 1f       	adc	r27, r27
    34f8:	ee 1f       	adc	r30, r30
    34fa:	ff 1f       	adc	r31, r31
    34fc:	a2 17       	cp	r26, r18
    34fe:	b3 07       	cpc	r27, r19
    3500:	e4 07       	cpc	r30, r20
    3502:	f5 07       	cpc	r31, r21
    3504:	20 f0       	brcs	.+8      	; 0x350e <__udivmodsi4_ep>
    3506:	a2 1b       	sub	r26, r18
    3508:	b3 0b       	sbc	r27, r19
    350a:	e4 0b       	sbc	r30, r20
    350c:	f5 0b       	sbc	r31, r21

0000350e <__udivmodsi4_ep>:
    350e:	66 1f       	adc	r22, r22
    3510:	77 1f       	adc	r23, r23
    3512:	88 1f       	adc	r24, r24
    3514:	99 1f       	adc	r25, r25
    3516:	1a 94       	dec	r1
    3518:	69 f7       	brne	.-38     	; 0x34f4 <__udivmodsi4_loop>
    351a:	60 95       	com	r22
    351c:	70 95       	com	r23
    351e:	80 95       	com	r24
    3520:	90 95       	com	r25
    3522:	9b 01       	movw	r18, r22
    3524:	ac 01       	movw	r20, r24
    3526:	bd 01       	movw	r22, r26
    3528:	cf 01       	movw	r24, r30
    352a:	08 95       	ret

0000352c <__prologue_saves__>:
    352c:	2f 92       	push	r2
    352e:	3f 92       	push	r3
    3530:	4f 92       	push	r4
    3532:	5f 92       	push	r5
    3534:	6f 92       	push	r6
    3536:	7f 92       	push	r7
    3538:	8f 92       	push	r8
    353a:	9f 92       	push	r9
    353c:	af 92       	push	r10
    353e:	bf 92       	push	r11
    3540:	cf 92       	push	r12
    3542:	df 92       	push	r13
    3544:	ef 92       	push	r14
    3546:	ff 92       	push	r15
    3548:	0f 93       	push	r16
    354a:	1f 93       	push	r17
    354c:	cf 93       	push	r28
    354e:	df 93       	push	r29
    3550:	cd b7       	in	r28, 0x3d	; 61
    3552:	de b7       	in	r29, 0x3e	; 62
    3554:	ca 1b       	sub	r28, r26
    3556:	db 0b       	sbc	r29, r27
    3558:	0f b6       	in	r0, 0x3f	; 63
    355a:	f8 94       	cli
    355c:	de bf       	out	0x3e, r29	; 62
    355e:	0f be       	out	0x3f, r0	; 63
    3560:	cd bf       	out	0x3d, r28	; 61
    3562:	09 94       	ijmp

00003564 <__epilogue_restores__>:
    3564:	2a 88       	ldd	r2, Y+18	; 0x12
    3566:	39 88       	ldd	r3, Y+17	; 0x11
    3568:	48 88       	ldd	r4, Y+16	; 0x10
    356a:	5f 84       	ldd	r5, Y+15	; 0x0f
    356c:	6e 84       	ldd	r6, Y+14	; 0x0e
    356e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3570:	8c 84       	ldd	r8, Y+12	; 0x0c
    3572:	9b 84       	ldd	r9, Y+11	; 0x0b
    3574:	aa 84       	ldd	r10, Y+10	; 0x0a
    3576:	b9 84       	ldd	r11, Y+9	; 0x09
    3578:	c8 84       	ldd	r12, Y+8	; 0x08
    357a:	df 80       	ldd	r13, Y+7	; 0x07
    357c:	ee 80       	ldd	r14, Y+6	; 0x06
    357e:	fd 80       	ldd	r15, Y+5	; 0x05
    3580:	0c 81       	ldd	r16, Y+4	; 0x04
    3582:	1b 81       	ldd	r17, Y+3	; 0x03
    3584:	aa 81       	ldd	r26, Y+2	; 0x02
    3586:	b9 81       	ldd	r27, Y+1	; 0x01
    3588:	ce 0f       	add	r28, r30
    358a:	d1 1d       	adc	r29, r1
    358c:	0f b6       	in	r0, 0x3f	; 63
    358e:	f8 94       	cli
    3590:	de bf       	out	0x3e, r29	; 62
    3592:	0f be       	out	0x3f, r0	; 63
    3594:	cd bf       	out	0x3d, r28	; 61
    3596:	ed 01       	movw	r28, r26
    3598:	08 95       	ret
    359a:	11 f4       	brne	.+4      	; 0x35a0 <__epilogue_restores__+0x3c>
    359c:	0e f4       	brtc	.+2      	; 0x35a0 <__epilogue_restores__+0x3c>
    359e:	4d c0       	rjmp	.+154    	; 0x363a <__fp_nan>
    35a0:	3e c0       	rjmp	.+124    	; 0x361e <__fp_mpack>

000035a2 <sqrt>:
    35a2:	5d d0       	rcall	.+186    	; 0x365e <__fp_splitA>
    35a4:	d0 f3       	brcs	.-12     	; 0x359a <__epilogue_restores__+0x36>
    35a6:	99 23       	and	r25, r25
    35a8:	d9 f3       	breq	.-10     	; 0x35a0 <__epilogue_restores__+0x3c>
    35aa:	ce f3       	brts	.-14     	; 0x359e <__epilogue_restores__+0x3a>
    35ac:	9f 57       	subi	r25, 0x7F	; 127
    35ae:	55 0b       	sbc	r21, r21
    35b0:	87 ff       	sbrs	r24, 7
    35b2:	46 d0       	rcall	.+140    	; 0x3640 <__fp_norm2>
    35b4:	00 24       	eor	r0, r0
    35b6:	a0 e6       	ldi	r26, 0x60	; 96
    35b8:	40 ea       	ldi	r20, 0xA0	; 160
    35ba:	90 01       	movw	r18, r0
    35bc:	80 58       	subi	r24, 0x80	; 128
    35be:	56 95       	lsr	r21
    35c0:	97 95       	ror	r25
    35c2:	28 f4       	brcc	.+10     	; 0x35ce <sqrt+0x2c>
    35c4:	80 5c       	subi	r24, 0xC0	; 192
    35c6:	66 0f       	add	r22, r22
    35c8:	77 1f       	adc	r23, r23
    35ca:	88 1f       	adc	r24, r24
    35cc:	20 f0       	brcs	.+8      	; 0x35d6 <sqrt+0x34>
    35ce:	26 17       	cp	r18, r22
    35d0:	37 07       	cpc	r19, r23
    35d2:	48 07       	cpc	r20, r24
    35d4:	30 f4       	brcc	.+12     	; 0x35e2 <sqrt+0x40>
    35d6:	62 1b       	sub	r22, r18
    35d8:	73 0b       	sbc	r23, r19
    35da:	84 0b       	sbc	r24, r20
    35dc:	20 29       	or	r18, r0
    35de:	31 29       	or	r19, r1
    35e0:	4a 2b       	or	r20, r26
    35e2:	a6 95       	lsr	r26
    35e4:	17 94       	ror	r1
    35e6:	07 94       	ror	r0
    35e8:	20 25       	eor	r18, r0
    35ea:	31 25       	eor	r19, r1
    35ec:	4a 27       	eor	r20, r26
    35ee:	58 f7       	brcc	.-42     	; 0x35c6 <sqrt+0x24>
    35f0:	66 0f       	add	r22, r22
    35f2:	77 1f       	adc	r23, r23
    35f4:	88 1f       	adc	r24, r24
    35f6:	20 f0       	brcs	.+8      	; 0x3600 <sqrt+0x5e>
    35f8:	26 17       	cp	r18, r22
    35fa:	37 07       	cpc	r19, r23
    35fc:	48 07       	cpc	r20, r24
    35fe:	30 f4       	brcc	.+12     	; 0x360c <sqrt+0x6a>
    3600:	62 0b       	sbc	r22, r18
    3602:	73 0b       	sbc	r23, r19
    3604:	84 0b       	sbc	r24, r20
    3606:	20 0d       	add	r18, r0
    3608:	31 1d       	adc	r19, r1
    360a:	41 1d       	adc	r20, r1
    360c:	a0 95       	com	r26
    360e:	81 f7       	brne	.-32     	; 0x35f0 <sqrt+0x4e>
    3610:	b9 01       	movw	r22, r18
    3612:	84 2f       	mov	r24, r20
    3614:	91 58       	subi	r25, 0x81	; 129
    3616:	88 0f       	add	r24, r24
    3618:	96 95       	lsr	r25
    361a:	87 95       	ror	r24
    361c:	08 95       	ret

0000361e <__fp_mpack>:
    361e:	9f 3f       	cpi	r25, 0xFF	; 255
    3620:	31 f0       	breq	.+12     	; 0x362e <__fp_mpack_finite+0xc>

00003622 <__fp_mpack_finite>:
    3622:	91 50       	subi	r25, 0x01	; 1
    3624:	20 f4       	brcc	.+8      	; 0x362e <__fp_mpack_finite+0xc>
    3626:	87 95       	ror	r24
    3628:	77 95       	ror	r23
    362a:	67 95       	ror	r22
    362c:	b7 95       	ror	r27
    362e:	88 0f       	add	r24, r24
    3630:	91 1d       	adc	r25, r1
    3632:	96 95       	lsr	r25
    3634:	87 95       	ror	r24
    3636:	97 f9       	bld	r25, 7
    3638:	08 95       	ret

0000363a <__fp_nan>:
    363a:	9f ef       	ldi	r25, 0xFF	; 255
    363c:	80 ec       	ldi	r24, 0xC0	; 192
    363e:	08 95       	ret

00003640 <__fp_norm2>:
    3640:	91 50       	subi	r25, 0x01	; 1
    3642:	50 40       	sbci	r21, 0x00	; 0
    3644:	66 0f       	add	r22, r22
    3646:	77 1f       	adc	r23, r23
    3648:	88 1f       	adc	r24, r24
    364a:	d2 f7       	brpl	.-12     	; 0x3640 <__fp_norm2>
    364c:	08 95       	ret

0000364e <__fp_split3>:
    364e:	57 fd       	sbrc	r21, 7
    3650:	90 58       	subi	r25, 0x80	; 128
    3652:	44 0f       	add	r20, r20
    3654:	55 1f       	adc	r21, r21
    3656:	59 f0       	breq	.+22     	; 0x366e <__fp_splitA+0x10>
    3658:	5f 3f       	cpi	r21, 0xFF	; 255
    365a:	71 f0       	breq	.+28     	; 0x3678 <__fp_splitA+0x1a>
    365c:	47 95       	ror	r20

0000365e <__fp_splitA>:
    365e:	88 0f       	add	r24, r24
    3660:	97 fb       	bst	r25, 7
    3662:	99 1f       	adc	r25, r25
    3664:	61 f0       	breq	.+24     	; 0x367e <__fp_splitA+0x20>
    3666:	9f 3f       	cpi	r25, 0xFF	; 255
    3668:	79 f0       	breq	.+30     	; 0x3688 <__fp_splitA+0x2a>
    366a:	87 95       	ror	r24
    366c:	08 95       	ret
    366e:	12 16       	cp	r1, r18
    3670:	13 06       	cpc	r1, r19
    3672:	14 06       	cpc	r1, r20
    3674:	55 1f       	adc	r21, r21
    3676:	f2 cf       	rjmp	.-28     	; 0x365c <__fp_split3+0xe>
    3678:	46 95       	lsr	r20
    367a:	f1 df       	rcall	.-30     	; 0x365e <__fp_splitA>
    367c:	08 c0       	rjmp	.+16     	; 0x368e <__fp_splitA+0x30>
    367e:	16 16       	cp	r1, r22
    3680:	17 06       	cpc	r1, r23
    3682:	18 06       	cpc	r1, r24
    3684:	99 1f       	adc	r25, r25
    3686:	f1 cf       	rjmp	.-30     	; 0x366a <__fp_splitA+0xc>
    3688:	86 95       	lsr	r24
    368a:	71 05       	cpc	r23, r1
    368c:	61 05       	cpc	r22, r1
    368e:	08 94       	sec
    3690:	08 95       	ret

00003692 <_exit>:
    3692:	f8 94       	cli

00003694 <__stop_program>:
    3694:	ff cf       	rjmp	.-2      	; 0x3694 <__stop_program>
