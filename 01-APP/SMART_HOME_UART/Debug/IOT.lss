
IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000aa  00800060  00002dd8  00002e6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  0080010a  0080010a  00002f16  2**0
                  ALLOC
  3 .stab         00002c70  00000000  00000000  00002f18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001197  00000000  00000000  00005b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006fcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009b03  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a8b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000aa10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ac9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b46b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 3a 14 	jmp	0x2874	; 0x2874 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 71 14 	jmp	0x28e2	; 0x28e2 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <__vector_13>
      38:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <__vector_14>
      3c:	0c 94 8a 15 	jmp	0x2b14	; 0x2b14 <__vector_15>
      40:	0c 94 71 06 	jmp	0xce2	; 0xce2 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 30       	cpi	r26, 0x0A	; 10
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e0       	ldi	r26, 0x0A	; 10
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 32       	cpi	r26, 0x25	; 37
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 09 16 	call	0x2c12	; 0x2c12 <main>
      8a:	0c 94 ea 16 	jmp	0x2dd4	; 0x2dd4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 ef       	ldi	r26, 0xF7	; 247
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bf 16 	jmp	0x2d7e	; 0x2d7e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 db 16 	jmp	0x2db6	; 0x2db6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bf 16 	jmp	0x2d7e	; 0x2d7e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 db 16 	jmp	0x2db6	; 0x2db6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 ef       	ldi	r24, 0xF7	; 247
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bf 16 	jmp	0x2d7e	; 0x2d7e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 db 16 	jmp	0x2db6	; 0x2db6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 bf 16 	jmp	0x2d7e	; 0x2d7e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 db 16 	jmp	0x2db6	; 0x2db6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 bf 16 	jmp	0x2d7e	; 0x2d7e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 db 16 	jmp	0x2db6	; 0x2db6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_SetCallBack>:
	#include "BIT_MATH.h"
	#include "ADC_interface.h"
	#include "ADC_register.h"

	static void(*Gptr)(u16 ADC_Adress)=NULL;
	void ADC_SetCallBack(void (*LocPtr)(u16 ADC_Adress)){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <ADC_SetCallBack+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01

		if(LocPtr!=NULL){
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	9a 81       	ldd	r25, Y+2	; 0x02
     b58:	00 97       	sbiw	r24, 0x00	; 0
     b5a:	31 f0       	breq	.+12     	; 0xb68 <ADC_SetCallBack+0x22>
			Gptr=LocPtr;
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	9a 81       	ldd	r25, Y+2	; 0x02
     b60:	90 93 0b 01 	sts	0x010B, r25
     b64:	80 93 0a 01 	sts	0x010A, r24
			}

	}
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
     b6c:	cf 91       	pop	r28
     b6e:	df 91       	pop	r29
     b70:	08 95       	ret

00000b72 <ADC_VidInit>:
	void ADC_VidInit(void){
     b72:	df 93       	push	r29
     b74:	cf 93       	push	r28
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
	//CHOOSE THE Vref//
	  SET_BIT(ADMUX,PIN6);
     b7a:	a7 e2       	ldi	r26, 0x27	; 39
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	e7 e2       	ldi	r30, 0x27	; 39
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	80 64       	ori	r24, 0x40	; 64
     b86:	8c 93       	st	X, r24
	  CLR_BIT(ADMUX,PIN7);
     b88:	a7 e2       	ldi	r26, 0x27	; 39
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	e7 e2       	ldi	r30, 0x27	; 39
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	8f 77       	andi	r24, 0x7F	; 127
     b94:	8c 93       	st	X, r24

	#if DATA_READING==RIGHT  
	   CLR_BIT(ADMUX,PIN5);//choose the right adjest//
     b96:	a7 e2       	ldi	r26, 0x27	; 39
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	e7 e2       	ldi	r30, 0x27	; 39
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	8f 7d       	andi	r24, 0xDF	; 223
     ba2:	8c 93       	st	X, r24
	#endif   

	#if AUTO_TRIG==OFF
	   CLR_BIT(ADCSRA,PIN5);//auto trigger OFF//
	#elif   AUTO_TRIG==ON
	  SET_BIT(ADCSRA,PIN5);//auto trigger on//
     ba4:	a6 e2       	ldi	r26, 0x26	; 38
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	e6 e2       	ldi	r30, 0x26	; 38
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	80 62       	ori	r24, 0x20	; 32
     bb0:	8c 93       	st	X, r24
	  CLR_BIT(SFIOR,PIN4);// this bit must be zero when SFIOR is written //
     bb2:	a0 e5       	ldi	r26, 0x50	; 80
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	e0 e5       	ldi	r30, 0x50	; 80
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	8f 7e       	andi	r24, 0xEF	; 239
     bbe:	8c 93       	st	X, r24
			  #if AUTO_TRIG_SOURCE==RUNNING
				  CLR_BIT(SFIOR,PIN5);
     bc0:	a0 e5       	ldi	r26, 0x50	; 80
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e0 e5       	ldi	r30, 0x50	; 80
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	8f 7d       	andi	r24, 0xDF	; 223
     bcc:	8c 93       	st	X, r24
				  CLR_BIT(SFIOR,PIN6);
     bce:	a0 e5       	ldi	r26, 0x50	; 80
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e0 e5       	ldi	r30, 0x50	; 80
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	8f 7b       	andi	r24, 0xBF	; 191
     bda:	8c 93       	st	X, r24
				  CLR_BIT(SFIOR,PIN7);
     bdc:	a0 e5       	ldi	r26, 0x50	; 80
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e0 e5       	ldi	r30, 0x50	; 80
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	8f 77       	andi	r24, 0x7F	; 127
     be8:	8c 93       	st	X, r24

			  #endif

	#endif   
	   
		CLR_BIT(ADCSRA,PIN0);  //pre scaller 64//
     bea:	a6 e2       	ldi	r26, 0x26	; 38
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e6 e2       	ldi	r30, 0x26	; 38
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	8e 7f       	andi	r24, 0xFE	; 254
     bf6:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,PIN1);
     bf8:	a6 e2       	ldi	r26, 0x26	; 38
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	e6 e2       	ldi	r30, 0x26	; 38
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	82 60       	ori	r24, 0x02	; 2
     c04:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,PIN2);
     c06:	a6 e2       	ldi	r26, 0x26	; 38
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	e6 e2       	ldi	r30, 0x26	; 38
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	84 60       	ori	r24, 0x04	; 4
     c12:	8c 93       	st	X, r24
		
	  
		SET_BIT(ADCSRA ,PIN7);//ADC ENABLBE//
     c14:	a6 e2       	ldi	r26, 0x26	; 38
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e6 e2       	ldi	r30, 0x26	; 38
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	80 68       	ori	r24, 0x80	; 128
     c20:	8c 93       	st	X, r24

	}
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	08 95       	ret

00000c28 <ADC_VidGetReadingPooling>:

	u16 ADC_VidGetReadingPooling(u8 LOC_u8AdcNum){
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	0f 92       	push	r0
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
     c32:	89 83       	std	Y+1, r24	; 0x01
		
		ADMUX&=0b11100000;
     c34:	a7 e2       	ldi	r26, 0x27	; 39
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e2       	ldi	r30, 0x27	; 39
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	80 7e       	andi	r24, 0xE0	; 224
     c40:	8c 93       	st	X, r24
		ADMUX|=LOC_u8AdcNum;
     c42:	a7 e2       	ldi	r26, 0x27	; 39
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e7 e2       	ldi	r30, 0x27	; 39
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	90 81       	ld	r25, Z
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	89 2b       	or	r24, r25
     c50:	8c 93       	st	X, r24
		
		SET_BIT(ADCSRA,PIN6);//start the conversion//
     c52:	a6 e2       	ldi	r26, 0x26	; 38
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	e6 e2       	ldi	r30, 0x26	; 38
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	80 64       	ori	r24, 0x40	; 64
     c5e:	8c 93       	st	X, r24
		
		while(0==GET_BIT(ADCSRA,PIN4)){
     c60:	e6 e2       	ldi	r30, 0x26	; 38
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	82 95       	swap	r24
     c68:	8f 70       	andi	r24, 0x0F	; 15
     c6a:	88 2f       	mov	r24, r24
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	81 70       	andi	r24, 0x01	; 1
     c70:	90 70       	andi	r25, 0x00	; 0
     c72:	00 97       	sbiw	r24, 0x00	; 0
     c74:	a9 f3       	breq	.-22     	; 0xc60 <ADC_VidGetReadingPooling+0x38>
			
		}
		SET_BIT(ADCSRA,PIN4);
     c76:	a6 e2       	ldi	r26, 0x26	; 38
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e6 e2       	ldi	r30, 0x26	; 38
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	80 61       	ori	r24, 0x10	; 16
     c82:	8c 93       	st	X, r24
		
		return ADC;
     c84:	e4 e2       	ldi	r30, 0x24	; 36
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	91 81       	ldd	r25, Z+1	; 0x01
	}
     c8c:	0f 90       	pop	r0
     c8e:	cf 91       	pop	r28
     c90:	df 91       	pop	r29
     c92:	08 95       	ret

00000c94 <ADC_VidGetReadingInterrupt>:

	void ADC_VidGetReadingInterrupt(u8 LOC_u8AdcNum){
     c94:	df 93       	push	r29
     c96:	cf 93       	push	r28
     c98:	0f 92       	push	r0
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
     c9e:	89 83       	std	Y+1, r24	; 0x01
		ADMUX&=0b11100000;
     ca0:	a7 e2       	ldi	r26, 0x27	; 39
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	e7 e2       	ldi	r30, 0x27	; 39
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	80 7e       	andi	r24, 0xE0	; 224
     cac:	8c 93       	st	X, r24
		ADMUX|=LOC_u8AdcNum;
     cae:	a7 e2       	ldi	r26, 0x27	; 39
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e7 e2       	ldi	r30, 0x27	; 39
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	90 81       	ld	r25, Z
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	89 2b       	or	r24, r25
     cbc:	8c 93       	st	X, r24

	#if	INTERRUPT_ADC==ON
	 SET_BIT(ADCSRA,PIN3);//enable the ADC interrupt on//
     cbe:	a6 e2       	ldi	r26, 0x26	; 38
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	e6 e2       	ldi	r30, 0x26	; 38
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	88 60       	ori	r24, 0x08	; 8
     cca:	8c 93       	st	X, r24
	#elif  INTERRUPT_ADC==OFF
	 CLR_BIT(ADCSRA,PIN3);//Disable the ADC interrupt on//
	#endif
	SET_BIT(ADCSRA,PIN6);//start the conversion//
     ccc:	a6 e2       	ldi	r26, 0x26	; 38
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e6 e2       	ldi	r30, 0x26	; 38
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	80 64       	ori	r24, 0x40	; 64
     cd8:	8c 93       	st	X, r24

	}
     cda:	0f 90       	pop	r0
     cdc:	cf 91       	pop	r28
     cde:	df 91       	pop	r29
     ce0:	08 95       	ret

00000ce2 <__vector_16>:

	void __vector_16( void ){
     ce2:	1f 92       	push	r1
     ce4:	0f 92       	push	r0
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	0f 92       	push	r0
     cea:	11 24       	eor	r1, r1
     cec:	2f 93       	push	r18
     cee:	3f 93       	push	r19
     cf0:	4f 93       	push	r20
     cf2:	5f 93       	push	r21
     cf4:	6f 93       	push	r22
     cf6:	7f 93       	push	r23
     cf8:	8f 93       	push	r24
     cfa:	9f 93       	push	r25
     cfc:	af 93       	push	r26
     cfe:	bf 93       	push	r27
     d00:	ef 93       	push	r30
     d02:	ff 93       	push	r31
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62

	 if(Gptr!=NULL){
     d0c:	80 91 0a 01 	lds	r24, 0x010A
     d10:	90 91 0b 01 	lds	r25, 0x010B
     d14:	00 97       	sbiw	r24, 0x00	; 0
     d16:	49 f0       	breq	.+18     	; 0xd2a <__vector_16+0x48>
		Gptr(ADC);
     d18:	e0 91 0a 01 	lds	r30, 0x010A
     d1c:	f0 91 0b 01 	lds	r31, 0x010B
     d20:	a4 e2       	ldi	r26, 0x24	; 36
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	8d 91       	ld	r24, X+
     d26:	9c 91       	ld	r25, X
     d28:	09 95       	icall
		}

	}
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	ff 91       	pop	r31
     d30:	ef 91       	pop	r30
     d32:	bf 91       	pop	r27
     d34:	af 91       	pop	r26
     d36:	9f 91       	pop	r25
     d38:	8f 91       	pop	r24
     d3a:	7f 91       	pop	r23
     d3c:	6f 91       	pop	r22
     d3e:	5f 91       	pop	r21
     d40:	4f 91       	pop	r20
     d42:	3f 91       	pop	r19
     d44:	2f 91       	pop	r18
     d46:	0f 90       	pop	r0
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	0f 90       	pop	r0
     d4c:	1f 90       	pop	r1
     d4e:	18 95       	reti

00000d50 <DIO_VidSetPinDirection>:
/*
loc_u8port=port name 
loc_u8pin =pin number
loc_u8state=pin direction
*/
void DIO_VidSetPinDirection(u8 loc_u8port,u8 loc_u8pin, u8 loc_u8state){
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
     d58:	27 97       	sbiw	r28, 0x07	; 7
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	f8 94       	cli
     d5e:	de bf       	out	0x3e, r29	; 62
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	cd bf       	out	0x3d, r28	; 61
     d64:	89 83       	std	Y+1, r24	; 0x01
     d66:	6a 83       	std	Y+2, r22	; 0x02
     d68:	4b 83       	std	Y+3, r20	; 0x03
	
	if(1==loc_u8state){
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	81 30       	cpi	r24, 0x01	; 1
     d6e:	09 f0       	breq	.+2      	; 0xd72 <DIO_VidSetPinDirection+0x22>
     d70:	6f c0       	rjmp	.+222    	; 0xe50 <DIO_VidSetPinDirection+0x100>
	    switch(loc_u8port){
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	3f 83       	std	Y+7, r19	; 0x07
     d7a:	2e 83       	std	Y+6, r18	; 0x06
     d7c:	8e 81       	ldd	r24, Y+6	; 0x06
     d7e:	9f 81       	ldd	r25, Y+7	; 0x07
     d80:	81 30       	cpi	r24, 0x01	; 1
     d82:	91 05       	cpc	r25, r1
     d84:	49 f1       	breq	.+82     	; 0xdd8 <DIO_VidSetPinDirection+0x88>
     d86:	2e 81       	ldd	r18, Y+6	; 0x06
     d88:	3f 81       	ldd	r19, Y+7	; 0x07
     d8a:	22 30       	cpi	r18, 0x02	; 2
     d8c:	31 05       	cpc	r19, r1
     d8e:	2c f4       	brge	.+10     	; 0xd9a <DIO_VidSetPinDirection+0x4a>
     d90:	8e 81       	ldd	r24, Y+6	; 0x06
     d92:	9f 81       	ldd	r25, Y+7	; 0x07
     d94:	00 97       	sbiw	r24, 0x00	; 0
     d96:	61 f0       	breq	.+24     	; 0xdb0 <DIO_VidSetPinDirection+0x60>
     d98:	d2 c0       	rjmp	.+420    	; 0xf3e <DIO_VidSetPinDirection+0x1ee>
     d9a:	2e 81       	ldd	r18, Y+6	; 0x06
     d9c:	3f 81       	ldd	r19, Y+7	; 0x07
     d9e:	22 30       	cpi	r18, 0x02	; 2
     da0:	31 05       	cpc	r19, r1
     da2:	71 f1       	breq	.+92     	; 0xe00 <DIO_VidSetPinDirection+0xb0>
     da4:	8e 81       	ldd	r24, Y+6	; 0x06
     da6:	9f 81       	ldd	r25, Y+7	; 0x07
     da8:	83 30       	cpi	r24, 0x03	; 3
     daa:	91 05       	cpc	r25, r1
     dac:	e9 f1       	breq	.+122    	; 0xe28 <DIO_VidSetPinDirection+0xd8>
     dae:	c7 c0       	rjmp	.+398    	; 0xf3e <DIO_VidSetPinDirection+0x1ee>
		case 0:SET_BIT(DDRA,loc_u8pin);break;
     db0:	aa e3       	ldi	r26, 0x3A	; 58
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	ea e3       	ldi	r30, 0x3A	; 58
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	48 2f       	mov	r20, r24
     dbc:	8a 81       	ldd	r24, Y+2	; 0x02
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	02 2e       	mov	r0, r18
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <DIO_VidSetPinDirection+0x7e>
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	0a 94       	dec	r0
     dd0:	e2 f7       	brpl	.-8      	; 0xdca <DIO_VidSetPinDirection+0x7a>
     dd2:	84 2b       	or	r24, r20
     dd4:	8c 93       	st	X, r24
     dd6:	b3 c0       	rjmp	.+358    	; 0xf3e <DIO_VidSetPinDirection+0x1ee>
		case 1:SET_BIT(DDRB,loc_u8pin);break;
     dd8:	a7 e3       	ldi	r26, 0x37	; 55
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e7 e3       	ldi	r30, 0x37	; 55
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	48 2f       	mov	r20, r24
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	02 2e       	mov	r0, r18
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <DIO_VidSetPinDirection+0xa6>
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	0a 94       	dec	r0
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <DIO_VidSetPinDirection+0xa2>
     dfa:	84 2b       	or	r24, r20
     dfc:	8c 93       	st	X, r24
     dfe:	9f c0       	rjmp	.+318    	; 0xf3e <DIO_VidSetPinDirection+0x1ee>
		case 2:SET_BIT(DDRC,loc_u8pin);break;
     e00:	a4 e3       	ldi	r26, 0x34	; 52
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e4 e3       	ldi	r30, 0x34	; 52
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	48 2f       	mov	r20, r24
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	02 2e       	mov	r0, r18
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <DIO_VidSetPinDirection+0xce>
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	0a 94       	dec	r0
     e20:	e2 f7       	brpl	.-8      	; 0xe1a <DIO_VidSetPinDirection+0xca>
     e22:	84 2b       	or	r24, r20
     e24:	8c 93       	st	X, r24
     e26:	8b c0       	rjmp	.+278    	; 0xf3e <DIO_VidSetPinDirection+0x1ee>
		case 3:SET_BIT(DDRD,loc_u8pin);break;
     e28:	a1 e3       	ldi	r26, 0x31	; 49
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e1 e3       	ldi	r30, 0x31	; 49
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	48 2f       	mov	r20, r24
     e34:	8a 81       	ldd	r24, Y+2	; 0x02
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	02 2e       	mov	r0, r18
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <DIO_VidSetPinDirection+0xf6>
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	0a 94       	dec	r0
     e48:	e2 f7       	brpl	.-8      	; 0xe42 <DIO_VidSetPinDirection+0xf2>
     e4a:	84 2b       	or	r24, r20
     e4c:	8c 93       	st	X, r24
     e4e:	77 c0       	rjmp	.+238    	; 0xf3e <DIO_VidSetPinDirection+0x1ee>
	 }
	}
	else if(0==loc_u8state){
     e50:	8b 81       	ldd	r24, Y+3	; 0x03
     e52:	88 23       	and	r24, r24
     e54:	09 f0       	breq	.+2      	; 0xe58 <DIO_VidSetPinDirection+0x108>
     e56:	73 c0       	rjmp	.+230    	; 0xf3e <DIO_VidSetPinDirection+0x1ee>
	    switch(loc_u8port){
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	3d 83       	std	Y+5, r19	; 0x05
     e60:	2c 83       	std	Y+4, r18	; 0x04
     e62:	8c 81       	ldd	r24, Y+4	; 0x04
     e64:	9d 81       	ldd	r25, Y+5	; 0x05
     e66:	81 30       	cpi	r24, 0x01	; 1
     e68:	91 05       	cpc	r25, r1
     e6a:	59 f1       	breq	.+86     	; 0xec2 <DIO_VidSetPinDirection+0x172>
     e6c:	2c 81       	ldd	r18, Y+4	; 0x04
     e6e:	3d 81       	ldd	r19, Y+5	; 0x05
     e70:	22 30       	cpi	r18, 0x02	; 2
     e72:	31 05       	cpc	r19, r1
     e74:	2c f4       	brge	.+10     	; 0xe80 <DIO_VidSetPinDirection+0x130>
     e76:	8c 81       	ldd	r24, Y+4	; 0x04
     e78:	9d 81       	ldd	r25, Y+5	; 0x05
     e7a:	00 97       	sbiw	r24, 0x00	; 0
     e7c:	69 f0       	breq	.+26     	; 0xe98 <DIO_VidSetPinDirection+0x148>
     e7e:	5f c0       	rjmp	.+190    	; 0xf3e <DIO_VidSetPinDirection+0x1ee>
     e80:	2c 81       	ldd	r18, Y+4	; 0x04
     e82:	3d 81       	ldd	r19, Y+5	; 0x05
     e84:	22 30       	cpi	r18, 0x02	; 2
     e86:	31 05       	cpc	r19, r1
     e88:	89 f1       	breq	.+98     	; 0xeec <DIO_VidSetPinDirection+0x19c>
     e8a:	8c 81       	ldd	r24, Y+4	; 0x04
     e8c:	9d 81       	ldd	r25, Y+5	; 0x05
     e8e:	83 30       	cpi	r24, 0x03	; 3
     e90:	91 05       	cpc	r25, r1
     e92:	09 f4       	brne	.+2      	; 0xe96 <DIO_VidSetPinDirection+0x146>
     e94:	40 c0       	rjmp	.+128    	; 0xf16 <DIO_VidSetPinDirection+0x1c6>
     e96:	53 c0       	rjmp	.+166    	; 0xf3e <DIO_VidSetPinDirection+0x1ee>
		case 0:CLR_BIT(DDRA,loc_u8pin);break;
     e98:	aa e3       	ldi	r26, 0x3A	; 58
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	ea e3       	ldi	r30, 0x3A	; 58
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	48 2f       	mov	r20, r24
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	02 2e       	mov	r0, r18
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <DIO_VidSetPinDirection+0x166>
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	0a 94       	dec	r0
     eb8:	e2 f7       	brpl	.-8      	; 0xeb2 <DIO_VidSetPinDirection+0x162>
     eba:	80 95       	com	r24
     ebc:	84 23       	and	r24, r20
     ebe:	8c 93       	st	X, r24
     ec0:	3e c0       	rjmp	.+124    	; 0xf3e <DIO_VidSetPinDirection+0x1ee>
		case 1:CLR_BIT(DDRB,loc_u8pin);break;
     ec2:	a7 e3       	ldi	r26, 0x37	; 55
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e7 e3       	ldi	r30, 0x37	; 55
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	48 2f       	mov	r20, r24
     ece:	8a 81       	ldd	r24, Y+2	; 0x02
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	02 2e       	mov	r0, r18
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <DIO_VidSetPinDirection+0x190>
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	0a 94       	dec	r0
     ee2:	e2 f7       	brpl	.-8      	; 0xedc <DIO_VidSetPinDirection+0x18c>
     ee4:	80 95       	com	r24
     ee6:	84 23       	and	r24, r20
     ee8:	8c 93       	st	X, r24
     eea:	29 c0       	rjmp	.+82     	; 0xf3e <DIO_VidSetPinDirection+0x1ee>
		case 2:CLR_BIT(DDRC,loc_u8pin);break;
     eec:	a4 e3       	ldi	r26, 0x34	; 52
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e4 e3       	ldi	r30, 0x34	; 52
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	48 2f       	mov	r20, r24
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	02 2e       	mov	r0, r18
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <DIO_VidSetPinDirection+0x1ba>
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	0a 94       	dec	r0
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <DIO_VidSetPinDirection+0x1b6>
     f0e:	80 95       	com	r24
     f10:	84 23       	and	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	14 c0       	rjmp	.+40     	; 0xf3e <DIO_VidSetPinDirection+0x1ee>
		case 3:CLR_BIT(DDRD,loc_u8pin);break;
     f16:	a1 e3       	ldi	r26, 0x31	; 49
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e1 e3       	ldi	r30, 0x31	; 49
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_VidSetPinDirection+0x1e4>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_VidSetPinDirection+0x1e0>
     f38:	80 95       	com	r24
     f3a:	84 23       	and	r24, r20
     f3c:	8c 93       	st	X, r24
	 }
	}
	
	
}
     f3e:	27 96       	adiw	r28, 0x07	; 7
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	f8 94       	cli
     f44:	de bf       	out	0x3e, r29	; 62
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	cd bf       	out	0x3d, r28	; 61
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	08 95       	ret

00000f50 <DIO_VidSetPinValue>:
void DIO_VidSetPinValue(u8 loc_u8port,u8 loc_u8pin, u8 loc_u8value){
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	27 97       	sbiw	r28, 0x07	; 7
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	f8 94       	cli
     f5e:	de bf       	out	0x3e, r29	; 62
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	cd bf       	out	0x3d, r28	; 61
     f64:	89 83       	std	Y+1, r24	; 0x01
     f66:	6a 83       	std	Y+2, r22	; 0x02
     f68:	4b 83       	std	Y+3, r20	; 0x03
	
	if(1==loc_u8value){
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	09 f0       	breq	.+2      	; 0xf72 <DIO_VidSetPinValue+0x22>
     f70:	6f c0       	rjmp	.+222    	; 0x1050 <DIO_VidSetPinValue+0x100>
	    switch(loc_u8port){
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	3f 83       	std	Y+7, r19	; 0x07
     f7a:	2e 83       	std	Y+6, r18	; 0x06
     f7c:	8e 81       	ldd	r24, Y+6	; 0x06
     f7e:	9f 81       	ldd	r25, Y+7	; 0x07
     f80:	81 30       	cpi	r24, 0x01	; 1
     f82:	91 05       	cpc	r25, r1
     f84:	49 f1       	breq	.+82     	; 0xfd8 <DIO_VidSetPinValue+0x88>
     f86:	2e 81       	ldd	r18, Y+6	; 0x06
     f88:	3f 81       	ldd	r19, Y+7	; 0x07
     f8a:	22 30       	cpi	r18, 0x02	; 2
     f8c:	31 05       	cpc	r19, r1
     f8e:	2c f4       	brge	.+10     	; 0xf9a <DIO_VidSetPinValue+0x4a>
     f90:	8e 81       	ldd	r24, Y+6	; 0x06
     f92:	9f 81       	ldd	r25, Y+7	; 0x07
     f94:	00 97       	sbiw	r24, 0x00	; 0
     f96:	61 f0       	breq	.+24     	; 0xfb0 <DIO_VidSetPinValue+0x60>
     f98:	d2 c0       	rjmp	.+420    	; 0x113e <DIO_VidSetPinValue+0x1ee>
     f9a:	2e 81       	ldd	r18, Y+6	; 0x06
     f9c:	3f 81       	ldd	r19, Y+7	; 0x07
     f9e:	22 30       	cpi	r18, 0x02	; 2
     fa0:	31 05       	cpc	r19, r1
     fa2:	71 f1       	breq	.+92     	; 0x1000 <DIO_VidSetPinValue+0xb0>
     fa4:	8e 81       	ldd	r24, Y+6	; 0x06
     fa6:	9f 81       	ldd	r25, Y+7	; 0x07
     fa8:	83 30       	cpi	r24, 0x03	; 3
     faa:	91 05       	cpc	r25, r1
     fac:	e9 f1       	breq	.+122    	; 0x1028 <DIO_VidSetPinValue+0xd8>
     fae:	c7 c0       	rjmp	.+398    	; 0x113e <DIO_VidSetPinValue+0x1ee>
		case 0:SET_BIT(PORTA,loc_u8pin);break;
     fb0:	ab e3       	ldi	r26, 0x3B	; 59
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	eb e3       	ldi	r30, 0x3B	; 59
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	48 2f       	mov	r20, r24
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 2e       	mov	r0, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <DIO_VidSetPinValue+0x7e>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	0a 94       	dec	r0
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <DIO_VidSetPinValue+0x7a>
     fd2:	84 2b       	or	r24, r20
     fd4:	8c 93       	st	X, r24
     fd6:	b3 c0       	rjmp	.+358    	; 0x113e <DIO_VidSetPinValue+0x1ee>
		case 1:SET_BIT(PORTB,loc_u8pin);break;
     fd8:	a8 e3       	ldi	r26, 0x38	; 56
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e8 e3       	ldi	r30, 0x38	; 56
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_VidSetPinValue+0xa6>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <DIO_VidSetPinValue+0xa2>
     ffa:	84 2b       	or	r24, r20
     ffc:	8c 93       	st	X, r24
     ffe:	9f c0       	rjmp	.+318    	; 0x113e <DIO_VidSetPinValue+0x1ee>
		case 2:SET_BIT(PORTC,loc_u8pin);break;
    1000:	a5 e3       	ldi	r26, 0x35	; 53
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e5 e3       	ldi	r30, 0x35	; 53
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 2e       	mov	r0, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <DIO_VidSetPinValue+0xce>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <DIO_VidSetPinValue+0xca>
    1022:	84 2b       	or	r24, r20
    1024:	8c 93       	st	X, r24
    1026:	8b c0       	rjmp	.+278    	; 0x113e <DIO_VidSetPinValue+0x1ee>
		case 3:SET_BIT(PORTD,loc_u8pin);break;
    1028:	a2 e3       	ldi	r26, 0x32	; 50
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e2 e3       	ldi	r30, 0x32	; 50
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	48 2f       	mov	r20, r24
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	02 2e       	mov	r0, r18
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <DIO_VidSetPinValue+0xf6>
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	0a 94       	dec	r0
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <DIO_VidSetPinValue+0xf2>
    104a:	84 2b       	or	r24, r20
    104c:	8c 93       	st	X, r24
    104e:	77 c0       	rjmp	.+238    	; 0x113e <DIO_VidSetPinValue+0x1ee>
	 }
	}
	else if(0==loc_u8value){
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	88 23       	and	r24, r24
    1054:	09 f0       	breq	.+2      	; 0x1058 <DIO_VidSetPinValue+0x108>
    1056:	73 c0       	rjmp	.+230    	; 0x113e <DIO_VidSetPinValue+0x1ee>
	    switch(loc_u8port){
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	3d 83       	std	Y+5, r19	; 0x05
    1060:	2c 83       	std	Y+4, r18	; 0x04
    1062:	8c 81       	ldd	r24, Y+4	; 0x04
    1064:	9d 81       	ldd	r25, Y+5	; 0x05
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	91 05       	cpc	r25, r1
    106a:	59 f1       	breq	.+86     	; 0x10c2 <DIO_VidSetPinValue+0x172>
    106c:	2c 81       	ldd	r18, Y+4	; 0x04
    106e:	3d 81       	ldd	r19, Y+5	; 0x05
    1070:	22 30       	cpi	r18, 0x02	; 2
    1072:	31 05       	cpc	r19, r1
    1074:	2c f4       	brge	.+10     	; 0x1080 <DIO_VidSetPinValue+0x130>
    1076:	8c 81       	ldd	r24, Y+4	; 0x04
    1078:	9d 81       	ldd	r25, Y+5	; 0x05
    107a:	00 97       	sbiw	r24, 0x00	; 0
    107c:	69 f0       	breq	.+26     	; 0x1098 <DIO_VidSetPinValue+0x148>
    107e:	5f c0       	rjmp	.+190    	; 0x113e <DIO_VidSetPinValue+0x1ee>
    1080:	2c 81       	ldd	r18, Y+4	; 0x04
    1082:	3d 81       	ldd	r19, Y+5	; 0x05
    1084:	22 30       	cpi	r18, 0x02	; 2
    1086:	31 05       	cpc	r19, r1
    1088:	89 f1       	breq	.+98     	; 0x10ec <DIO_VidSetPinValue+0x19c>
    108a:	8c 81       	ldd	r24, Y+4	; 0x04
    108c:	9d 81       	ldd	r25, Y+5	; 0x05
    108e:	83 30       	cpi	r24, 0x03	; 3
    1090:	91 05       	cpc	r25, r1
    1092:	09 f4       	brne	.+2      	; 0x1096 <DIO_VidSetPinValue+0x146>
    1094:	40 c0       	rjmp	.+128    	; 0x1116 <DIO_VidSetPinValue+0x1c6>
    1096:	53 c0       	rjmp	.+166    	; 0x113e <DIO_VidSetPinValue+0x1ee>
		case 0:CLR_BIT(PORTA,loc_u8pin);break;
    1098:	ab e3       	ldi	r26, 0x3B	; 59
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	eb e3       	ldi	r30, 0x3B	; 59
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	48 2f       	mov	r20, r24
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 2e       	mov	r0, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <DIO_VidSetPinValue+0x166>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	0a 94       	dec	r0
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <DIO_VidSetPinValue+0x162>
    10ba:	80 95       	com	r24
    10bc:	84 23       	and	r24, r20
    10be:	8c 93       	st	X, r24
    10c0:	3e c0       	rjmp	.+124    	; 0x113e <DIO_VidSetPinValue+0x1ee>
		case 1:CLR_BIT(PORTB,loc_u8pin);break;
    10c2:	a8 e3       	ldi	r26, 0x38	; 56
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e8 e3       	ldi	r30, 0x38	; 56
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	48 2f       	mov	r20, r24
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 2e       	mov	r0, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <DIO_VidSetPinValue+0x190>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	0a 94       	dec	r0
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <DIO_VidSetPinValue+0x18c>
    10e4:	80 95       	com	r24
    10e6:	84 23       	and	r24, r20
    10e8:	8c 93       	st	X, r24
    10ea:	29 c0       	rjmp	.+82     	; 0x113e <DIO_VidSetPinValue+0x1ee>
		case 2:CLR_BIT(PORTC,loc_u8pin);break;
    10ec:	a5 e3       	ldi	r26, 0x35	; 53
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e5 e3       	ldi	r30, 0x35	; 53
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	48 2f       	mov	r20, r24
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	02 2e       	mov	r0, r18
    1104:	02 c0       	rjmp	.+4      	; 0x110a <DIO_VidSetPinValue+0x1ba>
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	0a 94       	dec	r0
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <DIO_VidSetPinValue+0x1b6>
    110e:	80 95       	com	r24
    1110:	84 23       	and	r24, r20
    1112:	8c 93       	st	X, r24
    1114:	14 c0       	rjmp	.+40     	; 0x113e <DIO_VidSetPinValue+0x1ee>
		case 3:CLR_BIT(PORTD,loc_u8pin);break;
    1116:	a2 e3       	ldi	r26, 0x32	; 50
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e2 e3       	ldi	r30, 0x32	; 50
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	48 2f       	mov	r20, r24
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 2e       	mov	r0, r18
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <DIO_VidSetPinValue+0x1e4>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	0a 94       	dec	r0
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <DIO_VidSetPinValue+0x1e0>
    1138:	80 95       	com	r24
    113a:	84 23       	and	r24, r20
    113c:	8c 93       	st	X, r24
	 }
	}
}
    113e:	27 96       	adiw	r28, 0x07	; 7
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	cf 91       	pop	r28
    114c:	df 91       	pop	r29
    114e:	08 95       	ret

00001150 <DIO_VidSetPortDirection>:
void DIO_VidSetPortDirection(u8 loc_u8port,u8 loc_u8value){
    1150:	df 93       	push	r29
    1152:	cf 93       	push	r28
    1154:	00 d0       	rcall	.+0      	; 0x1156 <DIO_VidSetPortDirection+0x6>
    1156:	00 d0       	rcall	.+0      	; 0x1158 <DIO_VidSetPortDirection+0x8>
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	89 83       	std	Y+1, r24	; 0x01
    115e:	6a 83       	std	Y+2, r22	; 0x02
	

			switch(loc_u8port){
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	3c 83       	std	Y+4, r19	; 0x04
    1168:	2b 83       	std	Y+3, r18	; 0x03
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	9c 81       	ldd	r25, Y+4	; 0x04
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	91 05       	cpc	r25, r1
    1172:	d1 f0       	breq	.+52     	; 0x11a8 <DIO_VidSetPortDirection+0x58>
    1174:	2b 81       	ldd	r18, Y+3	; 0x03
    1176:	3c 81       	ldd	r19, Y+4	; 0x04
    1178:	22 30       	cpi	r18, 0x02	; 2
    117a:	31 05       	cpc	r19, r1
    117c:	2c f4       	brge	.+10     	; 0x1188 <DIO_VidSetPortDirection+0x38>
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	9c 81       	ldd	r25, Y+4	; 0x04
    1182:	00 97       	sbiw	r24, 0x00	; 0
    1184:	61 f0       	breq	.+24     	; 0x119e <DIO_VidSetPortDirection+0x4e>
    1186:	1e c0       	rjmp	.+60     	; 0x11c4 <DIO_VidSetPortDirection+0x74>
    1188:	2b 81       	ldd	r18, Y+3	; 0x03
    118a:	3c 81       	ldd	r19, Y+4	; 0x04
    118c:	22 30       	cpi	r18, 0x02	; 2
    118e:	31 05       	cpc	r19, r1
    1190:	81 f0       	breq	.+32     	; 0x11b2 <DIO_VidSetPortDirection+0x62>
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	9c 81       	ldd	r25, Y+4	; 0x04
    1196:	83 30       	cpi	r24, 0x03	; 3
    1198:	91 05       	cpc	r25, r1
    119a:	81 f0       	breq	.+32     	; 0x11bc <DIO_VidSetPortDirection+0x6c>
    119c:	13 c0       	rjmp	.+38     	; 0x11c4 <DIO_VidSetPortDirection+0x74>

			case 0:DDRA=loc_u8value;break;
    119e:	ea e3       	ldi	r30, 0x3A	; 58
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	80 83       	st	Z, r24
    11a6:	0e c0       	rjmp	.+28     	; 0x11c4 <DIO_VidSetPortDirection+0x74>
			case 1:DDRB=loc_u8value;break;
    11a8:	e7 e3       	ldi	r30, 0x37	; 55
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	80 83       	st	Z, r24
    11b0:	09 c0       	rjmp	.+18     	; 0x11c4 <DIO_VidSetPortDirection+0x74>
			case 2:DDRC=loc_u8value;break;
    11b2:	e4 e3       	ldi	r30, 0x34	; 52
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	80 83       	st	Z, r24
    11ba:	04 c0       	rjmp	.+8      	; 0x11c4 <DIO_VidSetPortDirection+0x74>
			case 3:DDRD=loc_u8value;break;
    11bc:	e1 e3       	ldi	r30, 0x31	; 49
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	80 83       	st	Z, r24

			}
		
}
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <DIO_VidSetPortValue>:
void DIO_VidSetPortValue(u8 loc_u8port,u8 loc_u8value){
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <DIO_VidSetPortValue+0x6>
    11d8:	00 d0       	rcall	.+0      	; 0x11da <DIO_VidSetPortValue+0x8>
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	89 83       	std	Y+1, r24	; 0x01
    11e0:	6a 83       	std	Y+2, r22	; 0x02
	
			switch(loc_u8port){
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	3c 83       	std	Y+4, r19	; 0x04
    11ea:	2b 83       	std	Y+3, r18	; 0x03
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	9c 81       	ldd	r25, Y+4	; 0x04
    11f0:	81 30       	cpi	r24, 0x01	; 1
    11f2:	91 05       	cpc	r25, r1
    11f4:	d1 f0       	breq	.+52     	; 0x122a <DIO_VidSetPortValue+0x58>
    11f6:	2b 81       	ldd	r18, Y+3	; 0x03
    11f8:	3c 81       	ldd	r19, Y+4	; 0x04
    11fa:	22 30       	cpi	r18, 0x02	; 2
    11fc:	31 05       	cpc	r19, r1
    11fe:	2c f4       	brge	.+10     	; 0x120a <DIO_VidSetPortValue+0x38>
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	9c 81       	ldd	r25, Y+4	; 0x04
    1204:	00 97       	sbiw	r24, 0x00	; 0
    1206:	61 f0       	breq	.+24     	; 0x1220 <DIO_VidSetPortValue+0x4e>
    1208:	1e c0       	rjmp	.+60     	; 0x1246 <DIO_VidSetPortValue+0x74>
    120a:	2b 81       	ldd	r18, Y+3	; 0x03
    120c:	3c 81       	ldd	r19, Y+4	; 0x04
    120e:	22 30       	cpi	r18, 0x02	; 2
    1210:	31 05       	cpc	r19, r1
    1212:	81 f0       	breq	.+32     	; 0x1234 <DIO_VidSetPortValue+0x62>
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	9c 81       	ldd	r25, Y+4	; 0x04
    1218:	83 30       	cpi	r24, 0x03	; 3
    121a:	91 05       	cpc	r25, r1
    121c:	81 f0       	breq	.+32     	; 0x123e <DIO_VidSetPortValue+0x6c>
    121e:	13 c0       	rjmp	.+38     	; 0x1246 <DIO_VidSetPortValue+0x74>

			case 0:PORTA=loc_u8value;break;
    1220:	eb e3       	ldi	r30, 0x3B	; 59
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	80 83       	st	Z, r24
    1228:	0e c0       	rjmp	.+28     	; 0x1246 <DIO_VidSetPortValue+0x74>
			case 1:PORTB=loc_u8value;break;
    122a:	e8 e3       	ldi	r30, 0x38	; 56
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	80 83       	st	Z, r24
    1232:	09 c0       	rjmp	.+18     	; 0x1246 <DIO_VidSetPortValue+0x74>
			case 2:PORTC=loc_u8value;break;
    1234:	e5 e3       	ldi	r30, 0x35	; 53
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	80 83       	st	Z, r24
    123c:	04 c0       	rjmp	.+8      	; 0x1246 <DIO_VidSetPortValue+0x74>
			case 3:PORTD=loc_u8value;break;
    123e:	e2 e3       	ldi	r30, 0x32	; 50
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	80 83       	st	Z, r24

			}
	
}
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	cf 91       	pop	r28
    1250:	df 91       	pop	r29
    1252:	08 95       	ret

00001254 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 loc_u8port,u8 loc_u8pin){
    1254:	df 93       	push	r29
    1256:	cf 93       	push	r28
    1258:	00 d0       	rcall	.+0      	; 0x125a <DIO_u8GetPinValue+0x6>
    125a:	00 d0       	rcall	.+0      	; 0x125c <DIO_u8GetPinValue+0x8>
    125c:	0f 92       	push	r0
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	8a 83       	std	Y+2, r24	; 0x02
    1264:	6b 83       	std	Y+3, r22	; 0x03
	u8 VALUE;
	switch(loc_u8port){
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	3d 83       	std	Y+5, r19	; 0x05
    126e:	2c 83       	std	Y+4, r18	; 0x04
    1270:	4c 81       	ldd	r20, Y+4	; 0x04
    1272:	5d 81       	ldd	r21, Y+5	; 0x05
    1274:	41 30       	cpi	r20, 0x01	; 1
    1276:	51 05       	cpc	r21, r1
    1278:	41 f1       	breq	.+80     	; 0x12ca <DIO_u8GetPinValue+0x76>
    127a:	8c 81       	ldd	r24, Y+4	; 0x04
    127c:	9d 81       	ldd	r25, Y+5	; 0x05
    127e:	82 30       	cpi	r24, 0x02	; 2
    1280:	91 05       	cpc	r25, r1
    1282:	34 f4       	brge	.+12     	; 0x1290 <DIO_u8GetPinValue+0x3c>
    1284:	2c 81       	ldd	r18, Y+4	; 0x04
    1286:	3d 81       	ldd	r19, Y+5	; 0x05
    1288:	21 15       	cp	r18, r1
    128a:	31 05       	cpc	r19, r1
    128c:	61 f0       	breq	.+24     	; 0x12a6 <DIO_u8GetPinValue+0x52>
    128e:	52 c0       	rjmp	.+164    	; 0x1334 <DIO_u8GetPinValue+0xe0>
    1290:	4c 81       	ldd	r20, Y+4	; 0x04
    1292:	5d 81       	ldd	r21, Y+5	; 0x05
    1294:	42 30       	cpi	r20, 0x02	; 2
    1296:	51 05       	cpc	r21, r1
    1298:	51 f1       	breq	.+84     	; 0x12ee <DIO_u8GetPinValue+0x9a>
    129a:	8c 81       	ldd	r24, Y+4	; 0x04
    129c:	9d 81       	ldd	r25, Y+5	; 0x05
    129e:	83 30       	cpi	r24, 0x03	; 3
    12a0:	91 05       	cpc	r25, r1
    12a2:	b9 f1       	breq	.+110    	; 0x1312 <DIO_u8GetPinValue+0xbe>
    12a4:	47 c0       	rjmp	.+142    	; 0x1334 <DIO_u8GetPinValue+0xe0>
		case 0:VALUE=GET_BIT(PINA,loc_u8pin); break;
    12a6:	e9 e3       	ldi	r30, 0x39	; 57
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	88 2f       	mov	r24, r24
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	a9 01       	movw	r20, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <DIO_u8GetPinValue+0x6a>
    12ba:	55 95       	asr	r21
    12bc:	47 95       	ror	r20
    12be:	8a 95       	dec	r24
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <DIO_u8GetPinValue+0x66>
    12c2:	ca 01       	movw	r24, r20
    12c4:	81 70       	andi	r24, 0x01	; 1
    12c6:	89 83       	std	Y+1, r24	; 0x01
    12c8:	35 c0       	rjmp	.+106    	; 0x1334 <DIO_u8GetPinValue+0xe0>
		case 1:VALUE=GET_BIT(PINB,loc_u8pin); break;
    12ca:	e6 e3       	ldi	r30, 0x36	; 54
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	88 2f       	mov	r24, r24
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	a9 01       	movw	r20, r18
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <DIO_u8GetPinValue+0x8e>
    12de:	55 95       	asr	r21
    12e0:	47 95       	ror	r20
    12e2:	8a 95       	dec	r24
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <DIO_u8GetPinValue+0x8a>
    12e6:	ca 01       	movw	r24, r20
    12e8:	81 70       	andi	r24, 0x01	; 1
    12ea:	89 83       	std	Y+1, r24	; 0x01
    12ec:	23 c0       	rjmp	.+70     	; 0x1334 <DIO_u8GetPinValue+0xe0>
		case 2:VALUE=GET_BIT(PINC,loc_u8pin); break;
    12ee:	e3 e3       	ldi	r30, 0x33	; 51
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	88 2f       	mov	r24, r24
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	a9 01       	movw	r20, r18
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <DIO_u8GetPinValue+0xb2>
    1302:	55 95       	asr	r21
    1304:	47 95       	ror	r20
    1306:	8a 95       	dec	r24
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <DIO_u8GetPinValue+0xae>
    130a:	ca 01       	movw	r24, r20
    130c:	81 70       	andi	r24, 0x01	; 1
    130e:	89 83       	std	Y+1, r24	; 0x01
    1310:	11 c0       	rjmp	.+34     	; 0x1334 <DIO_u8GetPinValue+0xe0>
		case 3:VALUE=GET_BIT(PIND,loc_u8pin); break;
    1312:	e0 e3       	ldi	r30, 0x30	; 48
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	88 2f       	mov	r24, r24
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	a9 01       	movw	r20, r18
    1324:	02 c0       	rjmp	.+4      	; 0x132a <DIO_u8GetPinValue+0xd6>
    1326:	55 95       	asr	r21
    1328:	47 95       	ror	r20
    132a:	8a 95       	dec	r24
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <DIO_u8GetPinValue+0xd2>
    132e:	ca 01       	movw	r24, r20
    1330:	81 70       	andi	r24, 0x01	; 1
    1332:	89 83       	std	Y+1, r24	; 0x01
	 }
	 return VALUE;
    1334:	89 81       	ldd	r24, Y+1	; 0x01
}
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <DIO_VidTogBit>:

void DIO_VidTogBit(u8 loc_u8port,u8 LOC_u8BitNum){
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	00 d0       	rcall	.+0      	; 0x134c <DIO_VidTogBit+0x6>
    134c:	00 d0       	rcall	.+0      	; 0x134e <DIO_VidTogBit+0x8>
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	89 83       	std	Y+1, r24	; 0x01
    1354:	6a 83       	std	Y+2, r22	; 0x02
	switch(loc_u8port){
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	3c 83       	std	Y+4, r19	; 0x04
    135e:	2b 83       	std	Y+3, r18	; 0x03
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	9c 81       	ldd	r25, Y+4	; 0x04
    1364:	81 30       	cpi	r24, 0x01	; 1
    1366:	91 05       	cpc	r25, r1
    1368:	49 f1       	breq	.+82     	; 0x13bc <DIO_VidTogBit+0x76>
    136a:	2b 81       	ldd	r18, Y+3	; 0x03
    136c:	3c 81       	ldd	r19, Y+4	; 0x04
    136e:	22 30       	cpi	r18, 0x02	; 2
    1370:	31 05       	cpc	r19, r1
    1372:	2c f4       	brge	.+10     	; 0x137e <DIO_VidTogBit+0x38>
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	9c 81       	ldd	r25, Y+4	; 0x04
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	61 f0       	breq	.+24     	; 0x1394 <DIO_VidTogBit+0x4e>
    137c:	5a c0       	rjmp	.+180    	; 0x1432 <DIO_VidTogBit+0xec>
    137e:	2b 81       	ldd	r18, Y+3	; 0x03
    1380:	3c 81       	ldd	r19, Y+4	; 0x04
    1382:	22 30       	cpi	r18, 0x02	; 2
    1384:	31 05       	cpc	r19, r1
    1386:	71 f1       	breq	.+92     	; 0x13e4 <DIO_VidTogBit+0x9e>
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	9c 81       	ldd	r25, Y+4	; 0x04
    138c:	83 30       	cpi	r24, 0x03	; 3
    138e:	91 05       	cpc	r25, r1
    1390:	e9 f1       	breq	.+122    	; 0x140c <DIO_VidTogBit+0xc6>
    1392:	4f c0       	rjmp	.+158    	; 0x1432 <DIO_VidTogBit+0xec>
		case 0: TOG_BIT(PORTA,LOC_u8BitNum); break;
    1394:	ab e3       	ldi	r26, 0x3B	; 59
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	eb e3       	ldi	r30, 0x3B	; 59
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	48 2f       	mov	r20, r24
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	02 2e       	mov	r0, r18
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <DIO_VidTogBit+0x6c>
    13ae:	88 0f       	add	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	0a 94       	dec	r0
    13b4:	e2 f7       	brpl	.-8      	; 0x13ae <DIO_VidTogBit+0x68>
    13b6:	84 27       	eor	r24, r20
    13b8:	8c 93       	st	X, r24
    13ba:	3b c0       	rjmp	.+118    	; 0x1432 <DIO_VidTogBit+0xec>
		case 1: TOG_BIT(PORTB,LOC_u8BitNum); break;
    13bc:	a8 e3       	ldi	r26, 0x38	; 56
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e8 e3       	ldi	r30, 0x38	; 56
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	48 2f       	mov	r20, r24
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	02 2e       	mov	r0, r18
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <DIO_VidTogBit+0x94>
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	0a 94       	dec	r0
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <DIO_VidTogBit+0x90>
    13de:	84 27       	eor	r24, r20
    13e0:	8c 93       	st	X, r24
    13e2:	27 c0       	rjmp	.+78     	; 0x1432 <DIO_VidTogBit+0xec>
		case 2: TOG_BIT(PORTC,LOC_u8BitNum); break;
    13e4:	a5 e3       	ldi	r26, 0x35	; 53
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e5 e3       	ldi	r30, 0x35	; 53
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	48 2f       	mov	r20, r24
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	02 2e       	mov	r0, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <DIO_VidTogBit+0xbc>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	0a 94       	dec	r0
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <DIO_VidTogBit+0xb8>
    1406:	84 27       	eor	r24, r20
    1408:	8c 93       	st	X, r24
    140a:	13 c0       	rjmp	.+38     	; 0x1432 <DIO_VidTogBit+0xec>
		case 3: TOG_BIT(PORTD,LOC_u8BitNum); break;
    140c:	a2 e3       	ldi	r26, 0x32	; 50
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e2 e3       	ldi	r30, 0x32	; 50
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <DIO_VidTogBit+0xe4>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <DIO_VidTogBit+0xe0>
    142e:	84 27       	eor	r24, r20
    1430:	8c 93       	st	X, r24
	}	
}
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	08 95       	ret

00001440 <GIE_VidEnable>:
#include "GIE_interface.h"




void GIE_VidEnable(void){
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
		
	  SET_BIT(SREG,PIN7);
    1448:	af e5       	ldi	r26, 0x5F	; 95
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	ef e5       	ldi	r30, 0x5F	; 95
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	80 68       	ori	r24, 0x80	; 128
    1454:	8c 93       	st	X, r24
	}
    1456:	cf 91       	pop	r28
    1458:	df 91       	pop	r29
    145a:	08 95       	ret

0000145c <GIE_VidDisable>:
void GIE_VidDisable(void){
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
		CLR_BIT(SREG,PIN7);
    1464:	af e5       	ldi	r26, 0x5F	; 95
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	ef e5       	ldi	r30, 0x5F	; 95
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	8f 77       	andi	r24, 0x7F	; 127
    1470:	8c 93       	st	X, r24
	}
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <User_Pass>:

u8 i=0;
u8 ARRAY[]={'A','H','M','E','D'};
u8 pass[]={'1','2','3'};

CONFIG_ERROR_STATUS User_Pass(void){
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	0f 92       	push	r0
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62

/* This Function is Used To Give the FeedBack About The Username And The PasswordBy Using Enum*/
CONFIG_ERROR_STATUS state=NOK;
    1482:	19 82       	std	Y+1, r1	; 0x01
if(flag==0){
    1484:	80 91 0e 01 	lds	r24, 0x010E
    1488:	88 23       	and	r24, r24
    148a:	21 f5       	brne	.+72     	; 0x14d4 <User_Pass+0x5c>
	 for(i=0;i<5;i++){
    148c:	10 92 0c 01 	sts	0x010C, r1
    1490:	1c c0       	rjmp	.+56     	; 0x14ca <User_Pass+0x52>
			if(USER_NAME_ARRAY[i]== ARRAY[i]){
    1492:	80 91 0c 01 	lds	r24, 0x010C
    1496:	88 2f       	mov	r24, r24
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	fc 01       	movw	r30, r24
    149c:	e5 5e       	subi	r30, 0xE5	; 229
    149e:	fe 4f       	sbci	r31, 0xFE	; 254
    14a0:	20 81       	ld	r18, Z
    14a2:	80 91 0c 01 	lds	r24, 0x010C
    14a6:	88 2f       	mov	r24, r24
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	fc 01       	movw	r30, r24
    14ac:	e1 50       	subi	r30, 0x01	; 1
    14ae:	ff 4f       	sbci	r31, 0xFF	; 255
    14b0:	80 81       	ld	r24, Z
    14b2:	28 17       	cp	r18, r24
    14b4:	41 f4       	brne	.+16     	; 0x14c6 <User_Pass+0x4e>
				 state=OK;
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	89 83       	std	Y+1, r24	; 0x01
CONFIG_ERROR_STATUS User_Pass(void){

/* This Function is Used To Give the FeedBack About The Username And The PasswordBy Using Enum*/
CONFIG_ERROR_STATUS state=NOK;
if(flag==0){
	 for(i=0;i<5;i++){
    14ba:	80 91 0c 01 	lds	r24, 0x010C
    14be:	8f 5f       	subi	r24, 0xFF	; 255
    14c0:	80 93 0c 01 	sts	0x010C, r24
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <User_Pass+0x52>
			if(USER_NAME_ARRAY[i]== ARRAY[i]){
				 state=OK;
			}
			else{
				state=NOK;
    14c6:	19 82       	std	Y+1, r1	; 0x01
    14c8:	2c c0       	rjmp	.+88     	; 0x1522 <User_Pass+0xaa>
CONFIG_ERROR_STATUS User_Pass(void){

/* This Function is Used To Give the FeedBack About The Username And The PasswordBy Using Enum*/
CONFIG_ERROR_STATUS state=NOK;
if(flag==0){
	 for(i=0;i<5;i++){
    14ca:	80 91 0c 01 	lds	r24, 0x010C
    14ce:	85 30       	cpi	r24, 0x05	; 5
    14d0:	00 f3       	brcs	.-64     	; 0x1492 <User_Pass+0x1a>
    14d2:	27 c0       	rjmp	.+78     	; 0x1522 <User_Pass+0xaa>
				state=NOK;
				break;
			}
	  }
}
else if(flag==1){
    14d4:	80 91 0e 01 	lds	r24, 0x010E
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	19 f5       	brne	.+70     	; 0x1522 <User_Pass+0xaa>
	 for(i=0;i<3;i++){
    14dc:	10 92 0c 01 	sts	0x010C, r1
    14e0:	1c c0       	rjmp	.+56     	; 0x151a <User_Pass+0xa2>
			if(PASSWORD_array[i]== pass[i]){
    14e2:	80 91 0c 01 	lds	r24, 0x010C
    14e6:	88 2f       	mov	r24, r24
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	fc 01       	movw	r30, r24
    14ec:	e0 5e       	subi	r30, 0xE0	; 224
    14ee:	fe 4f       	sbci	r31, 0xFE	; 254
    14f0:	20 81       	ld	r18, Z
    14f2:	80 91 0c 01 	lds	r24, 0x010C
    14f6:	88 2f       	mov	r24, r24
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	fc 01       	movw	r30, r24
    14fc:	ec 5f       	subi	r30, 0xFC	; 252
    14fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1500:	80 81       	ld	r24, Z
    1502:	28 17       	cp	r18, r24
    1504:	41 f4       	brne	.+16     	; 0x1516 <User_Pass+0x9e>
				 state=OK;
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
	  }
}
else if(flag==1){
	 for(i=0;i<3;i++){
    150a:	80 91 0c 01 	lds	r24, 0x010C
    150e:	8f 5f       	subi	r24, 0xFF	; 255
    1510:	80 93 0c 01 	sts	0x010C, r24
    1514:	02 c0       	rjmp	.+4      	; 0x151a <User_Pass+0xa2>
			if(PASSWORD_array[i]== pass[i]){
				 state=OK;
			}
			else{
				state=NOK;
    1516:	19 82       	std	Y+1, r1	; 0x01
    1518:	04 c0       	rjmp	.+8      	; 0x1522 <User_Pass+0xaa>
				break;
			}
	  }
}
else if(flag==1){
	 for(i=0;i<3;i++){
    151a:	80 91 0c 01 	lds	r24, 0x010C
    151e:	83 30       	cpi	r24, 0x03	; 3
    1520:	00 f3       	brcs	.-64     	; 0x14e2 <User_Pass+0x6a>
				state=NOK;
				break;
			}
	  }
}
 return state;
    1522:	89 81       	ldd	r24, Y+1	; 0x01

}
    1524:	0f 90       	pop	r0
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	08 95       	ret

0000152c <LCD_VidUserNameCheck>:

void LCD_VidUserNameCheck(void){
    152c:	df 93       	push	r29
    152e:	cf 93       	push	r28
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
    1534:	2f 97       	sbiw	r28, 0x0f	; 15
    1536:	0f b6       	in	r0, 0x3f	; 63
    1538:	f8 94       	cli
    153a:	de bf       	out	0x3e, r29	; 62
    153c:	0f be       	out	0x3f, r0	; 63
    153e:	cd bf       	out	0x3d, r28	; 61
	CONFIG_ERROR_STATUS state=NOK;
    1540:	1f 86       	std	Y+15, r1	; 0x0f
 state=User_Pass();
    1542:	0e 94 3c 0a 	call	0x1478	; 0x1478 <User_Pass>
    1546:	8f 87       	std	Y+15, r24	; 0x0f
 /*
  * SO If The FeedBack Is OK Then Change The Flag To 1 Inorder To Check The Password
  * Else Jump To Start Function
  * */
 switch(state){
    1548:	8f 85       	ldd	r24, Y+15	; 0x0f
    154a:	88 2f       	mov	r24, r24
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	81 30       	cpi	r24, 0x01	; 1
    1550:	91 05       	cpc	r25, r1
    1552:	79 f4       	brne	.+30     	; 0x1572 <LCD_VidUserNameCheck+0x46>
 case OK:
		LCD_VidWriteCommand(CLR);
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCD_VidWriteCommand>
		LCD_VidWriteString("ENTER PASSWORD:");
    155a:	80 e6       	ldi	r24, 0x60	; 96
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_VidWriteString>
		LCD_VidSetDdram(2,1);
    1562:	82 e0       	ldi	r24, 0x02	; 2
    1564:	61 e0       	ldi	r22, 0x01	; 1
    1566:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VidSetDdram>
	    flag=1; break;
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	80 93 0e 01 	sts	0x010E, r24
    1570:	7b c0       	rjmp	.+246    	; 0x1668 <LCD_VidUserNameCheck+0x13c>

 default:
	    LCD_VidWriteCommand(CLR);
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCD_VidWriteCommand>
	    LCD_VidWriteString("WRONG USER NAME ");
    1578:	80 e7       	ldi	r24, 0x70	; 112
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_VidWriteString>
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	aa e7       	ldi	r26, 0x7A	; 122
    1586:	b4 e4       	ldi	r27, 0x44	; 68
    1588:	8b 87       	std	Y+11, r24	; 0x0b
    158a:	9c 87       	std	Y+12, r25	; 0x0c
    158c:	ad 87       	std	Y+13, r26	; 0x0d
    158e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1590:	6b 85       	ldd	r22, Y+11	; 0x0b
    1592:	7c 85       	ldd	r23, Y+12	; 0x0c
    1594:	8d 85       	ldd	r24, Y+13	; 0x0d
    1596:	9e 85       	ldd	r25, Y+14	; 0x0e
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	4a ef       	ldi	r20, 0xFA	; 250
    159e:	54 e4       	ldi	r21, 0x44	; 68
    15a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	8f 83       	std	Y+7, r24	; 0x07
    15aa:	98 87       	std	Y+8, r25	; 0x08
    15ac:	a9 87       	std	Y+9, r26	; 0x09
    15ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15b0:	6f 81       	ldd	r22, Y+7	; 0x07
    15b2:	78 85       	ldd	r23, Y+8	; 0x08
    15b4:	89 85       	ldd	r24, Y+9	; 0x09
    15b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	40 e8       	ldi	r20, 0x80	; 128
    15be:	5f e3       	ldi	r21, 0x3F	; 63
    15c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15c4:	88 23       	and	r24, r24
    15c6:	2c f4       	brge	.+10     	; 0x15d2 <LCD_VidUserNameCheck+0xa6>
		__ticks = 1;
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	9e 83       	std	Y+6, r25	; 0x06
    15ce:	8d 83       	std	Y+5, r24	; 0x05
    15d0:	3f c0       	rjmp	.+126    	; 0x1650 <LCD_VidUserNameCheck+0x124>
	else if (__tmp > 65535)
    15d2:	6f 81       	ldd	r22, Y+7	; 0x07
    15d4:	78 85       	ldd	r23, Y+8	; 0x08
    15d6:	89 85       	ldd	r24, Y+9	; 0x09
    15d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	3f ef       	ldi	r19, 0xFF	; 255
    15de:	4f e7       	ldi	r20, 0x7F	; 127
    15e0:	57 e4       	ldi	r21, 0x47	; 71
    15e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15e6:	18 16       	cp	r1, r24
    15e8:	4c f5       	brge	.+82     	; 0x163c <LCD_VidUserNameCheck+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    15f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	40 e2       	ldi	r20, 0x20	; 32
    15f8:	51 e4       	ldi	r21, 0x41	; 65
    15fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	bc 01       	movw	r22, r24
    1604:	cd 01       	movw	r24, r26
    1606:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	9e 83       	std	Y+6, r25	; 0x06
    1610:	8d 83       	std	Y+5, r24	; 0x05
    1612:	0f c0       	rjmp	.+30     	; 0x1632 <LCD_VidUserNameCheck+0x106>
    1614:	88 ec       	ldi	r24, 0xC8	; 200
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	9c 83       	std	Y+4, r25	; 0x04
    161a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	9c 81       	ldd	r25, Y+4	; 0x04
    1620:	01 97       	sbiw	r24, 0x01	; 1
    1622:	f1 f7       	brne	.-4      	; 0x1620 <LCD_VidUserNameCheck+0xf4>
    1624:	9c 83       	std	Y+4, r25	; 0x04
    1626:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1628:	8d 81       	ldd	r24, Y+5	; 0x05
    162a:	9e 81       	ldd	r25, Y+6	; 0x06
    162c:	01 97       	sbiw	r24, 0x01	; 1
    162e:	9e 83       	std	Y+6, r25	; 0x06
    1630:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1632:	8d 81       	ldd	r24, Y+5	; 0x05
    1634:	9e 81       	ldd	r25, Y+6	; 0x06
    1636:	00 97       	sbiw	r24, 0x00	; 0
    1638:	69 f7       	brne	.-38     	; 0x1614 <LCD_VidUserNameCheck+0xe8>
    163a:	14 c0       	rjmp	.+40     	; 0x1664 <LCD_VidUserNameCheck+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    163c:	6f 81       	ldd	r22, Y+7	; 0x07
    163e:	78 85       	ldd	r23, Y+8	; 0x08
    1640:	89 85       	ldd	r24, Y+9	; 0x09
    1642:	9a 85       	ldd	r25, Y+10	; 0x0a
    1644:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1648:	dc 01       	movw	r26, r24
    164a:	cb 01       	movw	r24, r22
    164c:	9e 83       	std	Y+6, r25	; 0x06
    164e:	8d 83       	std	Y+5, r24	; 0x05
    1650:	8d 81       	ldd	r24, Y+5	; 0x05
    1652:	9e 81       	ldd	r25, Y+6	; 0x06
    1654:	9a 83       	std	Y+2, r25	; 0x02
    1656:	89 83       	std	Y+1, r24	; 0x01
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	9a 81       	ldd	r25, Y+2	; 0x02
    165c:	01 97       	sbiw	r24, 0x01	; 1
    165e:	f1 f7       	brne	.-4      	; 0x165c <LCD_VidUserNameCheck+0x130>
    1660:	9a 83       	std	Y+2, r25	; 0x02
    1662:	89 83       	std	Y+1, r24	; 0x01
	    _delay_ms(1000);
	    START();
    1664:	0e 94 12 16 	call	0x2c24	; 0x2c24 <START>
	    break;
   }

}
    1668:	2f 96       	adiw	r28, 0x0f	; 15
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	f8 94       	cli
    166e:	de bf       	out	0x3e, r29	; 62
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	cd bf       	out	0x3d, r28	; 61
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	08 95       	ret

0000167a <LCD_VidPasswordCheck>:

void LCD_VidPasswordCheck(void){
    167a:	df 93       	push	r29
    167c:	cf 93       	push	r28
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	6d 97       	sbiw	r28, 0x1d	; 29
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	cd bf       	out	0x3d, r28	; 61
static u8 counter=0;
counter++;
    168e:	80 91 0d 01 	lds	r24, 0x010D
    1692:	8f 5f       	subi	r24, 0xFF	; 255
    1694:	80 93 0d 01 	sts	0x010D, r24
CONFIG_ERROR_STATUS state=0;
    1698:	1d 8e       	std	Y+29, r1	; 0x1d
 state=User_Pass();
    169a:	0e 94 3c 0a 	call	0x1478	; 0x1478 <User_Pass>
    169e:	8d 8f       	std	Y+29, r24	; 0x1d
   * SO If The FeedBack Is OK Jump To Home_Page Function
   * Then Change The Flag To 2 Inorder To Be Able To choose Between The Functions
   * Else Check If The Counter Is Less Than 2 If Right Type Try again
   * Else If The Counter Is More Than 2 Type No More Tries Then Go Back To Start
   * */
 switch(state){
    16a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16a2:	88 2f       	mov	r24, r24
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	81 30       	cpi	r24, 0x01	; 1
    16a8:	91 05       	cpc	r25, r1
    16aa:	41 f4       	brne	.+16     	; 0x16bc <LCD_VidPasswordCheck+0x42>

 case OK:
         HOME_PAGE();
    16ac:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <HOME_PAGE>
         flag=2;
    16b0:	82 e0       	ldi	r24, 0x02	; 2
    16b2:	80 93 0e 01 	sts	0x010E, r24
         counter=0;
    16b6:	10 92 0d 01 	sts	0x010D, r1
    16ba:	09 c1       	rjmp	.+530    	; 0x18ce <LCD_VidPasswordCheck+0x254>
	 break;

default:
	 if(counter>2){
    16bc:	80 91 0d 01 	lds	r24, 0x010D
    16c0:	83 30       	cpi	r24, 0x03	; 3
    16c2:	08 f4       	brcc	.+2      	; 0x16c6 <LCD_VidPasswordCheck+0x4c>
    16c4:	7e c0       	rjmp	.+252    	; 0x17c2 <LCD_VidPasswordCheck+0x148>
		LCD_VidWriteCommand(CLR);
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCD_VidWriteCommand>
		LCD_VidWriteString("NO MORE TRIES");
    16cc:	81 e8       	ldi	r24, 0x81	; 129
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_VidWriteString>
		counter=0;
    16d4:	10 92 0d 01 	sts	0x010D, r1
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	aa e7       	ldi	r26, 0x7A	; 122
    16de:	b4 e4       	ldi	r27, 0x44	; 68
    16e0:	89 8f       	std	Y+25, r24	; 0x19
    16e2:	9a 8f       	std	Y+26, r25	; 0x1a
    16e4:	ab 8f       	std	Y+27, r26	; 0x1b
    16e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e8:	69 8d       	ldd	r22, Y+25	; 0x19
    16ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	4a ef       	ldi	r20, 0xFA	; 250
    16f6:	54 e4       	ldi	r21, 0x44	; 68
    16f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	8d 8b       	std	Y+21, r24	; 0x15
    1702:	9e 8b       	std	Y+22, r25	; 0x16
    1704:	af 8b       	std	Y+23, r26	; 0x17
    1706:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1708:	6d 89       	ldd	r22, Y+21	; 0x15
    170a:	7e 89       	ldd	r23, Y+22	; 0x16
    170c:	8f 89       	ldd	r24, Y+23	; 0x17
    170e:	98 8d       	ldd	r25, Y+24	; 0x18
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	40 e8       	ldi	r20, 0x80	; 128
    1716:	5f e3       	ldi	r21, 0x3F	; 63
    1718:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    171c:	88 23       	and	r24, r24
    171e:	2c f4       	brge	.+10     	; 0x172a <LCD_VidPasswordCheck+0xb0>
		__ticks = 1;
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	9c 8b       	std	Y+20, r25	; 0x14
    1726:	8b 8b       	std	Y+19, r24	; 0x13
    1728:	3f c0       	rjmp	.+126    	; 0x17a8 <LCD_VidPasswordCheck+0x12e>
	else if (__tmp > 65535)
    172a:	6d 89       	ldd	r22, Y+21	; 0x15
    172c:	7e 89       	ldd	r23, Y+22	; 0x16
    172e:	8f 89       	ldd	r24, Y+23	; 0x17
    1730:	98 8d       	ldd	r25, Y+24	; 0x18
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	3f ef       	ldi	r19, 0xFF	; 255
    1736:	4f e7       	ldi	r20, 0x7F	; 127
    1738:	57 e4       	ldi	r21, 0x47	; 71
    173a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    173e:	18 16       	cp	r1, r24
    1740:	4c f5       	brge	.+82     	; 0x1794 <LCD_VidPasswordCheck+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1742:	69 8d       	ldd	r22, Y+25	; 0x19
    1744:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1746:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1748:	9c 8d       	ldd	r25, Y+28	; 0x1c
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	40 e2       	ldi	r20, 0x20	; 32
    1750:	51 e4       	ldi	r21, 0x41	; 65
    1752:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	bc 01       	movw	r22, r24
    175c:	cd 01       	movw	r24, r26
    175e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	9c 8b       	std	Y+20, r25	; 0x14
    1768:	8b 8b       	std	Y+19, r24	; 0x13
    176a:	0f c0       	rjmp	.+30     	; 0x178a <LCD_VidPasswordCheck+0x110>
    176c:	88 ec       	ldi	r24, 0xC8	; 200
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	9a 8b       	std	Y+18, r25	; 0x12
    1772:	89 8b       	std	Y+17, r24	; 0x11
    1774:	89 89       	ldd	r24, Y+17	; 0x11
    1776:	9a 89       	ldd	r25, Y+18	; 0x12
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	f1 f7       	brne	.-4      	; 0x1778 <LCD_VidPasswordCheck+0xfe>
    177c:	9a 8b       	std	Y+18, r25	; 0x12
    177e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1780:	8b 89       	ldd	r24, Y+19	; 0x13
    1782:	9c 89       	ldd	r25, Y+20	; 0x14
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	9c 8b       	std	Y+20, r25	; 0x14
    1788:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178a:	8b 89       	ldd	r24, Y+19	; 0x13
    178c:	9c 89       	ldd	r25, Y+20	; 0x14
    178e:	00 97       	sbiw	r24, 0x00	; 0
    1790:	69 f7       	brne	.-38     	; 0x176c <LCD_VidPasswordCheck+0xf2>
    1792:	14 c0       	rjmp	.+40     	; 0x17bc <LCD_VidPasswordCheck+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1794:	6d 89       	ldd	r22, Y+21	; 0x15
    1796:	7e 89       	ldd	r23, Y+22	; 0x16
    1798:	8f 89       	ldd	r24, Y+23	; 0x17
    179a:	98 8d       	ldd	r25, Y+24	; 0x18
    179c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	9c 8b       	std	Y+20, r25	; 0x14
    17a6:	8b 8b       	std	Y+19, r24	; 0x13
    17a8:	8b 89       	ldd	r24, Y+19	; 0x13
    17aa:	9c 89       	ldd	r25, Y+20	; 0x14
    17ac:	98 8b       	std	Y+16, r25	; 0x10
    17ae:	8f 87       	std	Y+15, r24	; 0x0f
    17b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    17b2:	98 89       	ldd	r25, Y+16	; 0x10
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	f1 f7       	brne	.-4      	; 0x17b4 <LCD_VidPasswordCheck+0x13a>
    17b8:	98 8b       	std	Y+16, r25	; 0x10
    17ba:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		START();
    17bc:	0e 94 12 16 	call	0x2c24	; 0x2c24 <START>
    17c0:	86 c0       	rjmp	.+268    	; 0x18ce <LCD_VidPasswordCheck+0x254>
	  }
	 else{
	  LCD_VidWriteCommand(CLR);
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCD_VidWriteCommand>
	  LCD_VidWriteString("TRY Again");
    17c8:	8f e8       	ldi	r24, 0x8F	; 143
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_VidWriteString>
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	aa e7       	ldi	r26, 0x7A	; 122
    17d6:	b4 e4       	ldi	r27, 0x44	; 68
    17d8:	8b 87       	std	Y+11, r24	; 0x0b
    17da:	9c 87       	std	Y+12, r25	; 0x0c
    17dc:	ad 87       	std	Y+13, r26	; 0x0d
    17de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	4a ef       	ldi	r20, 0xFA	; 250
    17ee:	54 e4       	ldi	r21, 0x44	; 68
    17f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	8f 83       	std	Y+7, r24	; 0x07
    17fa:	98 87       	std	Y+8, r25	; 0x08
    17fc:	a9 87       	std	Y+9, r26	; 0x09
    17fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1800:	6f 81       	ldd	r22, Y+7	; 0x07
    1802:	78 85       	ldd	r23, Y+8	; 0x08
    1804:	89 85       	ldd	r24, Y+9	; 0x09
    1806:	9a 85       	ldd	r25, Y+10	; 0x0a
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	40 e8       	ldi	r20, 0x80	; 128
    180e:	5f e3       	ldi	r21, 0x3F	; 63
    1810:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1814:	88 23       	and	r24, r24
    1816:	2c f4       	brge	.+10     	; 0x1822 <LCD_VidPasswordCheck+0x1a8>
		__ticks = 1;
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	9e 83       	std	Y+6, r25	; 0x06
    181e:	8d 83       	std	Y+5, r24	; 0x05
    1820:	3f c0       	rjmp	.+126    	; 0x18a0 <LCD_VidPasswordCheck+0x226>
	else if (__tmp > 65535)
    1822:	6f 81       	ldd	r22, Y+7	; 0x07
    1824:	78 85       	ldd	r23, Y+8	; 0x08
    1826:	89 85       	ldd	r24, Y+9	; 0x09
    1828:	9a 85       	ldd	r25, Y+10	; 0x0a
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	3f ef       	ldi	r19, 0xFF	; 255
    182e:	4f e7       	ldi	r20, 0x7F	; 127
    1830:	57 e4       	ldi	r21, 0x47	; 71
    1832:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1836:	18 16       	cp	r1, r24
    1838:	4c f5       	brge	.+82     	; 0x188c <LCD_VidPasswordCheck+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    183a:	6b 85       	ldd	r22, Y+11	; 0x0b
    183c:	7c 85       	ldd	r23, Y+12	; 0x0c
    183e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1840:	9e 85       	ldd	r25, Y+14	; 0x0e
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 e2       	ldi	r20, 0x20	; 32
    1848:	51 e4       	ldi	r21, 0x41	; 65
    184a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	bc 01       	movw	r22, r24
    1854:	cd 01       	movw	r24, r26
    1856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	9e 83       	std	Y+6, r25	; 0x06
    1860:	8d 83       	std	Y+5, r24	; 0x05
    1862:	0f c0       	rjmp	.+30     	; 0x1882 <LCD_VidPasswordCheck+0x208>
    1864:	88 ec       	ldi	r24, 0xC8	; 200
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	9c 83       	std	Y+4, r25	; 0x04
    186a:	8b 83       	std	Y+3, r24	; 0x03
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	9c 81       	ldd	r25, Y+4	; 0x04
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	f1 f7       	brne	.-4      	; 0x1870 <LCD_VidPasswordCheck+0x1f6>
    1874:	9c 83       	std	Y+4, r25	; 0x04
    1876:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1878:	8d 81       	ldd	r24, Y+5	; 0x05
    187a:	9e 81       	ldd	r25, Y+6	; 0x06
    187c:	01 97       	sbiw	r24, 0x01	; 1
    187e:	9e 83       	std	Y+6, r25	; 0x06
    1880:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1882:	8d 81       	ldd	r24, Y+5	; 0x05
    1884:	9e 81       	ldd	r25, Y+6	; 0x06
    1886:	00 97       	sbiw	r24, 0x00	; 0
    1888:	69 f7       	brne	.-38     	; 0x1864 <LCD_VidPasswordCheck+0x1ea>
    188a:	14 c0       	rjmp	.+40     	; 0x18b4 <LCD_VidPasswordCheck+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    188c:	6f 81       	ldd	r22, Y+7	; 0x07
    188e:	78 85       	ldd	r23, Y+8	; 0x08
    1890:	89 85       	ldd	r24, Y+9	; 0x09
    1892:	9a 85       	ldd	r25, Y+10	; 0x0a
    1894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	9e 83       	std	Y+6, r25	; 0x06
    189e:	8d 83       	std	Y+5, r24	; 0x05
    18a0:	8d 81       	ldd	r24, Y+5	; 0x05
    18a2:	9e 81       	ldd	r25, Y+6	; 0x06
    18a4:	9a 83       	std	Y+2, r25	; 0x02
    18a6:	89 83       	std	Y+1, r24	; 0x01
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	9a 81       	ldd	r25, Y+2	; 0x02
    18ac:	01 97       	sbiw	r24, 0x01	; 1
    18ae:	f1 f7       	brne	.-4      	; 0x18ac <LCD_VidPasswordCheck+0x232>
    18b0:	9a 83       	std	Y+2, r25	; 0x02
    18b2:	89 83       	std	Y+1, r24	; 0x01
   	  _delay_ms(1000);
	   LCD_VidWriteCommand(CLR);
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCD_VidWriteCommand>
	   LCD_VidWriteString("ENTER PASSWORD:");
    18ba:	80 e6       	ldi	r24, 0x60	; 96
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_VidWriteString>
	   LCD_VidSetDdram(2,1);
    18c2:	82 e0       	ldi	r24, 0x02	; 2
    18c4:	61 e0       	ldi	r22, 0x01	; 1
    18c6:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VidSetDdram>
	   index_pass=0;
    18ca:	10 92 10 01 	sts	0x0110, r1
	 }
	break;
 }
}
    18ce:	6d 96       	adiw	r28, 0x1d	; 29
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	de bf       	out	0x3e, r29	; 62
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	cd bf       	out	0x3d, r28	; 61
    18da:	cf 91       	pop	r28
    18dc:	df 91       	pop	r29
    18de:	08 95       	ret

000018e0 <HOME_PAGE>:

void HOME_PAGE(void)
{
    18e0:	df 93       	push	r29
    18e2:	cf 93       	push	r28
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62

	LCD_VidWriteCommand(CLR);
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCD_VidWriteCommand>
	LCD_VidWriteString("1-DOOR");
    18ee:	89 e9       	ldi	r24, 0x99	; 153
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_VidWriteString>
	LCD_VidSetDdram(1,11);
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	6b e0       	ldi	r22, 0x0B	; 11
    18fa:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VidSetDdram>
	LCD_VidWriteString("2-TEMP");
    18fe:	80 ea       	ldi	r24, 0xA0	; 160
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_VidWriteString>
	LCD_VidSetDdram(2,1);
    1906:	82 e0       	ldi	r24, 0x02	; 2
    1908:	61 e0       	ldi	r22, 0x01	; 1
    190a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VidSetDdram>
	LCD_VidWriteString("3-LDR");
    190e:	87 ea       	ldi	r24, 0xA7	; 167
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_VidWriteString>
	LCD_VidSetDdram(2,10);
    1916:	82 e0       	ldi	r24, 0x02	; 2
    1918:	6a e0       	ldi	r22, 0x0A	; 10
    191a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VidSetDdram>
	LCD_VidWriteString("4-BACK");
    191e:	8d ea       	ldi	r24, 0xAD	; 173
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_VidWriteString>
}
    1926:	cf 91       	pop	r28
    1928:	df 91       	pop	r29
    192a:	08 95       	ret

0000192c <servo>:

void servo(u8 angle){
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	0f 92       	push	r0
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
    1936:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Check If The Received Data From The ISR IS equal To "C" OR "O" (closed || Opened)
	 * else Go Back to The Home_Page
	 * */

	LCD_VidWriteCommand(CLR);
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCD_VidWriteCommand>
	LCD_VidSetDdram(2,10);
    193e:	82 e0       	ldi	r24, 0x02	; 2
    1940:	6a e0       	ldi	r22, 0x0A	; 10
    1942:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VidSetDdram>
	LCD_VidWriteString("BACK");
    1946:	84 eb       	ldi	r24, 0xB4	; 180
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_VidWriteString>
	LCD_VidSetDdram(1,1);
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	61 e0       	ldi	r22, 0x01	; 1
    1952:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VidSetDdram>
	LCD_VidWriteString("DOOR : ");
    1956:	89 eb       	ldi	r24, 0xB9	; 185
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_VidWriteString>
	if(angle=='C'){
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	83 34       	cpi	r24, 0x43	; 67
    1962:	49 f4       	brne	.+18     	; 0x1976 <servo+0x4a>
	LCD_VidWriteString("CLOSED");
    1964:	81 ec       	ldi	r24, 0xC1	; 193
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_VidWriteString>
	TIMER1_VidSetDutyCycle(40);
    196c:	88 e2       	ldi	r24, 0x28	; 40
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	0e 94 28 14 	call	0x2850	; 0x2850 <TIMER1_VidSetDutyCycle>
    1974:	10 c0       	rjmp	.+32     	; 0x1996 <servo+0x6a>
	}
	else if(angle=='O'){
    1976:	89 81       	ldd	r24, Y+1	; 0x01
    1978:	8f 34       	cpi	r24, 0x4F	; 79
    197a:	49 f4       	brne	.+18     	; 0x198e <servo+0x62>
		LCD_VidWriteString("OPEN");
    197c:	88 ec       	ldi	r24, 0xC8	; 200
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_VidWriteString>
		TIMER1_VidSetDutyCycle(75);
    1984:	8b e4       	ldi	r24, 0x4B	; 75
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	0e 94 28 14 	call	0x2850	; 0x2850 <TIMER1_VidSetDutyCycle>
    198c:	04 c0       	rjmp	.+8      	; 0x1996 <servo+0x6a>
	}
	else{
		HOME_PAGE();
    198e:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <HOME_PAGE>
		axis=0;
    1992:	10 92 11 01 	sts	0x0111, r1
	}
}
    1996:	0f 90       	pop	r0
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	08 95       	ret

0000199e <TEMP>:

void TEMP(u16 voltage){
    199e:	df 93       	push	r29
    19a0:	cf 93       	push	r28
    19a2:	00 d0       	rcall	.+0      	; 0x19a4 <TEMP+0x6>
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
    19a8:	9a 83       	std	Y+2, r25	; 0x02
    19aa:	89 83       	std	Y+1, r24	; 0x01


	LCD_VidSetDdram(2,10);
    19ac:	82 e0       	ldi	r24, 0x02	; 2
    19ae:	6a e0       	ldi	r22, 0x0A	; 10
    19b0:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VidSetDdram>
	LCD_VidWriteString("BACK");
    19b4:	84 eb       	ldi	r24, 0xB4	; 180
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_VidWriteString>
	LCD_VidSetDdram(1,1);
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	61 e0       	ldi	r22, 0x01	; 1
    19c0:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VidSetDdram>
	LCD_VidWriteString("TEMP : ");
    19c4:	8d ec       	ldi	r24, 0xCD	; 205
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_VidWriteString>
	LCD_VidSetDdram(1,9);
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	69 e0       	ldi	r22, 0x09	; 9
    19d0:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VidSetDdram>
	LCD_VidWriteNumber(voltage);
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	9a 81       	ldd	r25, Y+2	; 0x02
    19d8:	cc 01       	movw	r24, r24
    19da:	a0 e0       	ldi	r26, 0x00	; 0
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	bc 01       	movw	r22, r24
    19e0:	cd 01       	movw	r24, r26
    19e2:	0e 94 69 12 	call	0x24d2	; 0x24d2 <LCD_VidWriteNumber>
	LCD_VidWriteData('C');
    19e6:	83 e4       	ldi	r24, 0x43	; 67
    19e8:	0e 94 25 12 	call	0x244a	; 0x244a <LCD_VidWriteData>
	 * Else Check The Value If More Than 38 C Turn on The Buzzer Else Turn Off
	 *
	 * */


switch(voltage){
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
    19ee:	9a 81       	ldd	r25, Y+2	; 0x02
    19f0:	82 34       	cpi	r24, 0x42	; 66
    19f2:	91 05       	cpc	r25, r1
    19f4:	89 f4       	brne	.+34     	; 0x1a18 <TEMP+0x7a>
	case'B':
		CLR_BIT(ADCSRA,PIN7); //DISABLE ADC//
    19f6:	a6 e2       	ldi	r26, 0x26	; 38
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e6 e2       	ldi	r30, 0x26	; 38
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	8f 77       	andi	r24, 0x7F	; 127
    1a02:	8c 93       	st	X, r24
		axis=0;
    1a04:	10 92 11 01 	sts	0x0111, r1
		DIO_VidSetPinValue(PORTA,PIN7,LOW);
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	67 e0       	ldi	r22, 0x07	; 7
    1a0c:	40 e0       	ldi	r20, 0x00	; 0
    1a0e:	0e 94 a8 07 	call	0xf50	; 0xf50 <DIO_VidSetPinValue>
		HOME_PAGE();
    1a12:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <HOME_PAGE>
    1a16:	10 c0       	rjmp	.+32     	; 0x1a38 <TEMP+0x9a>
		break;

	default:
		   if(voltage>38){
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1c:	87 32       	cpi	r24, 0x27	; 39
    1a1e:	91 05       	cpc	r25, r1
    1a20:	30 f0       	brcs	.+12     	; 0x1a2e <TEMP+0x90>
				 DIO_VidSetPinValue(PORTA,PIN7,HIGH);
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	67 e0       	ldi	r22, 0x07	; 7
    1a26:	41 e0       	ldi	r20, 0x01	; 1
    1a28:	0e 94 a8 07 	call	0xf50	; 0xf50 <DIO_VidSetPinValue>
    1a2c:	05 c0       	rjmp	.+10     	; 0x1a38 <TEMP+0x9a>
			}
			else{
				 DIO_VidSetPinValue(PORTA,PIN7,LOW);
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	67 e0       	ldi	r22, 0x07	; 7
    1a32:	40 e0       	ldi	r20, 0x00	; 0
    1a34:	0e 94 a8 07 	call	0xf50	; 0xf50 <DIO_VidSetPinValue>
			}
		break;

	}
}
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	08 95       	ret

00001a42 <LDR>:


void LDR(u16 VALUE){
    1a42:	df 93       	push	r29
    1a44:	cf 93       	push	r28
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <LDR+0x6>
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	9a 83       	std	Y+2, r25	; 0x02
    1a4e:	89 83       	std	Y+1, r24	; 0x01

	LCD_VidSetDdram(2,10);
    1a50:	82 e0       	ldi	r24, 0x02	; 2
    1a52:	6a e0       	ldi	r22, 0x0A	; 10
    1a54:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VidSetDdram>
	LCD_VidWriteString("BACK");
    1a58:	84 eb       	ldi	r24, 0xB4	; 180
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_VidWriteString>
	LCD_VidSetDdram(1,1);
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	61 e0       	ldi	r22, 0x01	; 1
    1a64:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VidSetDdram>
	LCD_VidWriteString("LDR : ");
    1a68:	85 ed       	ldi	r24, 0xD5	; 213
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_VidWriteString>
		 * Else Check The Value If More Than 2000 mA Turn Off The LED Else Turn On
		 *
		 * */


  if(VALUE=='B'){
    1a70:	89 81       	ldd	r24, Y+1	; 0x01
    1a72:	9a 81       	ldd	r25, Y+2	; 0x02
    1a74:	82 34       	cpi	r24, 0x42	; 66
    1a76:	91 05       	cpc	r25, r1
    1a78:	89 f4       	brne	.+34     	; 0x1a9c <LDR+0x5a>
	    CLR_BIT(ADCSRA,PIN7); //DISABLE ADC//
    1a7a:	a6 e2       	ldi	r26, 0x26	; 38
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e6 e2       	ldi	r30, 0x26	; 38
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	8f 77       	andi	r24, 0x7F	; 127
    1a86:	8c 93       	st	X, r24
		axis=0;
    1a88:	10 92 11 01 	sts	0x0111, r1
		DIO_VidSetPinValue(PORTA,PIN6,LOW);//LED//
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	66 e0       	ldi	r22, 0x06	; 6
    1a90:	40 e0       	ldi	r20, 0x00	; 0
    1a92:	0e 94 a8 07 	call	0xf50	; 0xf50 <DIO_VidSetPinValue>
		HOME_PAGE();
    1a96:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <HOME_PAGE>
    1a9a:	21 c0       	rjmp	.+66     	; 0x1ade <LDR+0x9c>
	}

else if( VALUE>2000){
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa0:	27 e0       	ldi	r18, 0x07	; 7
    1aa2:	81 3d       	cpi	r24, 0xD1	; 209
    1aa4:	92 07       	cpc	r25, r18
    1aa6:	70 f0       	brcs	.+28     	; 0x1ac4 <LDR+0x82>

	     DIO_VidSetPinValue(PORTA,PIN6,LOW);
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	66 e0       	ldi	r22, 0x06	; 6
    1aac:	40 e0       	ldi	r20, 0x00	; 0
    1aae:	0e 94 a8 07 	call	0xf50	; 0xf50 <DIO_VidSetPinValue>
		 LCD_VidSetDdram(1,7);
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	67 e0       	ldi	r22, 0x07	; 7
    1ab6:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VidSetDdram>
		 LCD_VidWriteString("OFF");
    1aba:	8c ed       	ldi	r24, 0xDC	; 220
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_VidWriteString>
    1ac2:	0d c0       	rjmp	.+26     	; 0x1ade <LDR+0x9c>
}
else{
     DIO_VidSetPinValue(PORTA,PIN6,HIGH);
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	66 e0       	ldi	r22, 0x06	; 6
    1ac8:	41 e0       	ldi	r20, 0x01	; 1
    1aca:	0e 94 a8 07 	call	0xf50	; 0xf50 <DIO_VidSetPinValue>
	 LCD_VidSetDdram(1,7);
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	67 e0       	ldi	r22, 0x07	; 7
    1ad2:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VidSetDdram>
	 LCD_VidWriteString(" ON");
    1ad6:	80 ee       	ldi	r24, 0xE0	; 224
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_VidWriteString>
}


}
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	cf 91       	pop	r28
    1ae4:	df 91       	pop	r29
    1ae6:	08 95       	ret

00001ae8 <ISR_VidUartInterrupt>:
u8 PASSWORD_array[5];
u8 index_name=0,index_pass=0;
u8 axis=0,place=0;


void ISR_VidUartInterrupt(u8 LOC_u8Data){
    1ae8:	df 93       	push	r29
    1aea:	cf 93       	push	r28
    1aec:	cd b7       	in	r28, 0x3d	; 61
    1aee:	de b7       	in	r29, 0x3e	; 62
    1af0:	27 97       	sbiw	r28, 0x07	; 7
    1af2:	0f b6       	in	r0, 0x3f	; 63
    1af4:	f8 94       	cli
    1af6:	de bf       	out	0x3e, r29	; 62
    1af8:	0f be       	out	0x3f, r0	; 63
    1afa:	cd bf       	out	0x3d, r28	; 61
    1afc:	89 83       	std	Y+1, r24	; 0x01

	/* if the user press enter and the flag is equal to zero the compiler will jump into check username funtion
	   else if flag is equal to 1 jump to check PASSWORD

	*/
if(LOC_u8Data=='p'){
    1afe:	89 81       	ldd	r24, Y+1	; 0x01
    1b00:	80 37       	cpi	r24, 0x70	; 112
    1b02:	b1 f4       	brne	.+44     	; 0x1b30 <ISR_VidUartInterrupt+0x48>

	switch(flag){
    1b04:	80 91 0e 01 	lds	r24, 0x010E
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	3f 83       	std	Y+7, r19	; 0x07
    1b0e:	2e 83       	std	Y+6, r18	; 0x06
    1b10:	8e 81       	ldd	r24, Y+6	; 0x06
    1b12:	9f 81       	ldd	r25, Y+7	; 0x07
    1b14:	00 97       	sbiw	r24, 0x00	; 0
    1b16:	31 f0       	breq	.+12     	; 0x1b24 <ISR_VidUartInterrupt+0x3c>
    1b18:	2e 81       	ldd	r18, Y+6	; 0x06
    1b1a:	3f 81       	ldd	r19, Y+7	; 0x07
    1b1c:	21 30       	cpi	r18, 0x01	; 1
    1b1e:	31 05       	cpc	r19, r1
    1b20:	21 f0       	breq	.+8      	; 0x1b2a <ISR_VidUartInterrupt+0x42>
    1b22:	d7 c0       	rjmp	.+430    	; 0x1cd2 <ISR_VidUartInterrupt+0x1ea>

	case 0:LCD_VidUserNameCheck();  break;
    1b24:	0e 94 96 0a 	call	0x152c	; 0x152c <LCD_VidUserNameCheck>
    1b28:	d4 c0       	rjmp	.+424    	; 0x1cd2 <ISR_VidUartInterrupt+0x1ea>
	case 1:LCD_VidPasswordCheck();  break;
    1b2a:	0e 94 3d 0b 	call	0x167a	; 0x167a <LCD_VidPasswordCheck>
    1b2e:	d1 c0       	rjmp	.+418    	; 0x1cd2 <ISR_VidUartInterrupt+0x1ea>
   }
}
/*if the flag is equal to zero  or one and the received data not equal to enter so the compiler will upload
 the arrays with the received data according to the flag
*/
 else if(flag==0 && LOC_u8Data!='p'){
    1b30:	80 91 0e 01 	lds	r24, 0x010E
    1b34:	88 23       	and	r24, r24
    1b36:	a9 f4       	brne	.+42     	; 0x1b62 <ISR_VidUartInterrupt+0x7a>
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
    1b3a:	80 37       	cpi	r24, 0x70	; 112
    1b3c:	91 f0       	breq	.+36     	; 0x1b62 <ISR_VidUartInterrupt+0x7a>
	   LCD_VidWriteData(LOC_u8Data);
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	0e 94 25 12 	call	0x244a	; 0x244a <LCD_VidWriteData>
	   USER_NAME_ARRAY[index_name]=LOC_u8Data;
    1b44:	80 91 0f 01 	lds	r24, 0x010F
    1b48:	88 2f       	mov	r24, r24
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	e5 5e       	subi	r30, 0xE5	; 229
    1b50:	fe 4f       	sbci	r31, 0xFE	; 254
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	80 83       	st	Z, r24
	   index_name++;
    1b56:	80 91 0f 01 	lds	r24, 0x010F
    1b5a:	8f 5f       	subi	r24, 0xFF	; 255
    1b5c:	80 93 0f 01 	sts	0x010F, r24
    1b60:	b8 c0       	rjmp	.+368    	; 0x1cd2 <ISR_VidUartInterrupt+0x1ea>
     }
else if(flag==1 && LOC_u8Data!='p'){
    1b62:	80 91 0e 01 	lds	r24, 0x010E
    1b66:	81 30       	cpi	r24, 0x01	; 1
    1b68:	a9 f4       	brne	.+42     	; 0x1b94 <ISR_VidUartInterrupt+0xac>
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
    1b6c:	80 37       	cpi	r24, 0x70	; 112
    1b6e:	91 f0       	breq	.+36     	; 0x1b94 <ISR_VidUartInterrupt+0xac>
	   LCD_VidWriteData(LOC_u8Data);
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	0e 94 25 12 	call	0x244a	; 0x244a <LCD_VidWriteData>
	   PASSWORD_array[index_pass]=LOC_u8Data;
    1b76:	80 91 10 01 	lds	r24, 0x0110
    1b7a:	88 2f       	mov	r24, r24
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	fc 01       	movw	r30, r24
    1b80:	e0 5e       	subi	r30, 0xE0	; 224
    1b82:	fe 4f       	sbci	r31, 0xFE	; 254
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	80 83       	st	Z, r24
	   index_pass++;
    1b88:	80 91 10 01 	lds	r24, 0x0110
    1b8c:	8f 5f       	subi	r24, 0xFF	; 255
    1b8e:	80 93 10 01 	sts	0x0110, r24
    1b92:	9f c0       	rjmp	.+318    	; 0x1cd2 <ISR_VidUartInterrupt+0x1ea>
 * if the flag is equal to 2 that mean the user enter the correct username and password,
 * that mean the compiler will be at home page function after that if the axis is equal  to zero
 * thats mean the next received data is to choose the between temp fun or LDR FUN OR DOOR FUN
 * once enter the any function the axis will be one
 * */
else if(flag==2 && LOC_u8Data!='p'){
    1b94:	80 91 0e 01 	lds	r24, 0x010E
    1b98:	82 30       	cpi	r24, 0x02	; 2
    1b9a:	09 f0       	breq	.+2      	; 0x1b9e <ISR_VidUartInterrupt+0xb6>
    1b9c:	9a c0       	rjmp	.+308    	; 0x1cd2 <ISR_VidUartInterrupt+0x1ea>
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	80 37       	cpi	r24, 0x70	; 112
    1ba2:	09 f4       	brne	.+2      	; 0x1ba6 <ISR_VidUartInterrupt+0xbe>
    1ba4:	96 c0       	rjmp	.+300    	; 0x1cd2 <ISR_VidUartInterrupt+0x1ea>
	if(axis==0&&(LOC_u8Data=='1'||LOC_u8Data=='2'||LOC_u8Data=='3'||LOC_u8Data=='4')){
    1ba6:	80 91 11 01 	lds	r24, 0x0111
    1baa:	88 23       	and	r24, r24
    1bac:	09 f0       	breq	.+2      	; 0x1bb0 <ISR_VidUartInterrupt+0xc8>
    1bae:	6d c0       	rjmp	.+218    	; 0x1c8a <ISR_VidUartInterrupt+0x1a2>
    1bb0:	89 81       	ldd	r24, Y+1	; 0x01
    1bb2:	81 33       	cpi	r24, 0x31	; 49
    1bb4:	51 f0       	breq	.+20     	; 0x1bca <ISR_VidUartInterrupt+0xe2>
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	82 33       	cpi	r24, 0x32	; 50
    1bba:	39 f0       	breq	.+14     	; 0x1bca <ISR_VidUartInterrupt+0xe2>
    1bbc:	89 81       	ldd	r24, Y+1	; 0x01
    1bbe:	83 33       	cpi	r24, 0x33	; 51
    1bc0:	21 f0       	breq	.+8      	; 0x1bca <ISR_VidUartInterrupt+0xe2>
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	84 33       	cpi	r24, 0x34	; 52
    1bc6:	09 f0       	breq	.+2      	; 0x1bca <ISR_VidUartInterrupt+0xe2>
    1bc8:	60 c0       	rjmp	.+192    	; 0x1c8a <ISR_VidUartInterrupt+0x1a2>
		switch(LOC_u8Data){
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	28 2f       	mov	r18, r24
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	3d 83       	std	Y+5, r19	; 0x05
    1bd2:	2c 83       	std	Y+4, r18	; 0x04
    1bd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd6:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd8:	82 33       	cpi	r24, 0x32	; 50
    1bda:	91 05       	cpc	r25, r1
    1bdc:	01 f1       	breq	.+64     	; 0x1c1e <ISR_VidUartInterrupt+0x136>
    1bde:	2c 81       	ldd	r18, Y+4	; 0x04
    1be0:	3d 81       	ldd	r19, Y+5	; 0x05
    1be2:	23 33       	cpi	r18, 0x33	; 51
    1be4:	31 05       	cpc	r19, r1
    1be6:	34 f4       	brge	.+12     	; 0x1bf4 <ISR_VidUartInterrupt+0x10c>
    1be8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bea:	9d 81       	ldd	r25, Y+5	; 0x05
    1bec:	81 33       	cpi	r24, 0x31	; 49
    1bee:	91 05       	cpc	r25, r1
    1bf0:	61 f0       	breq	.+24     	; 0x1c0a <ISR_VidUartInterrupt+0x122>
    1bf2:	48 c0       	rjmp	.+144    	; 0x1c84 <ISR_VidUartInterrupt+0x19c>
    1bf4:	2c 81       	ldd	r18, Y+4	; 0x04
    1bf6:	3d 81       	ldd	r19, Y+5	; 0x05
    1bf8:	23 33       	cpi	r18, 0x33	; 51
    1bfa:	31 05       	cpc	r19, r1
    1bfc:	41 f1       	breq	.+80     	; 0x1c4e <ISR_VidUartInterrupt+0x166>
    1bfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1c00:	9d 81       	ldd	r25, Y+5	; 0x05
    1c02:	84 33       	cpi	r24, 0x34	; 52
    1c04:	91 05       	cpc	r25, r1
    1c06:	d9 f1       	breq	.+118    	; 0x1c7e <ISR_VidUartInterrupt+0x196>
    1c08:	3d c0       	rjmp	.+122    	; 0x1c84 <ISR_VidUartInterrupt+0x19c>
		         case '1':axis=1; place=1; servo('C');  break;//send close order to servo motor//
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	80 93 11 01 	sts	0x0111, r24
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	80 93 12 01 	sts	0x0112, r24
    1c16:	83 e4       	ldi	r24, 0x43	; 67
    1c18:	0e 94 96 0c 	call	0x192c	; 0x192c <servo>
    1c1c:	5a c0       	rjmp	.+180    	; 0x1cd2 <ISR_VidUartInterrupt+0x1ea>
		         case '2':SET_BIT(ADCSRA,PIN7); //ENABLE ADC//
    1c1e:	a6 e2       	ldi	r26, 0x26	; 38
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	e6 e2       	ldi	r30, 0x26	; 38
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	80 68       	ori	r24, 0x80	; 128
    1c2a:	8c 93       	st	X, r24
		                  ADC_VidGetReadingInterrupt(ADC0);//channel 1 for temp//
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	0e 94 4a 06 	call	0xc94	; 0xc94 <ADC_VidGetReadingInterrupt>
		                  LCD_VidWriteCommand(CLR);
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCD_VidWriteCommand>
		        	      axis=1; place=2; TEMP(15); break;
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	80 93 11 01 	sts	0x0111, r24
    1c3e:	82 e0       	ldi	r24, 0x02	; 2
    1c40:	80 93 12 01 	sts	0x0112, r24
    1c44:	8f e0       	ldi	r24, 0x0F	; 15
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	0e 94 cf 0c 	call	0x199e	; 0x199e <TEMP>
    1c4c:	42 c0       	rjmp	.+132    	; 0x1cd2 <ISR_VidUartInterrupt+0x1ea>
		         case '3':SET_BIT(ADCSRA,PIN7); //ENABLE ADC//
    1c4e:	a6 e2       	ldi	r26, 0x26	; 38
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	e6 e2       	ldi	r30, 0x26	; 38
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	80 68       	ori	r24, 0x80	; 128
    1c5a:	8c 93       	st	X, r24
		                  ADC_VidGetReadingInterrupt(ADC1);//channel 1 for temp//
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	0e 94 4a 06 	call	0xc94	; 0xc94 <ADC_VidGetReadingInterrupt>
		                  LCD_VidWriteCommand(CLR);
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCD_VidWriteCommand>
		        	      axis=1; place=3; LDR(1); break;
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	80 93 11 01 	sts	0x0111, r24
    1c6e:	83 e0       	ldi	r24, 0x03	; 3
    1c70:	80 93 12 01 	sts	0x0112, r24
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <LDR>
    1c7c:	2a c0       	rjmp	.+84     	; 0x1cd2 <ISR_VidUartInterrupt+0x1ea>
		         case '4': main(); break;//back to main //
    1c7e:	0e 94 09 16 	call	0x2c12	; 0x2c12 <main>
    1c82:	27 c0       	rjmp	.+78     	; 0x1cd2 <ISR_VidUartInterrupt+0x1ea>

		         default:  HOME_PAGE();break;
    1c84:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <HOME_PAGE>
    1c88:	24 c0       	rjmp	.+72     	; 0x1cd2 <ISR_VidUartInterrupt+0x1ea>

		/* place =1 (servo)    place =2 (TEMP)           place =3 (LDR)
 		 * if the variable place is equal to one that mean the next data will be the angle of the servo motor
		 * else if place =2 or 3 is used to go back from temp or LDR function to HOME_PAGE function
		 * */
		switch(place){
    1c8a:	80 91 12 01 	lds	r24, 0x0112
    1c8e:	28 2f       	mov	r18, r24
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	3b 83       	std	Y+3, r19	; 0x03
    1c94:	2a 83       	std	Y+2, r18	; 0x02
    1c96:	8a 81       	ldd	r24, Y+2	; 0x02
    1c98:	9b 81       	ldd	r25, Y+3	; 0x03
    1c9a:	82 30       	cpi	r24, 0x02	; 2
    1c9c:	91 05       	cpc	r25, r1
    1c9e:	71 f0       	breq	.+28     	; 0x1cbc <ISR_VidUartInterrupt+0x1d4>
    1ca0:	2a 81       	ldd	r18, Y+2	; 0x02
    1ca2:	3b 81       	ldd	r19, Y+3	; 0x03
    1ca4:	23 30       	cpi	r18, 0x03	; 3
    1ca6:	31 05       	cpc	r19, r1
    1ca8:	79 f0       	breq	.+30     	; 0x1cc8 <ISR_VidUartInterrupt+0x1e0>
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	9b 81       	ldd	r25, Y+3	; 0x03
    1cae:	81 30       	cpi	r24, 0x01	; 1
    1cb0:	91 05       	cpc	r25, r1
    1cb2:	79 f4       	brne	.+30     	; 0x1cd2 <ISR_VidUartInterrupt+0x1ea>
				case 1:  servo(LOC_u8Data); break;//angle//
    1cb4:	89 81       	ldd	r24, Y+1	; 0x01
    1cb6:	0e 94 96 0c 	call	0x192c	; 0x192c <servo>
    1cba:	0b c0       	rjmp	.+22     	; 0x1cd2 <ISR_VidUartInterrupt+0x1ea>
				case 2:  TEMP(LOC_u8Data); break;//back//
    1cbc:	89 81       	ldd	r24, Y+1	; 0x01
    1cbe:	88 2f       	mov	r24, r24
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	0e 94 cf 0c 	call	0x199e	; 0x199e <TEMP>
    1cc6:	05 c0       	rjmp	.+10     	; 0x1cd2 <ISR_VidUartInterrupt+0x1ea>
				case 3:  LDR(LOC_u8Data); break;//back//
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	88 2f       	mov	r24, r24
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <LDR>
	}

 }


}
    1cd2:	27 96       	adiw	r28, 0x07	; 7
    1cd4:	0f b6       	in	r0, 0x3f	; 63
    1cd6:	f8 94       	cli
    1cd8:	de bf       	out	0x3e, r29	; 62
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	cd bf       	out	0x3d, r28	; 61
    1cde:	cf 91       	pop	r28
    1ce0:	df 91       	pop	r29
    1ce2:	08 95       	ret

00001ce4 <ISR_VidAdcInterrupt>:
void ISR_VidAdcInterrupt(u16 value){
    1ce4:	ef 92       	push	r14
    1ce6:	ff 92       	push	r15
    1ce8:	0f 93       	push	r16
    1cea:	1f 93       	push	r17
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	00 d0       	rcall	.+0      	; 0x1cf2 <ISR_VidAdcInterrupt+0xe>
    1cf2:	00 d0       	rcall	.+0      	; 0x1cf4 <ISR_VidAdcInterrupt+0x10>
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
    1cf8:	9c 83       	std	Y+4, r25	; 0x04
    1cfa:	8b 83       	std	Y+3, r24	; 0x03
/*
 * if the place is equal to 2 so calculate the temp
 * else calculate the light intenisty
 * */
u16 ANALOG=0;
    1cfc:	1a 82       	std	Y+2, r1	; 0x02
    1cfe:	19 82       	std	Y+1, r1	; 0x01
if(place==2){
    1d00:	80 91 12 01 	lds	r24, 0x0112
    1d04:	82 30       	cpi	r24, 0x02	; 2
    1d06:	49 f5       	brne	.+82     	; 0x1d5a <ISR_VidAdcInterrupt+0x76>
		ANALOG=(value*5000UL)/1024;
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0c:	cc 01       	movw	r24, r24
    1d0e:	a0 e0       	ldi	r26, 0x00	; 0
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	28 e8       	ldi	r18, 0x88	; 136
    1d14:	33 e1       	ldi	r19, 0x13	; 19
    1d16:	40 e0       	ldi	r20, 0x00	; 0
    1d18:	50 e0       	ldi	r21, 0x00	; 0
    1d1a:	bc 01       	movw	r22, r24
    1d1c:	cd 01       	movw	r24, r26
    1d1e:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__mulsi3>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	07 2e       	mov	r0, r23
    1d28:	7a e0       	ldi	r23, 0x0A	; 10
    1d2a:	b6 95       	lsr	r27
    1d2c:	a7 95       	ror	r26
    1d2e:	97 95       	ror	r25
    1d30:	87 95       	ror	r24
    1d32:	7a 95       	dec	r23
    1d34:	d1 f7       	brne	.-12     	; 0x1d2a <ISR_VidAdcInterrupt+0x46>
    1d36:	70 2d       	mov	r23, r0
    1d38:	9a 83       	std	Y+2, r25	; 0x02
    1d3a:	89 83       	std	Y+1, r24	; 0x01
		ANALOG=(ANALOG/10);
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d40:	2a e0       	ldi	r18, 0x0A	; 10
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	b9 01       	movw	r22, r18
    1d46:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <__udivmodhi4>
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	9a 83       	std	Y+2, r25	; 0x02
    1d4e:	89 83       	std	Y+1, r24	; 0x01
		TEMP(ANALOG);
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	9a 81       	ldd	r25, Y+2	; 0x02
    1d54:	0e 94 cf 0c 	call	0x199e	; 0x199e <TEMP>
    1d58:	22 c0       	rjmp	.+68     	; 0x1d9e <ISR_VidAdcInterrupt+0xba>
  }
else{
	ANALOG=(value*5000UL)/(value+1000);
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5e:	cc 01       	movw	r24, r24
    1d60:	a0 e0       	ldi	r26, 0x00	; 0
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	28 e8       	ldi	r18, 0x88	; 136
    1d66:	33 e1       	ldi	r19, 0x13	; 19
    1d68:	40 e0       	ldi	r20, 0x00	; 0
    1d6a:	50 e0       	ldi	r21, 0x00	; 0
    1d6c:	bc 01       	movw	r22, r24
    1d6e:	cd 01       	movw	r24, r26
    1d70:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__mulsi3>
    1d74:	7b 01       	movw	r14, r22
    1d76:	8c 01       	movw	r16, r24
    1d78:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7c:	88 51       	subi	r24, 0x18	; 24
    1d7e:	9c 4f       	sbci	r25, 0xFC	; 252
    1d80:	9c 01       	movw	r18, r24
    1d82:	40 e0       	ldi	r20, 0x00	; 0
    1d84:	50 e0       	ldi	r21, 0x00	; 0
    1d86:	c8 01       	movw	r24, r16
    1d88:	b7 01       	movw	r22, r14
    1d8a:	0e 94 76 16 	call	0x2cec	; 0x2cec <__udivmodsi4>
    1d8e:	da 01       	movw	r26, r20
    1d90:	c9 01       	movw	r24, r18
    1d92:	9a 83       	std	Y+2, r25	; 0x02
    1d94:	89 83       	std	Y+1, r24	; 0x01
	LDR(ANALOG);
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9a:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <LDR>
}

}
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	1f 91       	pop	r17
    1dac:	0f 91       	pop	r16
    1dae:	ff 90       	pop	r15
    1db0:	ef 90       	pop	r14
    1db2:	08 95       	ret

00001db4 <LCD_VidEnable>:
	#include "BIT_MATH.h"
	#include "DIO_interface.h"
	#include "LCD_interface.h"
	#include "avr/delay.h"

	void LCD_VidEnable(void){
    1db4:	df 93       	push	r29
    1db6:	cf 93       	push	r28
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
    1dbc:	6c 97       	sbiw	r28, 0x1c	; 28
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	f8 94       	cli
    1dc2:	de bf       	out	0x3e, r29	; 62
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	cd bf       	out	0x3d, r28	; 61
		DIO_VidSetPinValue(CTRL_PORT,ES_PIN,HIGH); // EN raising edge//
    1dc8:	83 e0       	ldi	r24, 0x03	; 3
    1dca:	67 e0       	ldi	r22, 0x07	; 7
    1dcc:	41 e0       	ldi	r20, 0x01	; 1
    1dce:	0e 94 a8 07 	call	0xf50	; 0xf50 <DIO_VidSetPinValue>
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	a0 e8       	ldi	r26, 0x80	; 128
    1dd8:	bf e3       	ldi	r27, 0x3F	; 63
    1dda:	89 8f       	std	Y+25, r24	; 0x19
    1ddc:	9a 8f       	std	Y+26, r25	; 0x1a
    1dde:	ab 8f       	std	Y+27, r26	; 0x1b
    1de0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de2:	69 8d       	ldd	r22, Y+25	; 0x19
    1de4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1de6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1de8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	4a ef       	ldi	r20, 0xFA	; 250
    1df0:	54 e4       	ldi	r21, 0x44	; 68
    1df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	8d 8b       	std	Y+21, r24	; 0x15
    1dfc:	9e 8b       	std	Y+22, r25	; 0x16
    1dfe:	af 8b       	std	Y+23, r26	; 0x17
    1e00:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e02:	6d 89       	ldd	r22, Y+21	; 0x15
    1e04:	7e 89       	ldd	r23, Y+22	; 0x16
    1e06:	8f 89       	ldd	r24, Y+23	; 0x17
    1e08:	98 8d       	ldd	r25, Y+24	; 0x18
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	40 e8       	ldi	r20, 0x80	; 128
    1e10:	5f e3       	ldi	r21, 0x3F	; 63
    1e12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e16:	88 23       	and	r24, r24
    1e18:	2c f4       	brge	.+10     	; 0x1e24 <LCD_VidEnable+0x70>
		__ticks = 1;
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	9c 8b       	std	Y+20, r25	; 0x14
    1e20:	8b 8b       	std	Y+19, r24	; 0x13
    1e22:	3f c0       	rjmp	.+126    	; 0x1ea2 <LCD_VidEnable+0xee>
	else if (__tmp > 65535)
    1e24:	6d 89       	ldd	r22, Y+21	; 0x15
    1e26:	7e 89       	ldd	r23, Y+22	; 0x16
    1e28:	8f 89       	ldd	r24, Y+23	; 0x17
    1e2a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	3f ef       	ldi	r19, 0xFF	; 255
    1e30:	4f e7       	ldi	r20, 0x7F	; 127
    1e32:	57 e4       	ldi	r21, 0x47	; 71
    1e34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e38:	18 16       	cp	r1, r24
    1e3a:	4c f5       	brge	.+82     	; 0x1e8e <LCD_VidEnable+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	40 e2       	ldi	r20, 0x20	; 32
    1e4a:	51 e4       	ldi	r21, 0x41	; 65
    1e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	bc 01       	movw	r22, r24
    1e56:	cd 01       	movw	r24, r26
    1e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	9c 8b       	std	Y+20, r25	; 0x14
    1e62:	8b 8b       	std	Y+19, r24	; 0x13
    1e64:	0f c0       	rjmp	.+30     	; 0x1e84 <LCD_VidEnable+0xd0>
    1e66:	88 ec       	ldi	r24, 0xC8	; 200
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	9a 8b       	std	Y+18, r25	; 0x12
    1e6c:	89 8b       	std	Y+17, r24	; 0x11
    1e6e:	89 89       	ldd	r24, Y+17	; 0x11
    1e70:	9a 89       	ldd	r25, Y+18	; 0x12
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	f1 f7       	brne	.-4      	; 0x1e72 <LCD_VidEnable+0xbe>
    1e76:	9a 8b       	std	Y+18, r25	; 0x12
    1e78:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e7a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e7c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	9c 8b       	std	Y+20, r25	; 0x14
    1e82:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e84:	8b 89       	ldd	r24, Y+19	; 0x13
    1e86:	9c 89       	ldd	r25, Y+20	; 0x14
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	69 f7       	brne	.-38     	; 0x1e66 <LCD_VidEnable+0xb2>
    1e8c:	14 c0       	rjmp	.+40     	; 0x1eb6 <LCD_VidEnable+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e90:	7e 89       	ldd	r23, Y+22	; 0x16
    1e92:	8f 89       	ldd	r24, Y+23	; 0x17
    1e94:	98 8d       	ldd	r25, Y+24	; 0x18
    1e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	9c 8b       	std	Y+20, r25	; 0x14
    1ea0:	8b 8b       	std	Y+19, r24	; 0x13
    1ea2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ea4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ea6:	98 8b       	std	Y+16, r25	; 0x10
    1ea8:	8f 87       	std	Y+15, r24	; 0x0f
    1eaa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eac:	98 89       	ldd	r25, Y+16	; 0x10
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	f1 f7       	brne	.-4      	; 0x1eae <LCD_VidEnable+0xfa>
    1eb2:	98 8b       	std	Y+16, r25	; 0x10
    1eb4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		DIO_VidSetPinValue(CTRL_PORT,ES_PIN,LOW);// EN falling edge//
    1eb6:	83 e0       	ldi	r24, 0x03	; 3
    1eb8:	67 e0       	ldi	r22, 0x07	; 7
    1eba:	40 e0       	ldi	r20, 0x00	; 0
    1ebc:	0e 94 a8 07 	call	0xf50	; 0xf50 <DIO_VidSetPinValue>
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	a0 e8       	ldi	r26, 0x80	; 128
    1ec6:	bf e3       	ldi	r27, 0x3F	; 63
    1ec8:	8b 87       	std	Y+11, r24	; 0x0b
    1eca:	9c 87       	std	Y+12, r25	; 0x0c
    1ecc:	ad 87       	std	Y+13, r26	; 0x0d
    1ece:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	4a ef       	ldi	r20, 0xFA	; 250
    1ede:	54 e4       	ldi	r21, 0x44	; 68
    1ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	8f 83       	std	Y+7, r24	; 0x07
    1eea:	98 87       	std	Y+8, r25	; 0x08
    1eec:	a9 87       	std	Y+9, r26	; 0x09
    1eee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ef0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef2:	78 85       	ldd	r23, Y+8	; 0x08
    1ef4:	89 85       	ldd	r24, Y+9	; 0x09
    1ef6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	40 e8       	ldi	r20, 0x80	; 128
    1efe:	5f e3       	ldi	r21, 0x3F	; 63
    1f00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f04:	88 23       	and	r24, r24
    1f06:	2c f4       	brge	.+10     	; 0x1f12 <LCD_VidEnable+0x15e>
		__ticks = 1;
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	9e 83       	std	Y+6, r25	; 0x06
    1f0e:	8d 83       	std	Y+5, r24	; 0x05
    1f10:	3f c0       	rjmp	.+126    	; 0x1f90 <LCD_VidEnable+0x1dc>
	else if (__tmp > 65535)
    1f12:	6f 81       	ldd	r22, Y+7	; 0x07
    1f14:	78 85       	ldd	r23, Y+8	; 0x08
    1f16:	89 85       	ldd	r24, Y+9	; 0x09
    1f18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	3f ef       	ldi	r19, 0xFF	; 255
    1f1e:	4f e7       	ldi	r20, 0x7F	; 127
    1f20:	57 e4       	ldi	r21, 0x47	; 71
    1f22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f26:	18 16       	cp	r1, r24
    1f28:	4c f5       	brge	.+82     	; 0x1f7c <LCD_VidEnable+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	40 e2       	ldi	r20, 0x20	; 32
    1f38:	51 e4       	ldi	r21, 0x41	; 65
    1f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	bc 01       	movw	r22, r24
    1f44:	cd 01       	movw	r24, r26
    1f46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	9e 83       	std	Y+6, r25	; 0x06
    1f50:	8d 83       	std	Y+5, r24	; 0x05
    1f52:	0f c0       	rjmp	.+30     	; 0x1f72 <LCD_VidEnable+0x1be>
    1f54:	88 ec       	ldi	r24, 0xC8	; 200
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	9c 83       	std	Y+4, r25	; 0x04
    1f5a:	8b 83       	std	Y+3, r24	; 0x03
    1f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	f1 f7       	brne	.-4      	; 0x1f60 <LCD_VidEnable+0x1ac>
    1f64:	9c 83       	std	Y+4, r25	; 0x04
    1f66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f68:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	9e 83       	std	Y+6, r25	; 0x06
    1f70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f72:	8d 81       	ldd	r24, Y+5	; 0x05
    1f74:	9e 81       	ldd	r25, Y+6	; 0x06
    1f76:	00 97       	sbiw	r24, 0x00	; 0
    1f78:	69 f7       	brne	.-38     	; 0x1f54 <LCD_VidEnable+0x1a0>
    1f7a:	14 c0       	rjmp	.+40     	; 0x1fa4 <LCD_VidEnable+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f7e:	78 85       	ldd	r23, Y+8	; 0x08
    1f80:	89 85       	ldd	r24, Y+9	; 0x09
    1f82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	9e 83       	std	Y+6, r25	; 0x06
    1f8e:	8d 83       	std	Y+5, r24	; 0x05
    1f90:	8d 81       	ldd	r24, Y+5	; 0x05
    1f92:	9e 81       	ldd	r25, Y+6	; 0x06
    1f94:	9a 83       	std	Y+2, r25	; 0x02
    1f96:	89 83       	std	Y+1, r24	; 0x01
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	f1 f7       	brne	.-4      	; 0x1f9c <LCD_VidEnable+0x1e8>
    1fa0:	9a 83       	std	Y+2, r25	; 0x02
    1fa2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		
	}
    1fa4:	6c 96       	adiw	r28, 0x1c	; 28
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	cd bf       	out	0x3d, r28	; 61
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <LCD_VidInit>:


	/*u8 loc_u8DataPort=the port that connected from D0 to D7
	u8   loc_u8ControlPort=the port that connected to RS&RW&EN
	*/
	void LCD_VidInit(void){
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	c1 54       	subi	r28, 0x41	; 65
    1fc0:	d0 40       	sbci	r29, 0x00	; 0
    1fc2:	0f b6       	in	r0, 0x3f	; 63
    1fc4:	f8 94       	cli
    1fc6:	de bf       	out	0x3e, r29	; 62
    1fc8:	0f be       	out	0x3f, r0	; 63
    1fca:	cd bf       	out	0x3d, r28	; 61
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	a8 e4       	ldi	r26, 0x48	; 72
    1fd2:	b2 e4       	ldi	r27, 0x42	; 66
    1fd4:	8d ab       	std	Y+53, r24	; 0x35
    1fd6:	9e ab       	std	Y+54, r25	; 0x36
    1fd8:	af ab       	std	Y+55, r26	; 0x37
    1fda:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fdc:	6d a9       	ldd	r22, Y+53	; 0x35
    1fde:	7e a9       	ldd	r23, Y+54	; 0x36
    1fe0:	8f a9       	ldd	r24, Y+55	; 0x37
    1fe2:	98 ad       	ldd	r25, Y+56	; 0x38
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	4a ef       	ldi	r20, 0xFA	; 250
    1fea:	54 e4       	ldi	r21, 0x44	; 68
    1fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	89 ab       	std	Y+49, r24	; 0x31
    1ff6:	9a ab       	std	Y+50, r25	; 0x32
    1ff8:	ab ab       	std	Y+51, r26	; 0x33
    1ffa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ffc:	69 a9       	ldd	r22, Y+49	; 0x31
    1ffe:	7a a9       	ldd	r23, Y+50	; 0x32
    2000:	8b a9       	ldd	r24, Y+51	; 0x33
    2002:	9c a9       	ldd	r25, Y+52	; 0x34
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e8       	ldi	r20, 0x80	; 128
    200a:	5f e3       	ldi	r21, 0x3F	; 63
    200c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2010:	88 23       	and	r24, r24
    2012:	2c f4       	brge	.+10     	; 0x201e <LCD_VidInit+0x68>
		__ticks = 1;
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	98 ab       	std	Y+48, r25	; 0x30
    201a:	8f a7       	std	Y+47, r24	; 0x2f
    201c:	3f c0       	rjmp	.+126    	; 0x209c <LCD_VidInit+0xe6>
	else if (__tmp > 65535)
    201e:	69 a9       	ldd	r22, Y+49	; 0x31
    2020:	7a a9       	ldd	r23, Y+50	; 0x32
    2022:	8b a9       	ldd	r24, Y+51	; 0x33
    2024:	9c a9       	ldd	r25, Y+52	; 0x34
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	3f ef       	ldi	r19, 0xFF	; 255
    202a:	4f e7       	ldi	r20, 0x7F	; 127
    202c:	57 e4       	ldi	r21, 0x47	; 71
    202e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2032:	18 16       	cp	r1, r24
    2034:	4c f5       	brge	.+82     	; 0x2088 <LCD_VidInit+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2036:	6d a9       	ldd	r22, Y+53	; 0x35
    2038:	7e a9       	ldd	r23, Y+54	; 0x36
    203a:	8f a9       	ldd	r24, Y+55	; 0x37
    203c:	98 ad       	ldd	r25, Y+56	; 0x38
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	40 e2       	ldi	r20, 0x20	; 32
    2044:	51 e4       	ldi	r21, 0x41	; 65
    2046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	bc 01       	movw	r22, r24
    2050:	cd 01       	movw	r24, r26
    2052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	98 ab       	std	Y+48, r25	; 0x30
    205c:	8f a7       	std	Y+47, r24	; 0x2f
    205e:	0f c0       	rjmp	.+30     	; 0x207e <LCD_VidInit+0xc8>
    2060:	88 ec       	ldi	r24, 0xC8	; 200
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	9e a7       	std	Y+46, r25	; 0x2e
    2066:	8d a7       	std	Y+45, r24	; 0x2d
    2068:	8d a5       	ldd	r24, Y+45	; 0x2d
    206a:	9e a5       	ldd	r25, Y+46	; 0x2e
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	f1 f7       	brne	.-4      	; 0x206c <LCD_VidInit+0xb6>
    2070:	9e a7       	std	Y+46, r25	; 0x2e
    2072:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2074:	8f a5       	ldd	r24, Y+47	; 0x2f
    2076:	98 a9       	ldd	r25, Y+48	; 0x30
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	98 ab       	std	Y+48, r25	; 0x30
    207c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2080:	98 a9       	ldd	r25, Y+48	; 0x30
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	69 f7       	brne	.-38     	; 0x2060 <LCD_VidInit+0xaa>
    2086:	14 c0       	rjmp	.+40     	; 0x20b0 <LCD_VidInit+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2088:	69 a9       	ldd	r22, Y+49	; 0x31
    208a:	7a a9       	ldd	r23, Y+50	; 0x32
    208c:	8b a9       	ldd	r24, Y+51	; 0x33
    208e:	9c a9       	ldd	r25, Y+52	; 0x34
    2090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	98 ab       	std	Y+48, r25	; 0x30
    209a:	8f a7       	std	Y+47, r24	; 0x2f
    209c:	8f a5       	ldd	r24, Y+47	; 0x2f
    209e:	98 a9       	ldd	r25, Y+48	; 0x30
    20a0:	9c a7       	std	Y+44, r25	; 0x2c
    20a2:	8b a7       	std	Y+43, r24	; 0x2b
    20a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    20a6:	9c a5       	ldd	r25, Y+44	; 0x2c
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <LCD_VidInit+0xf2>
    20ac:	9c a7       	std	Y+44, r25	; 0x2c
    20ae:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
	u8 i=0;	
    20b0:	19 ae       	std	Y+57, r1	; 0x39
	u8 array[]={RS_PIN,RW_PIN,ES_PIN};	
    20b2:	ce 01       	movw	r24, r28
    20b4:	ca 96       	adiw	r24, 0x3a	; 58
    20b6:	9e af       	std	Y+62, r25	; 0x3e
    20b8:	8d af       	std	Y+61, r24	; 0x3d
    20ba:	e7 e0       	ldi	r30, 0x07	; 7
    20bc:	f1 e0       	ldi	r31, 0x01	; 1
    20be:	21 96       	adiw	r28, 0x01	; 1
    20c0:	ff af       	std	Y+63, r31	; 0x3f
    20c2:	ee af       	std	Y+62, r30	; 0x3e
    20c4:	21 97       	sbiw	r28, 0x01	; 1
    20c6:	f3 e0       	ldi	r31, 0x03	; 3
    20c8:	22 96       	adiw	r28, 0x02	; 2
    20ca:	ff af       	std	Y+63, r31	; 0x3f
    20cc:	22 97       	sbiw	r28, 0x02	; 2
    20ce:	21 96       	adiw	r28, 0x01	; 1
    20d0:	ee ad       	ldd	r30, Y+62	; 0x3e
    20d2:	ff ad       	ldd	r31, Y+63	; 0x3f
    20d4:	21 97       	sbiw	r28, 0x01	; 1
    20d6:	00 80       	ld	r0, Z
    20d8:	21 96       	adiw	r28, 0x01	; 1
    20da:	8e ad       	ldd	r24, Y+62	; 0x3e
    20dc:	9f ad       	ldd	r25, Y+63	; 0x3f
    20de:	21 97       	sbiw	r28, 0x01	; 1
    20e0:	01 96       	adiw	r24, 0x01	; 1
    20e2:	21 96       	adiw	r28, 0x01	; 1
    20e4:	9f af       	std	Y+63, r25	; 0x3f
    20e6:	8e af       	std	Y+62, r24	; 0x3e
    20e8:	21 97       	sbiw	r28, 0x01	; 1
    20ea:	ed ad       	ldd	r30, Y+61	; 0x3d
    20ec:	fe ad       	ldd	r31, Y+62	; 0x3e
    20ee:	00 82       	st	Z, r0
    20f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    20f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    20f4:	01 96       	adiw	r24, 0x01	; 1
    20f6:	9e af       	std	Y+62, r25	; 0x3e
    20f8:	8d af       	std	Y+61, r24	; 0x3d
    20fa:	22 96       	adiw	r28, 0x02	; 2
    20fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    20fe:	22 97       	sbiw	r28, 0x02	; 2
    2100:	91 50       	subi	r25, 0x01	; 1
    2102:	22 96       	adiw	r28, 0x02	; 2
    2104:	9f af       	std	Y+63, r25	; 0x3f
    2106:	22 97       	sbiw	r28, 0x02	; 2
    2108:	22 96       	adiw	r28, 0x02	; 2
    210a:	ef ad       	ldd	r30, Y+63	; 0x3f
    210c:	22 97       	sbiw	r28, 0x02	; 2
    210e:	ee 23       	and	r30, r30
    2110:	f1 f6       	brne	.-68     	; 0x20ce <LCD_VidInit+0x118>
    2112:	11 c0       	rjmp	.+34     	; 0x2136 <LCD_VidInit+0x180>
	while(i<3){
		DIO_VidSetPinDirection(CTRL_PORT,array[i],HIGH);
    2114:	89 ad       	ldd	r24, Y+57	; 0x39
    2116:	28 2f       	mov	r18, r24
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	ce 01       	movw	r24, r28
    211c:	ca 96       	adiw	r24, 0x3a	; 58
    211e:	fc 01       	movw	r30, r24
    2120:	e2 0f       	add	r30, r18
    2122:	f3 1f       	adc	r31, r19
    2124:	90 81       	ld	r25, Z
    2126:	83 e0       	ldi	r24, 0x03	; 3
    2128:	69 2f       	mov	r22, r25
    212a:	41 e0       	ldi	r20, 0x01	; 1
    212c:	0e 94 a8 06 	call	0xd50	; 0xd50 <DIO_VidSetPinDirection>
	i++;	
    2130:	89 ad       	ldd	r24, Y+57	; 0x39
    2132:	8f 5f       	subi	r24, 0xFF	; 255
    2134:	89 af       	std	Y+57, r24	; 0x39
	*/
	void LCD_VidInit(void){
		_delay_ms(50);
	u8 i=0;	
	u8 array[]={RS_PIN,RW_PIN,ES_PIN};	
	while(i<3){
    2136:	89 ad       	ldd	r24, Y+57	; 0x39
    2138:	83 30       	cpi	r24, 0x03	; 3
    213a:	60 f3       	brcs	.-40     	; 0x2114 <LCD_VidInit+0x15e>
		DIO_VidSetPinDirection(CTRL_PORT,array[i],HIGH);
	i++;	
	}
	#if LCD_MODE==FULL	
		 DIO_VidSetPortDirection(DATA_PORT,255);
    213c:	82 e0       	ldi	r24, 0x02	; 2
    213e:	6f ef       	ldi	r22, 0xFF	; 255
    2140:	0e 94 a8 08 	call	0x1150	; 0x1150 <DIO_VidSetPortDirection>
		 LCD_VidWriteCommand(FUNCTION_SET);    //function set  //
    2144:	88 e3       	ldi	r24, 0x38	; 56
    2146:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCD_VidWriteCommand>
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	a0 e8       	ldi	r26, 0x80	; 128
    2150:	bf e3       	ldi	r27, 0x3F	; 63
    2152:	8f a3       	std	Y+39, r24	; 0x27
    2154:	98 a7       	std	Y+40, r25	; 0x28
    2156:	a9 a7       	std	Y+41, r26	; 0x29
    2158:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    215a:	6f a1       	ldd	r22, Y+39	; 0x27
    215c:	78 a5       	ldd	r23, Y+40	; 0x28
    215e:	89 a5       	ldd	r24, Y+41	; 0x29
    2160:	9a a5       	ldd	r25, Y+42	; 0x2a
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	4a ef       	ldi	r20, 0xFA	; 250
    2168:	54 e4       	ldi	r21, 0x44	; 68
    216a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	8b a3       	std	Y+35, r24	; 0x23
    2174:	9c a3       	std	Y+36, r25	; 0x24
    2176:	ad a3       	std	Y+37, r26	; 0x25
    2178:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    217a:	6b a1       	ldd	r22, Y+35	; 0x23
    217c:	7c a1       	ldd	r23, Y+36	; 0x24
    217e:	8d a1       	ldd	r24, Y+37	; 0x25
    2180:	9e a1       	ldd	r25, Y+38	; 0x26
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	40 e8       	ldi	r20, 0x80	; 128
    2188:	5f e3       	ldi	r21, 0x3F	; 63
    218a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    218e:	88 23       	and	r24, r24
    2190:	2c f4       	brge	.+10     	; 0x219c <LCD_VidInit+0x1e6>
		__ticks = 1;
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	9a a3       	std	Y+34, r25	; 0x22
    2198:	89 a3       	std	Y+33, r24	; 0x21
    219a:	3f c0       	rjmp	.+126    	; 0x221a <LCD_VidInit+0x264>
	else if (__tmp > 65535)
    219c:	6b a1       	ldd	r22, Y+35	; 0x23
    219e:	7c a1       	ldd	r23, Y+36	; 0x24
    21a0:	8d a1       	ldd	r24, Y+37	; 0x25
    21a2:	9e a1       	ldd	r25, Y+38	; 0x26
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	3f ef       	ldi	r19, 0xFF	; 255
    21a8:	4f e7       	ldi	r20, 0x7F	; 127
    21aa:	57 e4       	ldi	r21, 0x47	; 71
    21ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21b0:	18 16       	cp	r1, r24
    21b2:	4c f5       	brge	.+82     	; 0x2206 <LCD_VidInit+0x250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b4:	6f a1       	ldd	r22, Y+39	; 0x27
    21b6:	78 a5       	ldd	r23, Y+40	; 0x28
    21b8:	89 a5       	ldd	r24, Y+41	; 0x29
    21ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	40 e2       	ldi	r20, 0x20	; 32
    21c2:	51 e4       	ldi	r21, 0x41	; 65
    21c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	bc 01       	movw	r22, r24
    21ce:	cd 01       	movw	r24, r26
    21d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	9a a3       	std	Y+34, r25	; 0x22
    21da:	89 a3       	std	Y+33, r24	; 0x21
    21dc:	0f c0       	rjmp	.+30     	; 0x21fc <LCD_VidInit+0x246>
    21de:	88 ec       	ldi	r24, 0xC8	; 200
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	98 a3       	std	Y+32, r25	; 0x20
    21e4:	8f 8f       	std	Y+31, r24	; 0x1f
    21e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21e8:	98 a1       	ldd	r25, Y+32	; 0x20
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	f1 f7       	brne	.-4      	; 0x21ea <LCD_VidInit+0x234>
    21ee:	98 a3       	std	Y+32, r25	; 0x20
    21f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f2:	89 a1       	ldd	r24, Y+33	; 0x21
    21f4:	9a a1       	ldd	r25, Y+34	; 0x22
    21f6:	01 97       	sbiw	r24, 0x01	; 1
    21f8:	9a a3       	std	Y+34, r25	; 0x22
    21fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fc:	89 a1       	ldd	r24, Y+33	; 0x21
    21fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2200:	00 97       	sbiw	r24, 0x00	; 0
    2202:	69 f7       	brne	.-38     	; 0x21de <LCD_VidInit+0x228>
    2204:	14 c0       	rjmp	.+40     	; 0x222e <LCD_VidInit+0x278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2206:	6b a1       	ldd	r22, Y+35	; 0x23
    2208:	7c a1       	ldd	r23, Y+36	; 0x24
    220a:	8d a1       	ldd	r24, Y+37	; 0x25
    220c:	9e a1       	ldd	r25, Y+38	; 0x26
    220e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	9a a3       	std	Y+34, r25	; 0x22
    2218:	89 a3       	std	Y+33, r24	; 0x21
    221a:	89 a1       	ldd	r24, Y+33	; 0x21
    221c:	9a a1       	ldd	r25, Y+34	; 0x22
    221e:	9e 8f       	std	Y+30, r25	; 0x1e
    2220:	8d 8f       	std	Y+29, r24	; 0x1d
    2222:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2224:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	f1 f7       	brne	.-4      	; 0x2226 <LCD_VidInit+0x270>
    222a:	9e 8f       	std	Y+30, r25	; 0x1e
    222c:	8d 8f       	std	Y+29, r24	; 0x1d
		 _delay_ms(1);
		 LCD_VidWriteCommand(DISPLAY_ON);    //display on    //
    222e:	8c e0       	ldi	r24, 0x0C	; 12
    2230:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCD_VidWriteCommand>
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	a0 e8       	ldi	r26, 0x80	; 128
    223a:	bf e3       	ldi	r27, 0x3F	; 63
    223c:	89 8f       	std	Y+25, r24	; 0x19
    223e:	9a 8f       	std	Y+26, r25	; 0x1a
    2240:	ab 8f       	std	Y+27, r26	; 0x1b
    2242:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2244:	69 8d       	ldd	r22, Y+25	; 0x19
    2246:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2248:	8b 8d       	ldd	r24, Y+27	; 0x1b
    224a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	4a ef       	ldi	r20, 0xFA	; 250
    2252:	54 e4       	ldi	r21, 0x44	; 68
    2254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	8d 8b       	std	Y+21, r24	; 0x15
    225e:	9e 8b       	std	Y+22, r25	; 0x16
    2260:	af 8b       	std	Y+23, r26	; 0x17
    2262:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2264:	6d 89       	ldd	r22, Y+21	; 0x15
    2266:	7e 89       	ldd	r23, Y+22	; 0x16
    2268:	8f 89       	ldd	r24, Y+23	; 0x17
    226a:	98 8d       	ldd	r25, Y+24	; 0x18
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	40 e8       	ldi	r20, 0x80	; 128
    2272:	5f e3       	ldi	r21, 0x3F	; 63
    2274:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2278:	88 23       	and	r24, r24
    227a:	2c f4       	brge	.+10     	; 0x2286 <LCD_VidInit+0x2d0>
		__ticks = 1;
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	9c 8b       	std	Y+20, r25	; 0x14
    2282:	8b 8b       	std	Y+19, r24	; 0x13
    2284:	3f c0       	rjmp	.+126    	; 0x2304 <LCD_VidInit+0x34e>
	else if (__tmp > 65535)
    2286:	6d 89       	ldd	r22, Y+21	; 0x15
    2288:	7e 89       	ldd	r23, Y+22	; 0x16
    228a:	8f 89       	ldd	r24, Y+23	; 0x17
    228c:	98 8d       	ldd	r25, Y+24	; 0x18
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	3f ef       	ldi	r19, 0xFF	; 255
    2292:	4f e7       	ldi	r20, 0x7F	; 127
    2294:	57 e4       	ldi	r21, 0x47	; 71
    2296:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    229a:	18 16       	cp	r1, r24
    229c:	4c f5       	brge	.+82     	; 0x22f0 <LCD_VidInit+0x33a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    229e:	69 8d       	ldd	r22, Y+25	; 0x19
    22a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	40 e2       	ldi	r20, 0x20	; 32
    22ac:	51 e4       	ldi	r21, 0x41	; 65
    22ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	bc 01       	movw	r22, r24
    22b8:	cd 01       	movw	r24, r26
    22ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	9c 8b       	std	Y+20, r25	; 0x14
    22c4:	8b 8b       	std	Y+19, r24	; 0x13
    22c6:	0f c0       	rjmp	.+30     	; 0x22e6 <LCD_VidInit+0x330>
    22c8:	88 ec       	ldi	r24, 0xC8	; 200
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	9a 8b       	std	Y+18, r25	; 0x12
    22ce:	89 8b       	std	Y+17, r24	; 0x11
    22d0:	89 89       	ldd	r24, Y+17	; 0x11
    22d2:	9a 89       	ldd	r25, Y+18	; 0x12
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	f1 f7       	brne	.-4      	; 0x22d4 <LCD_VidInit+0x31e>
    22d8:	9a 8b       	std	Y+18, r25	; 0x12
    22da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22dc:	8b 89       	ldd	r24, Y+19	; 0x13
    22de:	9c 89       	ldd	r25, Y+20	; 0x14
    22e0:	01 97       	sbiw	r24, 0x01	; 1
    22e2:	9c 8b       	std	Y+20, r25	; 0x14
    22e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e6:	8b 89       	ldd	r24, Y+19	; 0x13
    22e8:	9c 89       	ldd	r25, Y+20	; 0x14
    22ea:	00 97       	sbiw	r24, 0x00	; 0
    22ec:	69 f7       	brne	.-38     	; 0x22c8 <LCD_VidInit+0x312>
    22ee:	14 c0       	rjmp	.+40     	; 0x2318 <LCD_VidInit+0x362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f0:	6d 89       	ldd	r22, Y+21	; 0x15
    22f2:	7e 89       	ldd	r23, Y+22	; 0x16
    22f4:	8f 89       	ldd	r24, Y+23	; 0x17
    22f6:	98 8d       	ldd	r25, Y+24	; 0x18
    22f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	9c 8b       	std	Y+20, r25	; 0x14
    2302:	8b 8b       	std	Y+19, r24	; 0x13
    2304:	8b 89       	ldd	r24, Y+19	; 0x13
    2306:	9c 89       	ldd	r25, Y+20	; 0x14
    2308:	98 8b       	std	Y+16, r25	; 0x10
    230a:	8f 87       	std	Y+15, r24	; 0x0f
    230c:	8f 85       	ldd	r24, Y+15	; 0x0f
    230e:	98 89       	ldd	r25, Y+16	; 0x10
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	f1 f7       	brne	.-4      	; 0x2310 <LCD_VidInit+0x35a>
    2314:	98 8b       	std	Y+16, r25	; 0x10
    2316:	8f 87       	std	Y+15, r24	; 0x0f
		 _delay_ms(1);
		 LCD_VidWriteCommand(CLR );        //clear display //
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCD_VidWriteCommand>
    231e:	80 e0       	ldi	r24, 0x00	; 0
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	a0 e0       	ldi	r26, 0x00	; 0
    2324:	b0 e4       	ldi	r27, 0x40	; 64
    2326:	8b 87       	std	Y+11, r24	; 0x0b
    2328:	9c 87       	std	Y+12, r25	; 0x0c
    232a:	ad 87       	std	Y+13, r26	; 0x0d
    232c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    232e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2330:	7c 85       	ldd	r23, Y+12	; 0x0c
    2332:	8d 85       	ldd	r24, Y+13	; 0x0d
    2334:	9e 85       	ldd	r25, Y+14	; 0x0e
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	4a ef       	ldi	r20, 0xFA	; 250
    233c:	54 e4       	ldi	r21, 0x44	; 68
    233e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	8f 83       	std	Y+7, r24	; 0x07
    2348:	98 87       	std	Y+8, r25	; 0x08
    234a:	a9 87       	std	Y+9, r26	; 0x09
    234c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    234e:	6f 81       	ldd	r22, Y+7	; 0x07
    2350:	78 85       	ldd	r23, Y+8	; 0x08
    2352:	89 85       	ldd	r24, Y+9	; 0x09
    2354:	9a 85       	ldd	r25, Y+10	; 0x0a
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	40 e8       	ldi	r20, 0x80	; 128
    235c:	5f e3       	ldi	r21, 0x3F	; 63
    235e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2362:	88 23       	and	r24, r24
    2364:	2c f4       	brge	.+10     	; 0x2370 <LCD_VidInit+0x3ba>
		__ticks = 1;
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	9e 83       	std	Y+6, r25	; 0x06
    236c:	8d 83       	std	Y+5, r24	; 0x05
    236e:	3f c0       	rjmp	.+126    	; 0x23ee <LCD_VidInit+0x438>
	else if (__tmp > 65535)
    2370:	6f 81       	ldd	r22, Y+7	; 0x07
    2372:	78 85       	ldd	r23, Y+8	; 0x08
    2374:	89 85       	ldd	r24, Y+9	; 0x09
    2376:	9a 85       	ldd	r25, Y+10	; 0x0a
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	3f ef       	ldi	r19, 0xFF	; 255
    237c:	4f e7       	ldi	r20, 0x7F	; 127
    237e:	57 e4       	ldi	r21, 0x47	; 71
    2380:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2384:	18 16       	cp	r1, r24
    2386:	4c f5       	brge	.+82     	; 0x23da <LCD_VidInit+0x424>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2388:	6b 85       	ldd	r22, Y+11	; 0x0b
    238a:	7c 85       	ldd	r23, Y+12	; 0x0c
    238c:	8d 85       	ldd	r24, Y+13	; 0x0d
    238e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e2       	ldi	r20, 0x20	; 32
    2396:	51 e4       	ldi	r21, 0x41	; 65
    2398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	bc 01       	movw	r22, r24
    23a2:	cd 01       	movw	r24, r26
    23a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	9e 83       	std	Y+6, r25	; 0x06
    23ae:	8d 83       	std	Y+5, r24	; 0x05
    23b0:	0f c0       	rjmp	.+30     	; 0x23d0 <LCD_VidInit+0x41a>
    23b2:	88 ec       	ldi	r24, 0xC8	; 200
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	9c 83       	std	Y+4, r25	; 0x04
    23b8:	8b 83       	std	Y+3, r24	; 0x03
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	9c 81       	ldd	r25, Y+4	; 0x04
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	f1 f7       	brne	.-4      	; 0x23be <LCD_VidInit+0x408>
    23c2:	9c 83       	std	Y+4, r25	; 0x04
    23c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c6:	8d 81       	ldd	r24, Y+5	; 0x05
    23c8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	9e 83       	std	Y+6, r25	; 0x06
    23ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d0:	8d 81       	ldd	r24, Y+5	; 0x05
    23d2:	9e 81       	ldd	r25, Y+6	; 0x06
    23d4:	00 97       	sbiw	r24, 0x00	; 0
    23d6:	69 f7       	brne	.-38     	; 0x23b2 <LCD_VidInit+0x3fc>
    23d8:	14 c0       	rjmp	.+40     	; 0x2402 <LCD_VidInit+0x44c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23da:	6f 81       	ldd	r22, Y+7	; 0x07
    23dc:	78 85       	ldd	r23, Y+8	; 0x08
    23de:	89 85       	ldd	r24, Y+9	; 0x09
    23e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	9e 83       	std	Y+6, r25	; 0x06
    23ec:	8d 83       	std	Y+5, r24	; 0x05
    23ee:	8d 81       	ldd	r24, Y+5	; 0x05
    23f0:	9e 81       	ldd	r25, Y+6	; 0x06
    23f2:	9a 83       	std	Y+2, r25	; 0x02
    23f4:	89 83       	std	Y+1, r24	; 0x01
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	9a 81       	ldd	r25, Y+2	; 0x02
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	f1 f7       	brne	.-4      	; 0x23fa <LCD_VidInit+0x444>
    23fe:	9a 83       	std	Y+2, r25	; 0x02
    2400:	89 83       	std	Y+1, r24	; 0x01
		 
		 
		 
	#endif	 
		 
	}
    2402:	cf 5b       	subi	r28, 0xBF	; 191
    2404:	df 4f       	sbci	r29, 0xFF	; 255
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	f8 94       	cli
    240a:	de bf       	out	0x3e, r29	; 62
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	cd bf       	out	0x3d, r28	; 61
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	08 95       	ret

00002416 <LCD_VidWriteCommand>:
	/*

	loc_u8DataPort=the port that connected from D0 to D7
	loc_u8ControlPort=the port that connected to RS&RW&EN
	*/
	void LCD_VidWriteCommand(u8 loc_u8command){
    2416:	df 93       	push	r29
    2418:	cf 93       	push	r28
    241a:	0f 92       	push	r0
    241c:	cd b7       	in	r28, 0x3d	; 61
    241e:	de b7       	in	r29, 0x3e	; 62
    2420:	89 83       	std	Y+1, r24	; 0x01

	#if LCD_MODE==FULL	
	DIO_VidSetPinValue(CTRL_PORT,RS_PIN,LOW); //make the RS in command mode//
    2422:	83 e0       	ldi	r24, 0x03	; 3
    2424:	65 e0       	ldi	r22, 0x05	; 5
    2426:	40 e0       	ldi	r20, 0x00	; 0
    2428:	0e 94 a8 07 	call	0xf50	; 0xf50 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(CTRL_PORT,RW_PIN,LOW);//make the RW in write mode//
    242c:	83 e0       	ldi	r24, 0x03	; 3
    242e:	66 e0       	ldi	r22, 0x06	; 6
    2430:	40 e0       	ldi	r20, 0x00	; 0
    2432:	0e 94 a8 07 	call	0xf50	; 0xf50 <DIO_VidSetPinValue>
	DIO_VidSetPortValue(DATA_PORT,loc_u8command);//take the data from D0 to D7//
    2436:	82 e0       	ldi	r24, 0x02	; 2
    2438:	69 81       	ldd	r22, Y+1	; 0x01
    243a:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <DIO_VidSetPortValue>
	LCD_VidEnable();
    243e:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_VidEnable>

	DIO_VidSetPortValue(DATA_PORT,loc_u8command<<4);//take the data from D4 to D7//
	LCD_VidEnable();
	#endif		
			
	}
    2442:	0f 90       	pop	r0
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	08 95       	ret

0000244a <LCD_VidWriteData>:
	void LCD_VidWriteData(u8 loc_u8data){
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	0f 92       	push	r0
    2450:	cd b7       	in	r28, 0x3d	; 61
    2452:	de b7       	in	r29, 0x3e	; 62
    2454:	89 83       	std	Y+1, r24	; 0x01
		
	#if LCD_MODE==FULL		
		DIO_VidSetPinValue(CTRL_PORT,RS_PIN,HIGH); //make the RS in data mode//
    2456:	83 e0       	ldi	r24, 0x03	; 3
    2458:	65 e0       	ldi	r22, 0x05	; 5
    245a:	41 e0       	ldi	r20, 0x01	; 1
    245c:	0e 94 a8 07 	call	0xf50	; 0xf50 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(CTRL_PORT,RW_PIN,LOW);//make the RW in write mode//
    2460:	83 e0       	ldi	r24, 0x03	; 3
    2462:	66 e0       	ldi	r22, 0x06	; 6
    2464:	40 e0       	ldi	r20, 0x00	; 0
    2466:	0e 94 a8 07 	call	0xf50	; 0xf50 <DIO_VidSetPinValue>
		DIO_VidSetPortValue(DATA_PORT,loc_u8data);//take the data from D0 to D7//
    246a:	82 e0       	ldi	r24, 0x02	; 2
    246c:	69 81       	ldd	r22, Y+1	; 0x01
    246e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <DIO_VidSetPortValue>
		LCD_VidEnable();
    2472:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_VidEnable>
		LCD_VidEnable();	
		DIO_VidSetPortValue(DATA_PORT,loc_u8data<<4);//take the data from D4 to D7//
		LCD_VidEnable();		
	#endif	
		
	}
    2476:	0f 90       	pop	r0
    2478:	cf 91       	pop	r28
    247a:	df 91       	pop	r29
    247c:	08 95       	ret

0000247e <LCD_VidWriteString>:
	void LCD_VidWriteString(char* loc_u8string){
    247e:	df 93       	push	r29
    2480:	cf 93       	push	r28
    2482:	00 d0       	rcall	.+0      	; 0x2484 <LCD_VidWriteString+0x6>
    2484:	0f 92       	push	r0
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
    248a:	9b 83       	std	Y+3, r25	; 0x03
    248c:	8a 83       	std	Y+2, r24	; 0x02
		u8 i=0;
    248e:	19 82       	std	Y+1, r1	; 0x01
		for(i=0; loc_u8string[i]!=NULL;i++){
    2490:	19 82       	std	Y+1, r1	; 0x01
    2492:	0e c0       	rjmp	.+28     	; 0x24b0 <LCD_VidWriteString+0x32>
		LCD_VidWriteData(loc_u8string[i]);
    2494:	89 81       	ldd	r24, Y+1	; 0x01
    2496:	28 2f       	mov	r18, r24
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	8a 81       	ldd	r24, Y+2	; 0x02
    249c:	9b 81       	ldd	r25, Y+3	; 0x03
    249e:	fc 01       	movw	r30, r24
    24a0:	e2 0f       	add	r30, r18
    24a2:	f3 1f       	adc	r31, r19
    24a4:	80 81       	ld	r24, Z
    24a6:	0e 94 25 12 	call	0x244a	; 0x244a <LCD_VidWriteData>
	#endif	
		
	}
	void LCD_VidWriteString(char* loc_u8string){
		u8 i=0;
		for(i=0; loc_u8string[i]!=NULL;i++){
    24aa:	89 81       	ldd	r24, Y+1	; 0x01
    24ac:	8f 5f       	subi	r24, 0xFF	; 255
    24ae:	89 83       	std	Y+1, r24	; 0x01
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
    24b2:	28 2f       	mov	r18, r24
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	8a 81       	ldd	r24, Y+2	; 0x02
    24b8:	9b 81       	ldd	r25, Y+3	; 0x03
    24ba:	fc 01       	movw	r30, r24
    24bc:	e2 0f       	add	r30, r18
    24be:	f3 1f       	adc	r31, r19
    24c0:	80 81       	ld	r24, Z
    24c2:	88 23       	and	r24, r24
    24c4:	39 f7       	brne	.-50     	; 0x2494 <LCD_VidWriteString+0x16>
		LCD_VidWriteData(loc_u8string[i]);
		}
		
	}
    24c6:	0f 90       	pop	r0
    24c8:	0f 90       	pop	r0
    24ca:	0f 90       	pop	r0
    24cc:	cf 91       	pop	r28
    24ce:	df 91       	pop	r29
    24d0:	08 95       	ret

000024d2 <LCD_VidWriteNumber>:
	void LCD_VidWriteNumber(s32 loc_s32number){
    24d2:	ef 92       	push	r14
    24d4:	ff 92       	push	r15
    24d6:	0f 93       	push	r16
    24d8:	1f 93       	push	r17
    24da:	df 93       	push	r29
    24dc:	cf 93       	push	r28
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
    24e2:	61 97       	sbiw	r28, 0x11	; 17
    24e4:	0f b6       	in	r0, 0x3f	; 63
    24e6:	f8 94       	cli
    24e8:	de bf       	out	0x3e, r29	; 62
    24ea:	0f be       	out	0x3f, r0	; 63
    24ec:	cd bf       	out	0x3d, r28	; 61
    24ee:	6e 87       	std	Y+14, r22	; 0x0e
    24f0:	7f 87       	std	Y+15, r23	; 0x0f
    24f2:	88 8b       	std	Y+16, r24	; 0x10
    24f4:	99 8b       	std	Y+17, r25	; 0x11
// NEGATIVE AND POSTIVE VALUES//

	 s32 x=loc_s32number;
    24f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    24f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    24fa:	a8 89       	ldd	r26, Y+16	; 0x10
    24fc:	b9 89       	ldd	r27, Y+17	; 0x11
    24fe:	8a 87       	std	Y+10, r24	; 0x0a
    2500:	9b 87       	std	Y+11, r25	; 0x0b
    2502:	ac 87       	std	Y+12, r26	; 0x0c
    2504:	bd 87       	std	Y+13, r27	; 0x0d
	 s32 y=0;
    2506:	1e 82       	std	Y+6, r1	; 0x06
    2508:	1f 82       	std	Y+7, r1	; 0x07
    250a:	18 86       	std	Y+8, r1	; 0x08
    250c:	19 86       	std	Y+9, r1	; 0x09
	 s32 reversed=1;
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	a0 e0       	ldi	r26, 0x00	; 0
    2514:	b0 e0       	ldi	r27, 0x00	; 0
    2516:	8a 83       	std	Y+2, r24	; 0x02
    2518:	9b 83       	std	Y+3, r25	; 0x03
    251a:	ac 83       	std	Y+4, r26	; 0x04
    251c:	bd 83       	std	Y+5, r27	; 0x05
	 u8 negtive_flag=0;
    251e:	19 82       	std	Y+1, r1	; 0x01
		 if(loc_s32number<0){
    2520:	8e 85       	ldd	r24, Y+14	; 0x0e
    2522:	9f 85       	ldd	r25, Y+15	; 0x0f
    2524:	a8 89       	ldd	r26, Y+16	; 0x10
    2526:	b9 89       	ldd	r27, Y+17	; 0x11
    2528:	bb 23       	and	r27, r27
    252a:	94 f4       	brge	.+36     	; 0x2550 <LCD_VidWriteNumber+0x7e>
					 x=(loc_s32number*-1);
    252c:	8e 85       	ldd	r24, Y+14	; 0x0e
    252e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2530:	a8 89       	ldd	r26, Y+16	; 0x10
    2532:	b9 89       	ldd	r27, Y+17	; 0x11
    2534:	b0 95       	com	r27
    2536:	a0 95       	com	r26
    2538:	90 95       	com	r25
    253a:	81 95       	neg	r24
    253c:	9f 4f       	sbci	r25, 0xFF	; 255
    253e:	af 4f       	sbci	r26, 0xFF	; 255
    2540:	bf 4f       	sbci	r27, 0xFF	; 255
    2542:	8a 87       	std	Y+10, r24	; 0x0a
    2544:	9b 87       	std	Y+11, r25	; 0x0b
    2546:	ac 87       	std	Y+12, r26	; 0x0c
    2548:	bd 87       	std	Y+13, r27	; 0x0d
					 negtive_flag=1;
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	89 83       	std	Y+1, r24	; 0x01
    254e:	42 c0       	rjmp	.+132    	; 0x25d4 <LCD_VidWriteNumber+0x102>
			 }

		 else if(x==0){
    2550:	8a 85       	ldd	r24, Y+10	; 0x0a
    2552:	9b 85       	ldd	r25, Y+11	; 0x0b
    2554:	ac 85       	ldd	r26, Y+12	; 0x0c
    2556:	bd 85       	ldd	r27, Y+13	; 0x0d
    2558:	00 97       	sbiw	r24, 0x00	; 0
    255a:	a1 05       	cpc	r26, r1
    255c:	b1 05       	cpc	r27, r1
    255e:	d1 f5       	brne	.+116    	; 0x25d4 <LCD_VidWriteNumber+0x102>
					 LCD_VidWriteData(48);
    2560:	80 e3       	ldi	r24, 0x30	; 48
    2562:	0e 94 25 12 	call	0x244a	; 0x244a <LCD_VidWriteData>
    2566:	36 c0       	rjmp	.+108    	; 0x25d4 <LCD_VidWriteNumber+0x102>
				}
		 while(x>0){
					 reversed=(reversed*10)+(x%10);
    2568:	8a 81       	ldd	r24, Y+2	; 0x02
    256a:	9b 81       	ldd	r25, Y+3	; 0x03
    256c:	ac 81       	ldd	r26, Y+4	; 0x04
    256e:	bd 81       	ldd	r27, Y+5	; 0x05
    2570:	2a e0       	ldi	r18, 0x0A	; 10
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	40 e0       	ldi	r20, 0x00	; 0
    2576:	50 e0       	ldi	r21, 0x00	; 0
    2578:	bc 01       	movw	r22, r24
    257a:	cd 01       	movw	r24, r26
    257c:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__mulsi3>
    2580:	7b 01       	movw	r14, r22
    2582:	8c 01       	movw	r16, r24
    2584:	8a 85       	ldd	r24, Y+10	; 0x0a
    2586:	9b 85       	ldd	r25, Y+11	; 0x0b
    2588:	ac 85       	ldd	r26, Y+12	; 0x0c
    258a:	bd 85       	ldd	r27, Y+13	; 0x0d
    258c:	2a e0       	ldi	r18, 0x0A	; 10
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	40 e0       	ldi	r20, 0x00	; 0
    2592:	50 e0       	ldi	r21, 0x00	; 0
    2594:	bc 01       	movw	r22, r24
    2596:	cd 01       	movw	r24, r26
    2598:	0e 94 98 16 	call	0x2d30	; 0x2d30 <__divmodsi4>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	8e 0d       	add	r24, r14
    25a2:	9f 1d       	adc	r25, r15
    25a4:	a0 1f       	adc	r26, r16
    25a6:	b1 1f       	adc	r27, r17
    25a8:	8a 83       	std	Y+2, r24	; 0x02
    25aa:	9b 83       	std	Y+3, r25	; 0x03
    25ac:	ac 83       	std	Y+4, r26	; 0x04
    25ae:	bd 83       	std	Y+5, r27	; 0x05
					   x=x/10;
    25b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    25b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    25b4:	ac 85       	ldd	r26, Y+12	; 0x0c
    25b6:	bd 85       	ldd	r27, Y+13	; 0x0d
    25b8:	2a e0       	ldi	r18, 0x0A	; 10
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	40 e0       	ldi	r20, 0x00	; 0
    25be:	50 e0       	ldi	r21, 0x00	; 0
    25c0:	bc 01       	movw	r22, r24
    25c2:	cd 01       	movw	r24, r26
    25c4:	0e 94 98 16 	call	0x2d30	; 0x2d30 <__divmodsi4>
    25c8:	da 01       	movw	r26, r20
    25ca:	c9 01       	movw	r24, r18
    25cc:	8a 87       	std	Y+10, r24	; 0x0a
    25ce:	9b 87       	std	Y+11, r25	; 0x0b
    25d0:	ac 87       	std	Y+12, r26	; 0x0c
    25d2:	bd 87       	std	Y+13, r27	; 0x0d
			 }

		 else if(x==0){
					 LCD_VidWriteData(48);
				}
		 while(x>0){
    25d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    25d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    25d8:	ac 85       	ldd	r26, Y+12	; 0x0c
    25da:	bd 85       	ldd	r27, Y+13	; 0x0d
    25dc:	18 16       	cp	r1, r24
    25de:	19 06       	cpc	r1, r25
    25e0:	1a 06       	cpc	r1, r26
    25e2:	1b 06       	cpc	r1, r27
    25e4:	0c f2       	brlt	.-126    	; 0x2568 <LCD_VidWriteNumber+0x96>
					 reversed=(reversed*10)+(x%10);
					   x=x/10;
				   }
		 if(loc_s32number<0){
    25e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    25e8:	9f 85       	ldd	r25, Y+15	; 0x0f
    25ea:	a8 89       	ldd	r26, Y+16	; 0x10
    25ec:	b9 89       	ldd	r27, Y+17	; 0x11
    25ee:	bb 23       	and	r27, r27
    25f0:	84 f4       	brge	.+32     	; 0x2612 <LCD_VidWriteNumber+0x140>
					 x=(loc_s32number*-1);
    25f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    25f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    25f6:	a8 89       	ldd	r26, Y+16	; 0x10
    25f8:	b9 89       	ldd	r27, Y+17	; 0x11
    25fa:	b0 95       	com	r27
    25fc:	a0 95       	com	r26
    25fe:	90 95       	com	r25
    2600:	81 95       	neg	r24
    2602:	9f 4f       	sbci	r25, 0xFF	; 255
    2604:	af 4f       	sbci	r26, 0xFF	; 255
    2606:	bf 4f       	sbci	r27, 0xFF	; 255
    2608:	8a 87       	std	Y+10, r24	; 0x0a
    260a:	9b 87       	std	Y+11, r25	; 0x0b
    260c:	ac 87       	std	Y+12, r26	; 0x0c
    260e:	bd 87       	std	Y+13, r27	; 0x0d
    2610:	4a c0       	rjmp	.+148    	; 0x26a6 <LCD_VidWriteNumber+0x1d4>
		 }
		 else{
					x=loc_s32number;
    2612:	8e 85       	ldd	r24, Y+14	; 0x0e
    2614:	9f 85       	ldd	r25, Y+15	; 0x0f
    2616:	a8 89       	ldd	r26, Y+16	; 0x10
    2618:	b9 89       	ldd	r27, Y+17	; 0x11
    261a:	8a 87       	std	Y+10, r24	; 0x0a
    261c:	9b 87       	std	Y+11, r25	; 0x0b
    261e:	ac 87       	std	Y+12, r26	; 0x0c
    2620:	bd 87       	std	Y+13, r27	; 0x0d
    2622:	41 c0       	rjmp	.+130    	; 0x26a6 <LCD_VidWriteNumber+0x1d4>
			 }
		 while(x>0){
					y=reversed%10;
    2624:	8a 81       	ldd	r24, Y+2	; 0x02
    2626:	9b 81       	ldd	r25, Y+3	; 0x03
    2628:	ac 81       	ldd	r26, Y+4	; 0x04
    262a:	bd 81       	ldd	r27, Y+5	; 0x05
    262c:	2a e0       	ldi	r18, 0x0A	; 10
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	40 e0       	ldi	r20, 0x00	; 0
    2632:	50 e0       	ldi	r21, 0x00	; 0
    2634:	bc 01       	movw	r22, r24
    2636:	cd 01       	movw	r24, r26
    2638:	0e 94 98 16 	call	0x2d30	; 0x2d30 <__divmodsi4>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	8e 83       	std	Y+6, r24	; 0x06
    2642:	9f 83       	std	Y+7, r25	; 0x07
    2644:	a8 87       	std	Y+8, r26	; 0x08
    2646:	b9 87       	std	Y+9, r27	; 0x09
					if(negtive_flag==1){
    2648:	89 81       	ldd	r24, Y+1	; 0x01
    264a:	81 30       	cpi	r24, 0x01	; 1
    264c:	21 f4       	brne	.+8      	; 0x2656 <LCD_VidWriteNumber+0x184>
					 LCD_VidWriteData('-');
    264e:	8d e2       	ldi	r24, 0x2D	; 45
    2650:	0e 94 25 12 	call	0x244a	; 0x244a <LCD_VidWriteData>
					  negtive_flag=0;
    2654:	19 82       	std	Y+1, r1	; 0x01
									}
					LCD_VidWriteData(y+48);
    2656:	8e 81       	ldd	r24, Y+6	; 0x06
    2658:	80 5d       	subi	r24, 0xD0	; 208
    265a:	0e 94 25 12 	call	0x244a	; 0x244a <LCD_VidWriteData>
					reversed=reversed/10;
    265e:	8a 81       	ldd	r24, Y+2	; 0x02
    2660:	9b 81       	ldd	r25, Y+3	; 0x03
    2662:	ac 81       	ldd	r26, Y+4	; 0x04
    2664:	bd 81       	ldd	r27, Y+5	; 0x05
    2666:	2a e0       	ldi	r18, 0x0A	; 10
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	40 e0       	ldi	r20, 0x00	; 0
    266c:	50 e0       	ldi	r21, 0x00	; 0
    266e:	bc 01       	movw	r22, r24
    2670:	cd 01       	movw	r24, r26
    2672:	0e 94 98 16 	call	0x2d30	; 0x2d30 <__divmodsi4>
    2676:	da 01       	movw	r26, r20
    2678:	c9 01       	movw	r24, r18
    267a:	8a 83       	std	Y+2, r24	; 0x02
    267c:	9b 83       	std	Y+3, r25	; 0x03
    267e:	ac 83       	std	Y+4, r26	; 0x04
    2680:	bd 83       	std	Y+5, r27	; 0x05
					x=x/10;
    2682:	8a 85       	ldd	r24, Y+10	; 0x0a
    2684:	9b 85       	ldd	r25, Y+11	; 0x0b
    2686:	ac 85       	ldd	r26, Y+12	; 0x0c
    2688:	bd 85       	ldd	r27, Y+13	; 0x0d
    268a:	2a e0       	ldi	r18, 0x0A	; 10
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	40 e0       	ldi	r20, 0x00	; 0
    2690:	50 e0       	ldi	r21, 0x00	; 0
    2692:	bc 01       	movw	r22, r24
    2694:	cd 01       	movw	r24, r26
    2696:	0e 94 98 16 	call	0x2d30	; 0x2d30 <__divmodsi4>
    269a:	da 01       	movw	r26, r20
    269c:	c9 01       	movw	r24, r18
    269e:	8a 87       	std	Y+10, r24	; 0x0a
    26a0:	9b 87       	std	Y+11, r25	; 0x0b
    26a2:	ac 87       	std	Y+12, r26	; 0x0c
    26a4:	bd 87       	std	Y+13, r27	; 0x0d
					 x=(loc_s32number*-1);
		 }
		 else{
					x=loc_s32number;
			 }
		 while(x>0){
    26a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    26a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    26aa:	ac 85       	ldd	r26, Y+12	; 0x0c
    26ac:	bd 85       	ldd	r27, Y+13	; 0x0d
    26ae:	18 16       	cp	r1, r24
    26b0:	19 06       	cpc	r1, r25
    26b2:	1a 06       	cpc	r1, r26
    26b4:	1b 06       	cpc	r1, r27
    26b6:	0c f4       	brge	.+2      	; 0x26ba <LCD_VidWriteNumber+0x1e8>
    26b8:	b5 cf       	rjmp	.-150    	; 0x2624 <LCD_VidWriteNumber+0x152>
									}
					LCD_VidWriteData(y+48);
					reversed=reversed/10;
					x=x/10;
		 }
	}
    26ba:	61 96       	adiw	r28, 0x11	; 17
    26bc:	0f b6       	in	r0, 0x3f	; 63
    26be:	f8 94       	cli
    26c0:	de bf       	out	0x3e, r29	; 62
    26c2:	0f be       	out	0x3f, r0	; 63
    26c4:	cd bf       	out	0x3d, r28	; 61
    26c6:	cf 91       	pop	r28
    26c8:	df 91       	pop	r29
    26ca:	1f 91       	pop	r17
    26cc:	0f 91       	pop	r16
    26ce:	ff 90       	pop	r15
    26d0:	ef 90       	pop	r14
    26d2:	08 95       	ret

000026d4 <LCD_VidSetDdram>:


	void LCD_VidSetDdram(u8 loc_u8row,u8 loc_u8col){
    26d4:	df 93       	push	r29
    26d6:	cf 93       	push	r28
    26d8:	00 d0       	rcall	.+0      	; 0x26da <LCD_VidSetDdram+0x6>
    26da:	cd b7       	in	r28, 0x3d	; 61
    26dc:	de b7       	in	r29, 0x3e	; 62
    26de:	89 83       	std	Y+1, r24	; 0x01
    26e0:	6a 83       	std	Y+2, r22	; 0x02
		if(1==loc_u8row){
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
    26e4:	81 30       	cpi	r24, 0x01	; 1
    26e6:	29 f4       	brne	.+10     	; 0x26f2 <LCD_VidSetDdram+0x1e>
			LCD_VidWriteCommand((127+loc_u8col));
    26e8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ea:	81 58       	subi	r24, 0x81	; 129
    26ec:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCD_VidWriteCommand>
    26f0:	07 c0       	rjmp	.+14     	; 0x2700 <LCD_VidSetDdram+0x2c>
		}
		else if(2==loc_u8row){
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	82 30       	cpi	r24, 0x02	; 2
    26f6:	21 f4       	brne	.+8      	; 0x2700 <LCD_VidSetDdram+0x2c>

			LCD_VidWriteCommand((127+64+loc_u8col));
    26f8:	8a 81       	ldd	r24, Y+2	; 0x02
    26fa:	81 54       	subi	r24, 0x41	; 65
    26fc:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCD_VidWriteCommand>
		}
	}
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	cf 91       	pop	r28
    2706:	df 91       	pop	r29
    2708:	08 95       	ret

0000270a <TIMER1_SetCallBackIcp>:
	#include "TIMER1_interface.h"

	// Icp mode//
	static void (*GlobalPointerIcpTimer1)(u16 GLOBAL_u16Icr1Adress)=NULL;

	void TIMER1_SetCallBackIcp(void (*LocalPointerIcpTimer1)(u16 LOC_u16Icr1Adress)){
    270a:	df 93       	push	r29
    270c:	cf 93       	push	r28
    270e:	00 d0       	rcall	.+0      	; 0x2710 <TIMER1_SetCallBackIcp+0x6>
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
    2714:	9a 83       	std	Y+2, r25	; 0x02
    2716:	89 83       	std	Y+1, r24	; 0x01

	  if(LocalPointerIcpTimer1!=NULL){
    2718:	89 81       	ldd	r24, Y+1	; 0x01
    271a:	9a 81       	ldd	r25, Y+2	; 0x02
    271c:	00 97       	sbiw	r24, 0x00	; 0
    271e:	31 f0       	breq	.+12     	; 0x272c <TIMER1_SetCallBackIcp+0x22>


		  GlobalPointerIcpTimer1=LocalPointerIcpTimer1;
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	9a 81       	ldd	r25, Y+2	; 0x02
    2724:	90 93 14 01 	sts	0x0114, r25
    2728:	80 93 13 01 	sts	0x0113, r24
	  }

	}
    272c:	0f 90       	pop	r0
    272e:	0f 90       	pop	r0
    2730:	cf 91       	pop	r28
    2732:	df 91       	pop	r29
    2734:	08 95       	ret

00002736 <TIMER1_SetCallBack>:
	// any mode//

	static void (*GlobalPointerTimer1)(void)=NULL;

	void TIMER1_SetCallBack(void (*LocalPointerTimer1)(void)){
    2736:	df 93       	push	r29
    2738:	cf 93       	push	r28
    273a:	00 d0       	rcall	.+0      	; 0x273c <TIMER1_SetCallBack+0x6>
    273c:	cd b7       	in	r28, 0x3d	; 61
    273e:	de b7       	in	r29, 0x3e	; 62
    2740:	9a 83       	std	Y+2, r25	; 0x02
    2742:	89 83       	std	Y+1, r24	; 0x01

	  if(LocalPointerTimer1!=NULL){
    2744:	89 81       	ldd	r24, Y+1	; 0x01
    2746:	9a 81       	ldd	r25, Y+2	; 0x02
    2748:	00 97       	sbiw	r24, 0x00	; 0
    274a:	31 f0       	breq	.+12     	; 0x2758 <TIMER1_SetCallBack+0x22>


		  GlobalPointerTimer1=LocalPointerTimer1;
    274c:	89 81       	ldd	r24, Y+1	; 0x01
    274e:	9a 81       	ldd	r25, Y+2	; 0x02
    2750:	90 93 16 01 	sts	0x0116, r25
    2754:	80 93 15 01 	sts	0x0115, r24
	  }

	}
    2758:	0f 90       	pop	r0
    275a:	0f 90       	pop	r0
    275c:	cf 91       	pop	r28
    275e:	df 91       	pop	r29
    2760:	08 95       	ret

00002762 <TIMER1_VidInit>:




	void TIMER1_VidInit(void){
    2762:	df 93       	push	r29
    2764:	cf 93       	push	r28
    2766:	cd b7       	in	r28, 0x3d	; 61
    2768:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B,PIN0);// CS10//
	SET_BIT(TCCR1B,PIN1);// CS11//
	CLR_BIT(TCCR1B,PIN2);// CS12//
	#elif TIMER1_PRE_SCALLER==TIMER1_PRE_256 

	CLR_BIT(TCCR1B,PIN0);// CS10//
    276a:	ae e4       	ldi	r26, 0x4E	; 78
    276c:	b0 e0       	ldi	r27, 0x00	; 0
    276e:	ee e4       	ldi	r30, 0x4E	; 78
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	80 81       	ld	r24, Z
    2774:	8e 7f       	andi	r24, 0xFE	; 254
    2776:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,PIN1);// CS11//
    2778:	ae e4       	ldi	r26, 0x4E	; 78
    277a:	b0 e0       	ldi	r27, 0x00	; 0
    277c:	ee e4       	ldi	r30, 0x4E	; 78
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	80 81       	ld	r24, Z
    2782:	8d 7f       	andi	r24, 0xFD	; 253
    2784:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,PIN2);// CS12//
    2786:	ae e4       	ldi	r26, 0x4E	; 78
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	ee e4       	ldi	r30, 0x4E	; 78
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	80 81       	ld	r24, Z
    2790:	84 60       	ori	r24, 0x04	; 4
    2792:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,PIN4);

	#endif
	//fast pwm ***************//
	#elif TIMER1_MODE==ICU  
	SET_BIT(TCCR1A,PIN1);//WGM11//
    2794:	af e4       	ldi	r26, 0x4F	; 79
    2796:	b0 e0       	ldi	r27, 0x00	; 0
    2798:	ef e4       	ldi	r30, 0x4F	; 79
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	80 81       	ld	r24, Z
    279e:	82 60       	ori	r24, 0x02	; 2
    27a0:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,PIN0);//WGM10//
    27a2:	af e4       	ldi	r26, 0x4F	; 79
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	ef e4       	ldi	r30, 0x4F	; 79
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	8e 7f       	andi	r24, 0xFE	; 254
    27ae:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,PIN3);//WGM12//
    27b0:	ae e4       	ldi	r26, 0x4E	; 78
    27b2:	b0 e0       	ldi	r27, 0x00	; 0
    27b4:	ee e4       	ldi	r30, 0x4E	; 78
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	80 81       	ld	r24, Z
    27ba:	88 60       	ori	r24, 0x08	; 8
    27bc:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,PIN4);//WGM13//
    27be:	ae e4       	ldi	r26, 0x4E	; 78
    27c0:	b0 e0       	ldi	r27, 0x00	; 0
    27c2:	ee e4       	ldi	r30, 0x4E	; 78
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	80 81       	ld	r24, Z
    27c8:	80 61       	ori	r24, 0x10	; 16
    27ca:	8c 93       	st	X, r24
	/*SET_BIT(TCCR1B,PIN6);//ices1 =1 rising  zero=falling//
	SET_BIT(TIMSK,PIN5);// ENABLE THE ICU INTERRUPT//*/
	ICR1=625;
    27cc:	e6 e4       	ldi	r30, 0x46	; 70
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	81 e7       	ldi	r24, 0x71	; 113
    27d2:	92 e0       	ldi	r25, 0x02	; 2
    27d4:	91 83       	std	Z+1, r25	; 0x01
    27d6:	80 83       	st	Z, r24
	#if SELECT_CHANNEL==CHANNEL_A
	SET_BIT(TCCR1A,PIN7);
	CLR_BIT(TCCR1A,PIN6);
	#elif SELECT_CHANNEL==CHANNEL_B // non inverting mode//
	SET_BIT(TCCR1A,PIN5);
    27d8:	af e4       	ldi	r26, 0x4F	; 79
    27da:	b0 e0       	ldi	r27, 0x00	; 0
    27dc:	ef e4       	ldi	r30, 0x4F	; 79
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	80 81       	ld	r24, Z
    27e2:	80 62       	ori	r24, 0x20	; 32
    27e4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,PIN4);
    27e6:	af e4       	ldi	r26, 0x4F	; 79
    27e8:	b0 e0       	ldi	r27, 0x00	; 0
    27ea:	ef e4       	ldi	r30, 0x4F	; 79
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	80 81       	ld	r24, Z
    27f0:	8f 7e       	andi	r24, 0xEF	; 239
    27f2:	8c 93       	st	X, r24
		
		
	   


	}
    27f4:	cf 91       	pop	r28
    27f6:	df 91       	pop	r29
    27f8:	08 95       	ret

000027fa <TIMER1_VidSenceControlIcp>:

	void TIMER1_VidSenceControlIcp(u8 LOC_u8EdgeType){
    27fa:	df 93       	push	r29
    27fc:	cf 93       	push	r28
    27fe:	00 d0       	rcall	.+0      	; 0x2800 <TIMER1_VidSenceControlIcp+0x6>
    2800:	0f 92       	push	r0
    2802:	cd b7       	in	r28, 0x3d	; 61
    2804:	de b7       	in	r29, 0x3e	; 62
    2806:	89 83       	std	Y+1, r24	; 0x01


	switch(LOC_u8EdgeType){
    2808:	89 81       	ldd	r24, Y+1	; 0x01
    280a:	28 2f       	mov	r18, r24
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	3b 83       	std	Y+3, r19	; 0x03
    2810:	2a 83       	std	Y+2, r18	; 0x02
    2812:	8a 81       	ldd	r24, Y+2	; 0x02
    2814:	9b 81       	ldd	r25, Y+3	; 0x03
    2816:	00 97       	sbiw	r24, 0x00	; 0
    2818:	31 f0       	breq	.+12     	; 0x2826 <TIMER1_VidSenceControlIcp+0x2c>
    281a:	2a 81       	ldd	r18, Y+2	; 0x02
    281c:	3b 81       	ldd	r19, Y+3	; 0x03
    281e:	21 30       	cpi	r18, 0x01	; 1
    2820:	31 05       	cpc	r19, r1
    2822:	49 f0       	breq	.+18     	; 0x2836 <TIMER1_VidSenceControlIcp+0x3c>
    2824:	0f c0       	rjmp	.+30     	; 0x2844 <TIMER1_VidSenceControlIcp+0x4a>

	case 0:       CLR_BIT(TCCR1B,PIN6);        break;
    2826:	ae e4       	ldi	r26, 0x4E	; 78
    2828:	b0 e0       	ldi	r27, 0x00	; 0
    282a:	ee e4       	ldi	r30, 0x4E	; 78
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	80 81       	ld	r24, Z
    2830:	8f 7b       	andi	r24, 0xBF	; 191
    2832:	8c 93       	st	X, r24
    2834:	07 c0       	rjmp	.+14     	; 0x2844 <TIMER1_VidSenceControlIcp+0x4a>

	case 1:       SET_BIT(TCCR1B,PIN6);      break;
    2836:	ae e4       	ldi	r26, 0x4E	; 78
    2838:	b0 e0       	ldi	r27, 0x00	; 0
    283a:	ee e4       	ldi	r30, 0x4E	; 78
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	80 81       	ld	r24, Z
    2840:	80 64       	ori	r24, 0x40	; 64
    2842:	8c 93       	st	X, r24

	   }
	}
    2844:	0f 90       	pop	r0
    2846:	0f 90       	pop	r0
    2848:	0f 90       	pop	r0
    284a:	cf 91       	pop	r28
    284c:	df 91       	pop	r29
    284e:	08 95       	ret

00002850 <TIMER1_VidSetDutyCycle>:



void TIMER1_VidSetDutyCycle(u16 LOC_u16OcrValue){
    2850:	df 93       	push	r29
    2852:	cf 93       	push	r28
    2854:	00 d0       	rcall	.+0      	; 0x2856 <TIMER1_VidSetDutyCycle+0x6>
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
    285a:	9a 83       	std	Y+2, r25	; 0x02
    285c:	89 83       	std	Y+1, r24	; 0x01

		OCR1B=LOC_u16OcrValue;
    285e:	e8 e4       	ldi	r30, 0x48	; 72
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	89 81       	ldd	r24, Y+1	; 0x01
    2864:	9a 81       	ldd	r25, Y+2	; 0x02
    2866:	91 83       	std	Z+1, r25	; 0x01
    2868:	80 83       	st	Z, r24

	}
    286a:	0f 90       	pop	r0
    286c:	0f 90       	pop	r0
    286e:	cf 91       	pop	r28
    2870:	df 91       	pop	r29
    2872:	08 95       	ret

00002874 <__vector_6>:
	//timer1 event capture//
	void __vector_6(void){
    2874:	1f 92       	push	r1
    2876:	0f 92       	push	r0
    2878:	0f b6       	in	r0, 0x3f	; 63
    287a:	0f 92       	push	r0
    287c:	11 24       	eor	r1, r1
    287e:	2f 93       	push	r18
    2880:	3f 93       	push	r19
    2882:	4f 93       	push	r20
    2884:	5f 93       	push	r21
    2886:	6f 93       	push	r22
    2888:	7f 93       	push	r23
    288a:	8f 93       	push	r24
    288c:	9f 93       	push	r25
    288e:	af 93       	push	r26
    2890:	bf 93       	push	r27
    2892:	ef 93       	push	r30
    2894:	ff 93       	push	r31
    2896:	df 93       	push	r29
    2898:	cf 93       	push	r28
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62

		if(GlobalPointerIcpTimer1!=NULL){
    289e:	80 91 13 01 	lds	r24, 0x0113
    28a2:	90 91 14 01 	lds	r25, 0x0114
    28a6:	00 97       	sbiw	r24, 0x00	; 0
    28a8:	49 f0       	breq	.+18     	; 0x28bc <__vector_6+0x48>

			GlobalPointerIcpTimer1(ICR1);
    28aa:	e0 91 13 01 	lds	r30, 0x0113
    28ae:	f0 91 14 01 	lds	r31, 0x0114
    28b2:	a6 e4       	ldi	r26, 0x46	; 70
    28b4:	b0 e0       	ldi	r27, 0x00	; 0
    28b6:	8d 91       	ld	r24, X+
    28b8:	9c 91       	ld	r25, X
    28ba:	09 95       	icall
					}
	}
    28bc:	cf 91       	pop	r28
    28be:	df 91       	pop	r29
    28c0:	ff 91       	pop	r31
    28c2:	ef 91       	pop	r30
    28c4:	bf 91       	pop	r27
    28c6:	af 91       	pop	r26
    28c8:	9f 91       	pop	r25
    28ca:	8f 91       	pop	r24
    28cc:	7f 91       	pop	r23
    28ce:	6f 91       	pop	r22
    28d0:	5f 91       	pop	r21
    28d2:	4f 91       	pop	r20
    28d4:	3f 91       	pop	r19
    28d6:	2f 91       	pop	r18
    28d8:	0f 90       	pop	r0
    28da:	0f be       	out	0x3f, r0	; 63
    28dc:	0f 90       	pop	r0
    28de:	1f 90       	pop	r1
    28e0:	18 95       	reti

000028e2 <__vector_9>:

	//timer1 overflow//	
	void __vector_9(void){
    28e2:	1f 92       	push	r1
    28e4:	0f 92       	push	r0
    28e6:	0f b6       	in	r0, 0x3f	; 63
    28e8:	0f 92       	push	r0
    28ea:	11 24       	eor	r1, r1
    28ec:	2f 93       	push	r18
    28ee:	3f 93       	push	r19
    28f0:	4f 93       	push	r20
    28f2:	5f 93       	push	r21
    28f4:	6f 93       	push	r22
    28f6:	7f 93       	push	r23
    28f8:	8f 93       	push	r24
    28fa:	9f 93       	push	r25
    28fc:	af 93       	push	r26
    28fe:	bf 93       	push	r27
    2900:	ef 93       	push	r30
    2902:	ff 93       	push	r31
    2904:	df 93       	push	r29
    2906:	cf 93       	push	r28
    2908:	cd b7       	in	r28, 0x3d	; 61
    290a:	de b7       	in	r29, 0x3e	; 62
		
		if(GlobalPointerTimer1!=NULL){
    290c:	80 91 15 01 	lds	r24, 0x0115
    2910:	90 91 16 01 	lds	r25, 0x0116
    2914:	00 97       	sbiw	r24, 0x00	; 0
    2916:	29 f0       	breq	.+10     	; 0x2922 <__vector_9+0x40>

					GlobalPointerTimer1();
    2918:	e0 91 15 01 	lds	r30, 0x0115
    291c:	f0 91 16 01 	lds	r31, 0x0116
    2920:	09 95       	icall
				}
		
	}
    2922:	cf 91       	pop	r28
    2924:	df 91       	pop	r29
    2926:	ff 91       	pop	r31
    2928:	ef 91       	pop	r30
    292a:	bf 91       	pop	r27
    292c:	af 91       	pop	r26
    292e:	9f 91       	pop	r25
    2930:	8f 91       	pop	r24
    2932:	7f 91       	pop	r23
    2934:	6f 91       	pop	r22
    2936:	5f 91       	pop	r21
    2938:	4f 91       	pop	r20
    293a:	3f 91       	pop	r19
    293c:	2f 91       	pop	r18
    293e:	0f 90       	pop	r0
    2940:	0f be       	out	0x3f, r0	; 63
    2942:	0f 90       	pop	r0
    2944:	1f 90       	pop	r1
    2946:	18 95       	reti

00002948 <UART_VidSetCallBackReceive>:
	#include "UART_register.h"
	#include "UART_interface.h"
	//HTO5//

	static  void (*u8GlobalPointerReceive)(u8 Global_u8UdrAdress);
	void UART_VidSetCallBackReceive(void(*u8LocalPointerReceive)(u8 LOC_u8UdrAdress)){
    2948:	df 93       	push	r29
    294a:	cf 93       	push	r28
    294c:	00 d0       	rcall	.+0      	; 0x294e <UART_VidSetCallBackReceive+0x6>
    294e:	cd b7       	in	r28, 0x3d	; 61
    2950:	de b7       	in	r29, 0x3e	; 62
    2952:	9a 83       	std	Y+2, r25	; 0x02
    2954:	89 83       	std	Y+1, r24	; 0x01

		if(u8LocalPointerReceive!=NULL){
    2956:	89 81       	ldd	r24, Y+1	; 0x01
    2958:	9a 81       	ldd	r25, Y+2	; 0x02
    295a:	00 97       	sbiw	r24, 0x00	; 0
    295c:	31 f0       	breq	.+12     	; 0x296a <UART_VidSetCallBackReceive+0x22>
			u8GlobalPointerReceive=u8LocalPointerReceive;
    295e:	89 81       	ldd	r24, Y+1	; 0x01
    2960:	9a 81       	ldd	r25, Y+2	; 0x02
    2962:	90 93 18 01 	sts	0x0118, r25
    2966:	80 93 17 01 	sts	0x0117, r24
		}

	}
    296a:	0f 90       	pop	r0
    296c:	0f 90       	pop	r0
    296e:	cf 91       	pop	r28
    2970:	df 91       	pop	r29
    2972:	08 95       	ret

00002974 <UART_VidSetCallBackSend>:

	static void (*VidGlobalPointerSend)(u8 u8GlOBAL_UDRTAdress);
	void UART_VidSetCallBackSend(void (*VidLocalPointerSend)(u8 u8LOC_UDRTAdress)){
    2974:	df 93       	push	r29
    2976:	cf 93       	push	r28
    2978:	00 d0       	rcall	.+0      	; 0x297a <UART_VidSetCallBackSend+0x6>
    297a:	cd b7       	in	r28, 0x3d	; 61
    297c:	de b7       	in	r29, 0x3e	; 62
    297e:	9a 83       	std	Y+2, r25	; 0x02
    2980:	89 83       	std	Y+1, r24	; 0x01

		if(VidLocalPointerSend!=NULL){
    2982:	89 81       	ldd	r24, Y+1	; 0x01
    2984:	9a 81       	ldd	r25, Y+2	; 0x02
    2986:	00 97       	sbiw	r24, 0x00	; 0
    2988:	31 f0       	breq	.+12     	; 0x2996 <UART_VidSetCallBackSend+0x22>
			VidGlobalPointerSend=VidLocalPointerSend;
    298a:	89 81       	ldd	r24, Y+1	; 0x01
    298c:	9a 81       	ldd	r25, Y+2	; 0x02
    298e:	90 93 1a 01 	sts	0x011A, r25
    2992:	80 93 19 01 	sts	0x0119, r24
		}

	}
    2996:	0f 90       	pop	r0
    2998:	0f 90       	pop	r0
    299a:	cf 91       	pop	r28
    299c:	df 91       	pop	r29
    299e:	08 95       	ret

000029a0 <UART_VidInit>:
	void UART_VidInit(void){
    29a0:	df 93       	push	r29
    29a2:	cf 93       	push	r28
    29a4:	0f 92       	push	r0
    29a6:	cd b7       	in	r28, 0x3d	; 61
    29a8:	de b7       	in	r29, 0x3e	; 62

		u8 x=0;
    29aa:	19 82       	std	Y+1, r1	; 0x01
		UCSRC=x;
	SET_BIT(UCSRB,PIN3);//ENABLE TRANSMITTER//
	SET_BIT(UCSRB,PIN4);//ENABLE RECIVER//

	#elif UART_MODE==INTERRUPT
	UBRRL=51;//for boud rate//
    29ac:	e9 e2       	ldi	r30, 0x29	; 41
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	83 e3       	ldi	r24, 0x33	; 51
    29b2:	80 83       	st	Z, r24
	UBRRH=0;
    29b4:	e0 e4       	ldi	r30, 0x40	; 64
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	10 82       	st	Z, r1
	SET_BIT(x,1);
    29ba:	89 81       	ldd	r24, Y+1	; 0x01
    29bc:	82 60       	ori	r24, 0x02	; 2
    29be:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(x,2);
    29c0:	89 81       	ldd	r24, Y+1	; 0x01
    29c2:	84 60       	ori	r24, 0x04	; 4
    29c4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(x,7);
    29c6:	89 81       	ldd	r24, Y+1	; 0x01
    29c8:	80 68       	ori	r24, 0x80	; 128
    29ca:	89 83       	std	Y+1, r24	; 0x01
	UCSRC=x;
    29cc:	e0 e4       	ldi	r30, 0x40	; 64
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	89 81       	ldd	r24, Y+1	; 0x01
    29d2:	80 83       	st	Z, r24
	SET_BIT(UCSRB,PIN3);
    29d4:	aa e2       	ldi	r26, 0x2A	; 42
    29d6:	b0 e0       	ldi	r27, 0x00	; 0
    29d8:	ea e2       	ldi	r30, 0x2A	; 42
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	80 81       	ld	r24, Z
    29de:	88 60       	ori	r24, 0x08	; 8
    29e0:	8c 93       	st	X, r24
	SET_BIT(UCSRB,PIN4);
    29e2:	aa e2       	ldi	r26, 0x2A	; 42
    29e4:	b0 e0       	ldi	r27, 0x00	; 0
    29e6:	ea e2       	ldi	r30, 0x2A	; 42
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	80 81       	ld	r24, Z
    29ec:	80 61       	ori	r24, 0x10	; 16
    29ee:	8c 93       	st	X, r24
	SET_BIT(UCSRB,PIN6);//ENABLE TRANSMITTER   interrupt//
    29f0:	aa e2       	ldi	r26, 0x2A	; 42
    29f2:	b0 e0       	ldi	r27, 0x00	; 0
    29f4:	ea e2       	ldi	r30, 0x2A	; 42
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	80 81       	ld	r24, Z
    29fa:	80 64       	ori	r24, 0x40	; 64
    29fc:	8c 93       	st	X, r24
	SET_BIT(UCSRB,PIN7);//ENABLE RECIVER interrupt//
    29fe:	aa e2       	ldi	r26, 0x2A	; 42
    2a00:	b0 e0       	ldi	r27, 0x00	; 0
    2a02:	ea e2       	ldi	r30, 0x2A	; 42
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	80 81       	ld	r24, Z
    2a08:	80 68       	ori	r24, 0x80	; 128
    2a0a:	8c 93       	st	X, r24
	#endif
	}
    2a0c:	0f 90       	pop	r0
    2a0e:	cf 91       	pop	r28
    2a10:	df 91       	pop	r29
    2a12:	08 95       	ret

00002a14 <UART_VidSend>:
	void UART_VidSend(u8 *LOC_u8Data){
    2a14:	df 93       	push	r29
    2a16:	cf 93       	push	r28
    2a18:	00 d0       	rcall	.+0      	; 0x2a1a <UART_VidSend+0x6>
    2a1a:	0f 92       	push	r0
    2a1c:	cd b7       	in	r28, 0x3d	; 61
    2a1e:	de b7       	in	r29, 0x3e	; 62
    2a20:	9b 83       	std	Y+3, r25	; 0x03
    2a22:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    2a24:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;LOC_u8Data[i]!=NULL;i++){
    2a26:	19 82       	std	Y+1, r1	; 0x01
    2a28:	1b c0       	rjmp	.+54     	; 0x2a60 <UART_VidSend+0x4c>
		while(0==GET_BIT(UCSRA,PIN5));
    2a2a:	eb e2       	ldi	r30, 0x2B	; 43
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	80 81       	ld	r24, Z
    2a30:	82 95       	swap	r24
    2a32:	86 95       	lsr	r24
    2a34:	87 70       	andi	r24, 0x07	; 7
    2a36:	88 2f       	mov	r24, r24
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	81 70       	andi	r24, 0x01	; 1
    2a3c:	90 70       	andi	r25, 0x00	; 0
    2a3e:	00 97       	sbiw	r24, 0x00	; 0
    2a40:	a1 f3       	breq	.-24     	; 0x2a2a <UART_VidSend+0x16>
		UDR_T=LOC_u8Data[i];
    2a42:	ac e2       	ldi	r26, 0x2C	; 44
    2a44:	b0 e0       	ldi	r27, 0x00	; 0
    2a46:	89 81       	ldd	r24, Y+1	; 0x01
    2a48:	28 2f       	mov	r18, r24
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a50:	fc 01       	movw	r30, r24
    2a52:	e2 0f       	add	r30, r18
    2a54:	f3 1f       	adc	r31, r19
    2a56:	80 81       	ld	r24, Z
    2a58:	8c 93       	st	X, r24
	SET_BIT(UCSRB,PIN7);//ENABLE RECIVER interrupt//
	#endif
	}
	void UART_VidSend(u8 *LOC_u8Data){
	u8 i=0;
	for(i=0;LOC_u8Data[i]!=NULL;i++){
    2a5a:	89 81       	ldd	r24, Y+1	; 0x01
    2a5c:	8f 5f       	subi	r24, 0xFF	; 255
    2a5e:	89 83       	std	Y+1, r24	; 0x01
    2a60:	89 81       	ldd	r24, Y+1	; 0x01
    2a62:	28 2f       	mov	r18, r24
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	8a 81       	ldd	r24, Y+2	; 0x02
    2a68:	9b 81       	ldd	r25, Y+3	; 0x03
    2a6a:	fc 01       	movw	r30, r24
    2a6c:	e2 0f       	add	r30, r18
    2a6e:	f3 1f       	adc	r31, r19
    2a70:	80 81       	ld	r24, Z
    2a72:	88 23       	and	r24, r24
    2a74:	d1 f6       	brne	.-76     	; 0x2a2a <UART_VidSend+0x16>
		while(0==GET_BIT(UCSRA,PIN5));
		UDR_T=LOC_u8Data[i];
		}
	}
    2a76:	0f 90       	pop	r0
    2a78:	0f 90       	pop	r0
    2a7a:	0f 90       	pop	r0
    2a7c:	cf 91       	pop	r28
    2a7e:	df 91       	pop	r29
    2a80:	08 95       	ret

00002a82 <UART_VidReceive>:
	u8 UART_VidReceive(void){
    2a82:	df 93       	push	r29
    2a84:	cf 93       	push	r28
    2a86:	0f 92       	push	r0
    2a88:	cd b7       	in	r28, 0x3d	; 61
    2a8a:	de b7       	in	r29, 0x3e	; 62
		u8 Result;
		while(0==GET_BIT(UCSRA,PIN7));
    2a8c:	eb e2       	ldi	r30, 0x2B	; 43
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	80 81       	ld	r24, Z
    2a92:	88 23       	and	r24, r24
    2a94:	dc f7       	brge	.-10     	; 0x2a8c <UART_VidReceive+0xa>
		Result=UDR_R;
    2a96:	ec e2       	ldi	r30, 0x2C	; 44
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	80 81       	ld	r24, Z
    2a9c:	89 83       	std	Y+1, r24	; 0x01

		return Result;
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01

	}
    2aa0:	0f 90       	pop	r0
    2aa2:	cf 91       	pop	r28
    2aa4:	df 91       	pop	r29
    2aa6:	08 95       	ret

00002aa8 <__vector_13>:



	//RX COmplete//
	void __vector_13(void){
    2aa8:	1f 92       	push	r1
    2aaa:	0f 92       	push	r0
    2aac:	0f b6       	in	r0, 0x3f	; 63
    2aae:	0f 92       	push	r0
    2ab0:	11 24       	eor	r1, r1
    2ab2:	2f 93       	push	r18
    2ab4:	3f 93       	push	r19
    2ab6:	4f 93       	push	r20
    2ab8:	5f 93       	push	r21
    2aba:	6f 93       	push	r22
    2abc:	7f 93       	push	r23
    2abe:	8f 93       	push	r24
    2ac0:	9f 93       	push	r25
    2ac2:	af 93       	push	r26
    2ac4:	bf 93       	push	r27
    2ac6:	ef 93       	push	r30
    2ac8:	ff 93       	push	r31
    2aca:	df 93       	push	r29
    2acc:	cf 93       	push	r28
    2ace:	cd b7       	in	r28, 0x3d	; 61
    2ad0:	de b7       	in	r29, 0x3e	; 62

		if(u8GlobalPointerReceive!=NULL){
    2ad2:	80 91 17 01 	lds	r24, 0x0117
    2ad6:	90 91 18 01 	lds	r25, 0x0118
    2ada:	00 97       	sbiw	r24, 0x00	; 0
    2adc:	41 f0       	breq	.+16     	; 0x2aee <__vector_13+0x46>

			u8GlobalPointerReceive(UDR_R);
    2ade:	e0 91 17 01 	lds	r30, 0x0117
    2ae2:	f0 91 18 01 	lds	r31, 0x0118
    2ae6:	ac e2       	ldi	r26, 0x2C	; 44
    2ae8:	b0 e0       	ldi	r27, 0x00	; 0
    2aea:	8c 91       	ld	r24, X
    2aec:	09 95       	icall
		}
	}
    2aee:	cf 91       	pop	r28
    2af0:	df 91       	pop	r29
    2af2:	ff 91       	pop	r31
    2af4:	ef 91       	pop	r30
    2af6:	bf 91       	pop	r27
    2af8:	af 91       	pop	r26
    2afa:	9f 91       	pop	r25
    2afc:	8f 91       	pop	r24
    2afe:	7f 91       	pop	r23
    2b00:	6f 91       	pop	r22
    2b02:	5f 91       	pop	r21
    2b04:	4f 91       	pop	r20
    2b06:	3f 91       	pop	r19
    2b08:	2f 91       	pop	r18
    2b0a:	0f 90       	pop	r0
    2b0c:	0f be       	out	0x3f, r0	; 63
    2b0e:	0f 90       	pop	r0
    2b10:	1f 90       	pop	r1
    2b12:	18 95       	reti

00002b14 <__vector_15>:
	//TX COmplete//
	void __vector_15(void){
    2b14:	1f 92       	push	r1
    2b16:	0f 92       	push	r0
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	0f 92       	push	r0
    2b1c:	11 24       	eor	r1, r1
    2b1e:	2f 93       	push	r18
    2b20:	3f 93       	push	r19
    2b22:	4f 93       	push	r20
    2b24:	5f 93       	push	r21
    2b26:	6f 93       	push	r22
    2b28:	7f 93       	push	r23
    2b2a:	8f 93       	push	r24
    2b2c:	9f 93       	push	r25
    2b2e:	af 93       	push	r26
    2b30:	bf 93       	push	r27
    2b32:	ef 93       	push	r30
    2b34:	ff 93       	push	r31
    2b36:	df 93       	push	r29
    2b38:	cf 93       	push	r28
    2b3a:	cd b7       	in	r28, 0x3d	; 61
    2b3c:	de b7       	in	r29, 0x3e	; 62

		if(VidGlobalPointerSend!=NULL){
    2b3e:	80 91 19 01 	lds	r24, 0x0119
    2b42:	90 91 1a 01 	lds	r25, 0x011A
    2b46:	00 97       	sbiw	r24, 0x00	; 0
    2b48:	41 f0       	breq	.+16     	; 0x2b5a <__vector_15+0x46>
			VidGlobalPointerSend(UDR_T);
    2b4a:	e0 91 19 01 	lds	r30, 0x0119
    2b4e:	f0 91 1a 01 	lds	r31, 0x011A
    2b52:	ac e2       	ldi	r26, 0x2C	; 44
    2b54:	b0 e0       	ldi	r27, 0x00	; 0
    2b56:	8c 91       	ld	r24, X
    2b58:	09 95       	icall
		}

	}
    2b5a:	cf 91       	pop	r28
    2b5c:	df 91       	pop	r29
    2b5e:	ff 91       	pop	r31
    2b60:	ef 91       	pop	r30
    2b62:	bf 91       	pop	r27
    2b64:	af 91       	pop	r26
    2b66:	9f 91       	pop	r25
    2b68:	8f 91       	pop	r24
    2b6a:	7f 91       	pop	r23
    2b6c:	6f 91       	pop	r22
    2b6e:	5f 91       	pop	r21
    2b70:	4f 91       	pop	r20
    2b72:	3f 91       	pop	r19
    2b74:	2f 91       	pop	r18
    2b76:	0f 90       	pop	r0
    2b78:	0f be       	out	0x3f, r0	; 63
    2b7a:	0f 90       	pop	r0
    2b7c:	1f 90       	pop	r1
    2b7e:	18 95       	reti

00002b80 <__vector_14>:


	//DATA REGISTER EMPTY//
	void __vector_14(void){
    2b80:	1f 92       	push	r1
    2b82:	0f 92       	push	r0
    2b84:	0f b6       	in	r0, 0x3f	; 63
    2b86:	0f 92       	push	r0
    2b88:	11 24       	eor	r1, r1
    2b8a:	df 93       	push	r29
    2b8c:	cf 93       	push	r28
    2b8e:	cd b7       	in	r28, 0x3d	; 61
    2b90:	de b7       	in	r29, 0x3e	; 62
		}
    2b92:	cf 91       	pop	r28
    2b94:	df 91       	pop	r29
    2b96:	0f 90       	pop	r0
    2b98:	0f be       	out	0x3f, r0	; 63
    2b9a:	0f 90       	pop	r0
    2b9c:	1f 90       	pop	r1
    2b9e:	18 95       	reti

00002ba0 <Intializtion>:


void ISR_VidAdcInterrupt(u16 value);
void ISR_VidUartInterrupt(u8 LOC_u8Data);

void Intializtion(void){
    2ba0:	df 93       	push	r29
    2ba2:	cf 93       	push	r28
    2ba4:	cd b7       	in	r28, 0x3d	; 61
    2ba6:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection(PORTD,PIN0,INPUT);//rx//
    2ba8:	83 e0       	ldi	r24, 0x03	; 3
    2baa:	60 e0       	ldi	r22, 0x00	; 0
    2bac:	40 e0       	ldi	r20, 0x00	; 0
    2bae:	0e 94 a8 06 	call	0xd50	; 0xd50 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(PORTD,PIN1,OUTPUT);// tx//
    2bb2:	83 e0       	ldi	r24, 0x03	; 3
    2bb4:	61 e0       	ldi	r22, 0x01	; 1
    2bb6:	41 e0       	ldi	r20, 0x01	; 1
    2bb8:	0e 94 a8 06 	call	0xd50	; 0xd50 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(PORTD,PIN4,OUTPUT);//ocr1 servo//
    2bbc:	83 e0       	ldi	r24, 0x03	; 3
    2bbe:	64 e0       	ldi	r22, 0x04	; 4
    2bc0:	41 e0       	ldi	r20, 0x01	; 1
    2bc2:	0e 94 a8 06 	call	0xd50	; 0xd50 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(PORTA,PIN7,OUTPUT);//buzzer//
    2bc6:	80 e0       	ldi	r24, 0x00	; 0
    2bc8:	67 e0       	ldi	r22, 0x07	; 7
    2bca:	41 e0       	ldi	r20, 0x01	; 1
    2bcc:	0e 94 a8 06 	call	0xd50	; 0xd50 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(PORTA,PIN6,OUTPUT);//LED//
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	66 e0       	ldi	r22, 0x06	; 6
    2bd4:	41 e0       	ldi	r20, 0x01	; 1
    2bd6:	0e 94 a8 06 	call	0xd50	; 0xd50 <DIO_VidSetPinDirection>


	LCD_VidInit();//LCD INIT//
    2bda:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <LCD_VidInit>
	GIE_VidEnable();//global interrupt INIT//
    2bde:	0e 94 20 0a 	call	0x1440	; 0x1440 <GIE_VidEnable>
	UART_VidSetCallBackReceive(ISR_VidUartInterrupt);//set call back UART INIT//
    2be2:	84 e7       	ldi	r24, 0x74	; 116
    2be4:	9d e0       	ldi	r25, 0x0D	; 13
    2be6:	0e 94 a4 14 	call	0x2948	; 0x2948 <UART_VidSetCallBackReceive>
	ADC_SetCallBack(ISR_VidAdcInterrupt);//set call back ADC INIT//
    2bea:	82 e7       	ldi	r24, 0x72	; 114
    2bec:	9e e0       	ldi	r25, 0x0E	; 14
    2bee:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_SetCallBack>
	UART_VidInit();//UART INIT//
    2bf2:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <UART_VidInit>
	TIMER1_VidInit();//TIMER1  INIT FOR SERVO MOTOR//
    2bf6:	0e 94 b1 13 	call	0x2762	; 0x2762 <TIMER1_VidInit>
	ADC_VidInit();//ADC INIT//
    2bfa:	0e 94 b9 05 	call	0xb72	; 0xb72 <ADC_VidInit>
	CLR_BIT(ADCSRA,PIN7); //DISABLE ADC//
    2bfe:	a6 e2       	ldi	r26, 0x26	; 38
    2c00:	b0 e0       	ldi	r27, 0x00	; 0
    2c02:	e6 e2       	ldi	r30, 0x26	; 38
    2c04:	f0 e0       	ldi	r31, 0x00	; 0
    2c06:	80 81       	ld	r24, Z
    2c08:	8f 77       	andi	r24, 0x7F	; 127
    2c0a:	8c 93       	st	X, r24

}
    2c0c:	cf 91       	pop	r28
    2c0e:	df 91       	pop	r29
    2c10:	08 95       	ret

00002c12 <main>:
extern u8 index_pass;
extern u8 index_name;
extern u8 flag;


void main(void){
    2c12:	df 93       	push	r29
    2c14:	cf 93       	push	r28
    2c16:	cd b7       	in	r28, 0x3d	; 61
    2c18:	de b7       	in	r29, 0x3e	; 62


	Intializtion();
    2c1a:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <Intializtion>
	START();
    2c1e:	0e 94 12 16 	call	0x2c24	; 0x2c24 <START>
    2c22:	ff cf       	rjmp	.-2      	; 0x2c22 <main+0x10>

00002c24 <START>:

	}

}

void START(void){
    2c24:	df 93       	push	r29
    2c26:	cf 93       	push	r28
    2c28:	0f 92       	push	r0
    2c2a:	cd b7       	in	r28, 0x3d	; 61
    2c2c:	de b7       	in	r29, 0x3e	; 62

	u8 i=0;
    2c2e:	19 82       	std	Y+1, r1	; 0x01

    LCD_VidWriteCommand(CLR);
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCD_VidWriteCommand>
	LCD_VidWriteString("ENTER USER NAME : ");
    2c36:	84 ee       	ldi	r24, 0xE4	; 228
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	0e 94 3f 12 	call	0x247e	; 0x247e <LCD_VidWriteString>
	LCD_VidSetDdram(2,1);
    2c3e:	82 e0       	ldi	r24, 0x02	; 2
    2c40:	61 e0       	ldi	r22, 0x01	; 1
    2c42:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VidSetDdram>
	index_pass=0;
    2c46:	10 92 10 01 	sts	0x0110, r1
	index_name=0;
    2c4a:	10 92 0f 01 	sts	0x010F, r1
	flag=0;
    2c4e:	10 92 0e 01 	sts	0x010E, r1
	for(i=0;i<6;i++){
    2c52:	19 82       	std	Y+1, r1	; 0x01
    2c54:	11 c0       	rjmp	.+34     	; 0x2c78 <START+0x54>

		USER_NAME_ARRAY[i]=0;
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	88 2f       	mov	r24, r24
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	e5 5e       	subi	r30, 0xE5	; 229
    2c60:	fe 4f       	sbci	r31, 0xFE	; 254
    2c62:	10 82       	st	Z, r1
	    PASSWORD_array[i]=0;
    2c64:	89 81       	ldd	r24, Y+1	; 0x01
    2c66:	88 2f       	mov	r24, r24
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	fc 01       	movw	r30, r24
    2c6c:	e0 5e       	subi	r30, 0xE0	; 224
    2c6e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c70:	10 82       	st	Z, r1
	LCD_VidWriteString("ENTER USER NAME : ");
	LCD_VidSetDdram(2,1);
	index_pass=0;
	index_name=0;
	flag=0;
	for(i=0;i<6;i++){
    2c72:	89 81       	ldd	r24, Y+1	; 0x01
    2c74:	8f 5f       	subi	r24, 0xFF	; 255
    2c76:	89 83       	std	Y+1, r24	; 0x01
    2c78:	89 81       	ldd	r24, Y+1	; 0x01
    2c7a:	86 30       	cpi	r24, 0x06	; 6
    2c7c:	60 f3       	brcs	.-40     	; 0x2c56 <START+0x32>

		USER_NAME_ARRAY[i]=0;
	    PASSWORD_array[i]=0;
	}
}
    2c7e:	0f 90       	pop	r0
    2c80:	cf 91       	pop	r28
    2c82:	df 91       	pop	r29
    2c84:	08 95       	ret

00002c86 <__mulsi3>:
    2c86:	62 9f       	mul	r22, r18
    2c88:	d0 01       	movw	r26, r0
    2c8a:	73 9f       	mul	r23, r19
    2c8c:	f0 01       	movw	r30, r0
    2c8e:	82 9f       	mul	r24, r18
    2c90:	e0 0d       	add	r30, r0
    2c92:	f1 1d       	adc	r31, r1
    2c94:	64 9f       	mul	r22, r20
    2c96:	e0 0d       	add	r30, r0
    2c98:	f1 1d       	adc	r31, r1
    2c9a:	92 9f       	mul	r25, r18
    2c9c:	f0 0d       	add	r31, r0
    2c9e:	83 9f       	mul	r24, r19
    2ca0:	f0 0d       	add	r31, r0
    2ca2:	74 9f       	mul	r23, r20
    2ca4:	f0 0d       	add	r31, r0
    2ca6:	65 9f       	mul	r22, r21
    2ca8:	f0 0d       	add	r31, r0
    2caa:	99 27       	eor	r25, r25
    2cac:	72 9f       	mul	r23, r18
    2cae:	b0 0d       	add	r27, r0
    2cb0:	e1 1d       	adc	r30, r1
    2cb2:	f9 1f       	adc	r31, r25
    2cb4:	63 9f       	mul	r22, r19
    2cb6:	b0 0d       	add	r27, r0
    2cb8:	e1 1d       	adc	r30, r1
    2cba:	f9 1f       	adc	r31, r25
    2cbc:	bd 01       	movw	r22, r26
    2cbe:	cf 01       	movw	r24, r30
    2cc0:	11 24       	eor	r1, r1
    2cc2:	08 95       	ret

00002cc4 <__udivmodhi4>:
    2cc4:	aa 1b       	sub	r26, r26
    2cc6:	bb 1b       	sub	r27, r27
    2cc8:	51 e1       	ldi	r21, 0x11	; 17
    2cca:	07 c0       	rjmp	.+14     	; 0x2cda <__udivmodhi4_ep>

00002ccc <__udivmodhi4_loop>:
    2ccc:	aa 1f       	adc	r26, r26
    2cce:	bb 1f       	adc	r27, r27
    2cd0:	a6 17       	cp	r26, r22
    2cd2:	b7 07       	cpc	r27, r23
    2cd4:	10 f0       	brcs	.+4      	; 0x2cda <__udivmodhi4_ep>
    2cd6:	a6 1b       	sub	r26, r22
    2cd8:	b7 0b       	sbc	r27, r23

00002cda <__udivmodhi4_ep>:
    2cda:	88 1f       	adc	r24, r24
    2cdc:	99 1f       	adc	r25, r25
    2cde:	5a 95       	dec	r21
    2ce0:	a9 f7       	brne	.-22     	; 0x2ccc <__udivmodhi4_loop>
    2ce2:	80 95       	com	r24
    2ce4:	90 95       	com	r25
    2ce6:	bc 01       	movw	r22, r24
    2ce8:	cd 01       	movw	r24, r26
    2cea:	08 95       	ret

00002cec <__udivmodsi4>:
    2cec:	a1 e2       	ldi	r26, 0x21	; 33
    2cee:	1a 2e       	mov	r1, r26
    2cf0:	aa 1b       	sub	r26, r26
    2cf2:	bb 1b       	sub	r27, r27
    2cf4:	fd 01       	movw	r30, r26
    2cf6:	0d c0       	rjmp	.+26     	; 0x2d12 <__udivmodsi4_ep>

00002cf8 <__udivmodsi4_loop>:
    2cf8:	aa 1f       	adc	r26, r26
    2cfa:	bb 1f       	adc	r27, r27
    2cfc:	ee 1f       	adc	r30, r30
    2cfe:	ff 1f       	adc	r31, r31
    2d00:	a2 17       	cp	r26, r18
    2d02:	b3 07       	cpc	r27, r19
    2d04:	e4 07       	cpc	r30, r20
    2d06:	f5 07       	cpc	r31, r21
    2d08:	20 f0       	brcs	.+8      	; 0x2d12 <__udivmodsi4_ep>
    2d0a:	a2 1b       	sub	r26, r18
    2d0c:	b3 0b       	sbc	r27, r19
    2d0e:	e4 0b       	sbc	r30, r20
    2d10:	f5 0b       	sbc	r31, r21

00002d12 <__udivmodsi4_ep>:
    2d12:	66 1f       	adc	r22, r22
    2d14:	77 1f       	adc	r23, r23
    2d16:	88 1f       	adc	r24, r24
    2d18:	99 1f       	adc	r25, r25
    2d1a:	1a 94       	dec	r1
    2d1c:	69 f7       	brne	.-38     	; 0x2cf8 <__udivmodsi4_loop>
    2d1e:	60 95       	com	r22
    2d20:	70 95       	com	r23
    2d22:	80 95       	com	r24
    2d24:	90 95       	com	r25
    2d26:	9b 01       	movw	r18, r22
    2d28:	ac 01       	movw	r20, r24
    2d2a:	bd 01       	movw	r22, r26
    2d2c:	cf 01       	movw	r24, r30
    2d2e:	08 95       	ret

00002d30 <__divmodsi4>:
    2d30:	97 fb       	bst	r25, 7
    2d32:	09 2e       	mov	r0, r25
    2d34:	05 26       	eor	r0, r21
    2d36:	0e d0       	rcall	.+28     	; 0x2d54 <__divmodsi4_neg1>
    2d38:	57 fd       	sbrc	r21, 7
    2d3a:	04 d0       	rcall	.+8      	; 0x2d44 <__divmodsi4_neg2>
    2d3c:	d7 df       	rcall	.-82     	; 0x2cec <__udivmodsi4>
    2d3e:	0a d0       	rcall	.+20     	; 0x2d54 <__divmodsi4_neg1>
    2d40:	00 1c       	adc	r0, r0
    2d42:	38 f4       	brcc	.+14     	; 0x2d52 <__divmodsi4_exit>

00002d44 <__divmodsi4_neg2>:
    2d44:	50 95       	com	r21
    2d46:	40 95       	com	r20
    2d48:	30 95       	com	r19
    2d4a:	21 95       	neg	r18
    2d4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d4e:	4f 4f       	sbci	r20, 0xFF	; 255
    2d50:	5f 4f       	sbci	r21, 0xFF	; 255

00002d52 <__divmodsi4_exit>:
    2d52:	08 95       	ret

00002d54 <__divmodsi4_neg1>:
    2d54:	f6 f7       	brtc	.-4      	; 0x2d52 <__divmodsi4_exit>
    2d56:	90 95       	com	r25
    2d58:	80 95       	com	r24
    2d5a:	70 95       	com	r23
    2d5c:	61 95       	neg	r22
    2d5e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d60:	8f 4f       	sbci	r24, 0xFF	; 255
    2d62:	9f 4f       	sbci	r25, 0xFF	; 255
    2d64:	08 95       	ret

00002d66 <__prologue_saves__>:
    2d66:	2f 92       	push	r2
    2d68:	3f 92       	push	r3
    2d6a:	4f 92       	push	r4
    2d6c:	5f 92       	push	r5
    2d6e:	6f 92       	push	r6
    2d70:	7f 92       	push	r7
    2d72:	8f 92       	push	r8
    2d74:	9f 92       	push	r9
    2d76:	af 92       	push	r10
    2d78:	bf 92       	push	r11
    2d7a:	cf 92       	push	r12
    2d7c:	df 92       	push	r13
    2d7e:	ef 92       	push	r14
    2d80:	ff 92       	push	r15
    2d82:	0f 93       	push	r16
    2d84:	1f 93       	push	r17
    2d86:	cf 93       	push	r28
    2d88:	df 93       	push	r29
    2d8a:	cd b7       	in	r28, 0x3d	; 61
    2d8c:	de b7       	in	r29, 0x3e	; 62
    2d8e:	ca 1b       	sub	r28, r26
    2d90:	db 0b       	sbc	r29, r27
    2d92:	0f b6       	in	r0, 0x3f	; 63
    2d94:	f8 94       	cli
    2d96:	de bf       	out	0x3e, r29	; 62
    2d98:	0f be       	out	0x3f, r0	; 63
    2d9a:	cd bf       	out	0x3d, r28	; 61
    2d9c:	09 94       	ijmp

00002d9e <__epilogue_restores__>:
    2d9e:	2a 88       	ldd	r2, Y+18	; 0x12
    2da0:	39 88       	ldd	r3, Y+17	; 0x11
    2da2:	48 88       	ldd	r4, Y+16	; 0x10
    2da4:	5f 84       	ldd	r5, Y+15	; 0x0f
    2da6:	6e 84       	ldd	r6, Y+14	; 0x0e
    2da8:	7d 84       	ldd	r7, Y+13	; 0x0d
    2daa:	8c 84       	ldd	r8, Y+12	; 0x0c
    2dac:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dae:	aa 84       	ldd	r10, Y+10	; 0x0a
    2db0:	b9 84       	ldd	r11, Y+9	; 0x09
    2db2:	c8 84       	ldd	r12, Y+8	; 0x08
    2db4:	df 80       	ldd	r13, Y+7	; 0x07
    2db6:	ee 80       	ldd	r14, Y+6	; 0x06
    2db8:	fd 80       	ldd	r15, Y+5	; 0x05
    2dba:	0c 81       	ldd	r16, Y+4	; 0x04
    2dbc:	1b 81       	ldd	r17, Y+3	; 0x03
    2dbe:	aa 81       	ldd	r26, Y+2	; 0x02
    2dc0:	b9 81       	ldd	r27, Y+1	; 0x01
    2dc2:	ce 0f       	add	r28, r30
    2dc4:	d1 1d       	adc	r29, r1
    2dc6:	0f b6       	in	r0, 0x3f	; 63
    2dc8:	f8 94       	cli
    2dca:	de bf       	out	0x3e, r29	; 62
    2dcc:	0f be       	out	0x3f, r0	; 63
    2dce:	cd bf       	out	0x3d, r28	; 61
    2dd0:	ed 01       	movw	r28, r26
    2dd2:	08 95       	ret

00002dd4 <_exit>:
    2dd4:	f8 94       	cli

00002dd6 <__stop_program>:
    2dd6:	ff cf       	rjmp	.-2      	; 0x2dd6 <__stop_program>
